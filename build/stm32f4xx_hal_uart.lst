ARM GAS  /tmp/ccLJIDLw.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_uart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_UART_Init:
  26              	.LFB124:
  27              		.file 1 "Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c"
   1:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
   2:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @file    stm32f4xx_hal_uart.c
   4:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
   8:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral Control functions  
  11:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           + Peripheral State and Errors functions  
  12:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           
  13:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @verbatim       
  14:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  15:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
  17:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
  18:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  20:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure.
  21:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
  22:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  23:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) Enable the USARTx interface clock.
  24:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) UART pins configuration:
  25:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  26:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  27:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  28:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  29:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  30:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  31:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (##) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
ARM GAS  /tmp/ccLJIDLw.s 			page 2


  32:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  33:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  34:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  35:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required 
  36:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   Tx/Rx parameters.                
  37:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx Stream.
  38:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  39:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete 
  40:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                   interrupt on the DMA Tx/Rx Stream.
  41:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  42:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware 
  43:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         flow control and Mode(Receiver/Transmitter) in the Init structure.
  44:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  45:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  46:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_UART_Init() API.
  47:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  48:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling 
  49:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  50:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  51:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the LIN mode, initialize the UART registers by calling the HAL_LIN_Init() API.
  52:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
  53:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) For the Multi-Processor mode, initialize the UART registers by calling 
  54:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         the HAL_MultiProcessor_Init() API.
  55:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
  56:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  57:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) The specific UART interrupts (Transmission complete interrupt, 
  58:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             RXNE interrupt and Error Interrupts) will be managed using the macros
  59:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit 
  60:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             and receive process.
  61:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
  62:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  63:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) These APIs (HAL_UART_Init() and HAL_HalfDuplex_Init()) configure also the 
  64:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             low level Hardware GPIO, CLOCK, CORTEX...etc) by calling the customized 
  65:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_MspInit() API.
  66:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
  67:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  68:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         Three operation modes are available within this driver :     
  69:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
  70:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Polling mode IO operation ***
  71:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      =================================
  72:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]    
  73:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit() 
  74:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  75:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        
  76:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** Interrupt mode IO operation ***    
  77:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ===================================
  78:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]    
  79:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT() 
  80:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  81:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  82:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT() 
  83:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
  84:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
  85:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
  86:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  87:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
  88:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** DMA mode IO operation ***    
ARM GAS  /tmp/ccLJIDLw.s 			page 3


  89:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ==============================
  90:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
  91:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA() 
  92:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  93:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback 
  94:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can 
  95:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  96:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA() 
  97:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can 
  98:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback 
  99:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can 
 100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can 
 102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()      
 104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()  
 105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()      
 106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      *** UART HAL driver macros list ***
 108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      ============================================= 
 109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..]
 110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        
 112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral 
 113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral     
 114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) __HAL_UART_GET_IT_SOURCE: Check whether the specified UART interrupt has occurred or not
 119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      [..] 
 121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros 
 122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   @endverbatim
 124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
 125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @attention
 126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *      without specific prior written permission.
 139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
ARM GAS  /tmp/ccLJIDLw.s 			page 4


 146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ******************************************************************************
 152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */ 
 153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #include "stm32f4xx_hal.h"
 156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup STM32F4xx_HAL_Driver
 158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART UART
 162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief HAL UART module driver
 163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Constants
 170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private macro -------------------------------------------------------------*/
 176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @addtogroup UART_Private_Functions   UART Private Functions
 179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma); 
 188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
 197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig (UART_HandleTypeDef *huart);
 198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
 200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /* Exported functions ---------------------------------------------------------*/
ARM GAS  /tmp/ccLJIDLw.s 			page 5


 203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions 
 208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions 
 209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim    
 211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** ===============================================================================
 212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  ===============================================================================  
 214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in asynchronous mode.
 217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Baud Rate
 219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Word Length 
 220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Stop Bit
 221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****              please refer to Reference manual for possible UART frame formats.           
 225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Hardware flow control
 226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Receiver/transmitter modes
 227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) Over Sampling Method
 228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..]
 229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init() APIs 
 230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, LIN and Multi-Processor
 231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     configuration procedures (details for the procedures are available in reference manual (RM0329)
 232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
 234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the UART mode according to the specified parameters in
 239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         the UART_InitTypeDef and create the associated handle.
 240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
  28              		.loc 1 245 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
ARM GAS  /tmp/ccLJIDLw.s 			page 6


  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
  44              		.loc 1 247 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 002B     		cmp	r3, #0
  47 000c 01D1     		bne	.L2
 248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
  48              		.loc 1 249 0
  49 000e 0123     		movs	r3, #1
  50 0010 3FE0     		b	.L3
  51              	.L2:
 250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
  52              		.loc 1 266 0
  53 0012 7B68     		ldr	r3, [r7, #4]
  54 0014 93F83930 		ldrb	r3, [r3, #57]
  55 0018 DBB2     		uxtb	r3, r3
  56 001a 002B     		cmp	r3, #0
  57 001c 06D1     		bne	.L4
 267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {  
 268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  58              		.loc 1 269 0
  59 001e 7B68     		ldr	r3, [r7, #4]
  60 0020 0022     		movs	r2, #0
  61 0022 83F83820 		strb	r2, [r3, #56]
 270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  62              		.loc 1 271 0
  63 0026 7868     		ldr	r0, [r7, #4]
  64 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  65              	.L4:
 272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  66              		.loc 1 274 0
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 2422     		movs	r2, #36
  69 0030 83F83920 		strb	r2, [r3, #57]
ARM GAS  /tmp/ccLJIDLw.s 			page 7


 275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  70              		.loc 1 277 0
  71 0034 7B68     		ldr	r3, [r7, #4]
  72 0036 1B68     		ldr	r3, [r3]
  73 0038 7A68     		ldr	r2, [r7, #4]
  74 003a 1268     		ldr	r2, [r2]
  75 003c D268     		ldr	r2, [r2, #12]
  76 003e 22F40052 		bic	r2, r2, #8192
  77 0042 DA60     		str	r2, [r3, #12]
 278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
  78              		.loc 1 280 0
  79 0044 7868     		ldr	r0, [r7, #4]
  80 0046 FFF7FEFF 		bl	UART_SetConfig
 281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared: 
 283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  81              		.loc 1 285 0
  82 004a 7B68     		ldr	r3, [r7, #4]
  83 004c 1B68     		ldr	r3, [r3]
  84 004e 7A68     		ldr	r2, [r7, #4]
  85 0050 1268     		ldr	r2, [r2]
  86 0052 1269     		ldr	r2, [r2, #16]
  87 0054 22F49042 		bic	r2, r2, #18432
  88 0058 1A61     		str	r2, [r3, #16]
 286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  89              		.loc 1 286 0
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c 1B68     		ldr	r3, [r3]
  92 005e 7A68     		ldr	r2, [r7, #4]
  93 0060 1268     		ldr	r2, [r2]
  94 0062 5269     		ldr	r2, [r2, #20]
  95 0064 22F02A02 		bic	r2, r2, #42
  96 0068 5A61     		str	r2, [r3, #20]
 287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
  97              		.loc 1 289 0
  98 006a 7B68     		ldr	r3, [r7, #4]
  99 006c 1B68     		ldr	r3, [r3]
 100 006e 7A68     		ldr	r2, [r7, #4]
 101 0070 1268     		ldr	r2, [r2]
 102 0072 D268     		ldr	r2, [r2, #12]
 103 0074 42F40052 		orr	r2, r2, #8192
 104 0078 DA60     		str	r2, [r3, #12]
 290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 105              		.loc 1 292 0
 106 007a 7B68     		ldr	r3, [r7, #4]
 107 007c 0022     		movs	r2, #0
 108 007e DA63     		str	r2, [r3, #60]
ARM GAS  /tmp/ccLJIDLw.s 			page 8


 293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 109              		.loc 1 293 0
 110 0080 7B68     		ldr	r3, [r7, #4]
 111 0082 2022     		movs	r2, #32
 112 0084 83F83920 		strb	r2, [r3, #57]
 294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 113              		.loc 1 294 0
 114 0088 7B68     		ldr	r3, [r7, #4]
 115 008a 2022     		movs	r2, #32
 116 008c 83F83A20 		strb	r2, [r3, #58]
 295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 117              		.loc 1 296 0
 118 0090 0023     		movs	r3, #0
 119              	.L3:
 297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 120              		.loc 1 297 0
 121 0092 1846     		mov	r0, r3
 122 0094 0837     		adds	r7, r7, #8
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 8
 125 0096 BD46     		mov	sp, r7
 126              	.LCFI4:
 127              		.cfi_def_cfa_register 13
 128              		@ sp needed
 129 0098 80BD     		pop	{r7, pc}
 130              		.cfi_endproc
 131              	.LFE124:
 133              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 134              		.align	1
 135              		.global	HAL_HalfDuplex_Init
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu fpv4-sp-d16
 141              	HAL_HalfDuplex_Init:
 142              	.LFB125:
 298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the half-duplex mode according to the specified
 301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 143              		.loc 1 307 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 8
 146              		@ frame_needed = 1, uses_anonymous_args = 0
 147 0000 80B5     		push	{r7, lr}
 148              	.LCFI5:
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 7, -8
 151              		.cfi_offset 14, -4
 152 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccLJIDLw.s 			page 9


 153              	.LCFI6:
 154              		.cfi_def_cfa_offset 16
 155 0004 00AF     		add	r7, sp, #0
 156              	.LCFI7:
 157              		.cfi_def_cfa_register 7
 158 0006 7860     		str	r0, [r7, #4]
 308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 159              		.loc 1 309 0
 160 0008 7B68     		ldr	r3, [r7, #4]
 161 000a 002B     		cmp	r3, #0
 162 000c 01D1     		bne	.L6
 310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 163              		.loc 1 311 0
 164 000e 0123     		movs	r3, #1
 165 0010 47E0     		b	.L7
 166              	.L6:
 312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
 314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */ 
 315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 167              		.loc 1 319 0
 168 0012 7B68     		ldr	r3, [r7, #4]
 169 0014 93F83930 		ldrb	r3, [r3, #57]
 170 0018 DBB2     		uxtb	r3, r3
 171 001a 002B     		cmp	r3, #0
 172 001c 06D1     		bne	.L8
 320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 173              		.loc 1 322 0
 174 001e 7B68     		ldr	r3, [r7, #4]
 175 0020 0022     		movs	r2, #0
 176 0022 83F83820 		strb	r2, [r3, #56]
 323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 177              		.loc 1 324 0
 178 0026 7868     		ldr	r0, [r7, #4]
 179 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 180              	.L8:
 325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 181              		.loc 1 327 0
 182 002c 7B68     		ldr	r3, [r7, #4]
 183 002e 2422     		movs	r2, #36
 184 0030 83F83920 		strb	r2, [r3, #57]
 328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 185              		.loc 1 330 0
 186 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLJIDLw.s 			page 10


 187 0036 1B68     		ldr	r3, [r3]
 188 0038 7A68     		ldr	r2, [r7, #4]
 189 003a 1268     		ldr	r2, [r2]
 190 003c D268     		ldr	r2, [r2, #12]
 191 003e 22F40052 		bic	r2, r2, #8192
 192 0042 DA60     		str	r2, [r3, #12]
 331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 193              		.loc 1 333 0
 194 0044 7868     		ldr	r0, [r7, #4]
 195 0046 FFF7FEFF 		bl	UART_SetConfig
 334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared: 
 336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 196              		.loc 1 338 0
 197 004a 7B68     		ldr	r3, [r7, #4]
 198 004c 1B68     		ldr	r3, [r3]
 199 004e 7A68     		ldr	r2, [r7, #4]
 200 0050 1268     		ldr	r2, [r2]
 201 0052 1269     		ldr	r2, [r2, #16]
 202 0054 22F49042 		bic	r2, r2, #18432
 203 0058 1A61     		str	r2, [r3, #16]
 339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 204              		.loc 1 339 0
 205 005a 7B68     		ldr	r3, [r7, #4]
 206 005c 1B68     		ldr	r3, [r3]
 207 005e 7A68     		ldr	r2, [r7, #4]
 208 0060 1268     		ldr	r2, [r2]
 209 0062 5269     		ldr	r2, [r2, #20]
 210 0064 22F02202 		bic	r2, r2, #34
 211 0068 5A61     		str	r2, [r3, #20]
 340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 212              		.loc 1 342 0
 213 006a 7B68     		ldr	r3, [r7, #4]
 214 006c 1B68     		ldr	r3, [r3]
 215 006e 7A68     		ldr	r2, [r7, #4]
 216 0070 1268     		ldr	r2, [r2]
 217 0072 5269     		ldr	r2, [r2, #20]
 218 0074 42F00802 		orr	r2, r2, #8
 219 0078 5A61     		str	r2, [r3, #20]
 343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
 344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 220              		.loc 1 345 0
 221 007a 7B68     		ldr	r3, [r7, #4]
 222 007c 1B68     		ldr	r3, [r3]
 223 007e 7A68     		ldr	r2, [r7, #4]
 224 0080 1268     		ldr	r2, [r2]
 225 0082 D268     		ldr	r2, [r2, #12]
 226 0084 42F40052 		orr	r2, r2, #8192
 227 0088 DA60     		str	r2, [r3, #12]
 346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
ARM GAS  /tmp/ccLJIDLw.s 			page 11


 347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
 348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 228              		.loc 1 348 0
 229 008a 7B68     		ldr	r3, [r7, #4]
 230 008c 0022     		movs	r2, #0
 231 008e DA63     		str	r2, [r3, #60]
 349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 232              		.loc 1 349 0
 233 0090 7B68     		ldr	r3, [r7, #4]
 234 0092 2022     		movs	r2, #32
 235 0094 83F83920 		strb	r2, [r3, #57]
 350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 236              		.loc 1 350 0
 237 0098 7B68     		ldr	r3, [r7, #4]
 238 009a 2022     		movs	r2, #32
 239 009c 83F83A20 		strb	r2, [r3, #58]
 351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 240              		.loc 1 352 0
 241 00a0 0023     		movs	r3, #0
 242              	.L7:
 353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 243              		.loc 1 353 0
 244 00a2 1846     		mov	r0, r3
 245 00a4 0837     		adds	r7, r7, #8
 246              	.LCFI8:
 247              		.cfi_def_cfa_offset 8
 248 00a6 BD46     		mov	sp, r7
 249              	.LCFI9:
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 00a8 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE125:
 256              		.section	.text.HAL_LIN_Init,"ax",%progbits
 257              		.align	1
 258              		.global	HAL_LIN_Init
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu fpv4-sp-d16
 264              	HAL_LIN_Init:
 265              	.LFB126:
 354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the LIN mode according to the specified
 357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  BreakDetectLength Specifies the LIN break detection length.
 361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This parameter can be one of the following values:
 362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
 363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
 364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
ARM GAS  /tmp/ccLJIDLw.s 			page 12


 266              		.loc 1 367 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 8
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270 0000 80B5     		push	{r7, lr}
 271              	.LCFI10:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 7, -8
 274              		.cfi_offset 14, -4
 275 0002 82B0     		sub	sp, sp, #8
 276              	.LCFI11:
 277              		.cfi_def_cfa_offset 16
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI12:
 280              		.cfi_def_cfa_register 7
 281 0006 7860     		str	r0, [r7, #4]
 282 0008 3960     		str	r1, [r7]
 368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 283              		.loc 1 369 0
 284 000a 7B68     		ldr	r3, [r7, #4]
 285 000c 002B     		cmp	r3, #0
 286 000e 01D1     		bne	.L10
 370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 287              		.loc 1 371 0
 288 0010 0123     		movs	r3, #1
 289 0012 57E0     		b	.L11
 290              	.L10:
 372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    
 374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
 378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));
 379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 291              		.loc 1 380 0
 292 0014 7B68     		ldr	r3, [r7, #4]
 293 0016 93F83930 		ldrb	r3, [r3, #57]
 294 001a DBB2     		uxtb	r3, r3
 295 001c 002B     		cmp	r3, #0
 296 001e 06D1     		bne	.L12
 381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 297              		.loc 1 383 0
 298 0020 7B68     		ldr	r3, [r7, #4]
 299 0022 0022     		movs	r2, #0
 300 0024 83F83820 		strb	r2, [r3, #56]
 384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 301              		.loc 1 385 0
 302 0028 7868     		ldr	r0, [r7, #4]
 303 002a FFF7FEFF 		bl	HAL_UART_MspInit
 304              	.L12:
ARM GAS  /tmp/ccLJIDLw.s 			page 13


 386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 305              		.loc 1 388 0
 306 002e 7B68     		ldr	r3, [r7, #4]
 307 0030 2422     		movs	r2, #36
 308 0032 83F83920 		strb	r2, [r3, #57]
 389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 309              		.loc 1 391 0
 310 0036 7B68     		ldr	r3, [r7, #4]
 311 0038 1B68     		ldr	r3, [r3]
 312 003a 7A68     		ldr	r2, [r7, #4]
 313 003c 1268     		ldr	r2, [r2]
 314 003e D268     		ldr	r2, [r2, #12]
 315 0040 22F40052 		bic	r2, r2, #8192
 316 0044 DA60     		str	r2, [r3, #12]
 392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
 394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 317              		.loc 1 394 0
 318 0046 7868     		ldr	r0, [r7, #4]
 319 0048 FFF7FEFF 		bl	UART_SetConfig
 395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared: 
 397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN and IREN bits in the USART_CR3 register.*/
 399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 320              		.loc 1 399 0
 321 004c 7B68     		ldr	r3, [r7, #4]
 322 004e 1B68     		ldr	r3, [r3]
 323 0050 7A68     		ldr	r2, [r7, #4]
 324 0052 1268     		ldr	r2, [r2]
 325 0054 1269     		ldr	r2, [r2, #16]
 326 0056 22F40062 		bic	r2, r2, #2048
 327 005a 1A61     		str	r2, [r3, #16]
 400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 328              		.loc 1 400 0
 329 005c 7B68     		ldr	r3, [r7, #4]
 330 005e 1B68     		ldr	r3, [r3]
 331 0060 7A68     		ldr	r2, [r7, #4]
 332 0062 1268     		ldr	r2, [r2]
 333 0064 5269     		ldr	r2, [r2, #20]
 334 0066 22F02A02 		bic	r2, r2, #42
 335 006a 5A61     		str	r2, [r3, #20]
 401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 336              		.loc 1 403 0
 337 006c 7B68     		ldr	r3, [r7, #4]
 338 006e 1B68     		ldr	r3, [r3]
 339 0070 7A68     		ldr	r2, [r7, #4]
 340 0072 1268     		ldr	r2, [r2]
 341 0074 1269     		ldr	r2, [r2, #16]
 342 0076 42F48042 		orr	r2, r2, #16384
 343 007a 1A61     		str	r2, [r3, #16]
ARM GAS  /tmp/ccLJIDLw.s 			page 14


 404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 344              		.loc 1 406 0
 345 007c 7B68     		ldr	r3, [r7, #4]
 346 007e 1B68     		ldr	r3, [r3]
 347 0080 7A68     		ldr	r2, [r7, #4]
 348 0082 1268     		ldr	r2, [r2]
 349 0084 1269     		ldr	r2, [r2, #16]
 350 0086 22F02002 		bic	r2, r2, #32
 351 008a 1A61     		str	r2, [r3, #16]
 407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, BreakDetectLength);
 352              		.loc 1 407 0
 353 008c 7B68     		ldr	r3, [r7, #4]
 354 008e 1B68     		ldr	r3, [r3]
 355 0090 7A68     		ldr	r2, [r7, #4]
 356 0092 1268     		ldr	r2, [r2]
 357 0094 1169     		ldr	r1, [r2, #16]
 358 0096 3A68     		ldr	r2, [r7]
 359 0098 0A43     		orrs	r2, r2, r1
 360 009a 1A61     		str	r2, [r3, #16]
 408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 361              		.loc 1 410 0
 362 009c 7B68     		ldr	r3, [r7, #4]
 363 009e 1B68     		ldr	r3, [r3]
 364 00a0 7A68     		ldr	r2, [r7, #4]
 365 00a2 1268     		ldr	r2, [r2]
 366 00a4 D268     		ldr	r2, [r2, #12]
 367 00a6 42F40052 		orr	r2, r2, #8192
 368 00aa DA60     		str	r2, [r3, #12]
 411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state*/
 413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 369              		.loc 1 413 0
 370 00ac 7B68     		ldr	r3, [r7, #4]
 371 00ae 0022     		movs	r2, #0
 372 00b0 DA63     		str	r2, [r3, #60]
 414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 373              		.loc 1 414 0
 374 00b2 7B68     		ldr	r3, [r7, #4]
 375 00b4 2022     		movs	r2, #32
 376 00b6 83F83920 		strb	r2, [r3, #57]
 415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 377              		.loc 1 415 0
 378 00ba 7B68     		ldr	r3, [r7, #4]
 379 00bc 2022     		movs	r2, #32
 380 00be 83F83A20 		strb	r2, [r3, #58]
 416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 381              		.loc 1 417 0
 382 00c2 0023     		movs	r3, #0
 383              	.L11:
 418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 384              		.loc 1 418 0
 385 00c4 1846     		mov	r0, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 15


 386 00c6 0837     		adds	r7, r7, #8
 387              	.LCFI13:
 388              		.cfi_def_cfa_offset 8
 389 00c8 BD46     		mov	sp, r7
 390              	.LCFI14:
 391              		.cfi_def_cfa_register 13
 392              		@ sp needed
 393 00ca 80BD     		pop	{r7, pc}
 394              		.cfi_endproc
 395              	.LFE126:
 397              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 398              		.align	1
 399              		.global	HAL_MultiProcessor_Init
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu fpv4-sp-d16
 405              	HAL_MultiProcessor_Init:
 406              	.LFB127:
 419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Initializes the Multi-Processor mode according to the specified
 422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         parameters in the UART_InitTypeDef and create the associated handle.
 423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Address USART address
 426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  WakeUpMethod specifies the USART wake-up method.
 427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *          This parameter can be one of the following values:
 428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
 429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
 430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 407              		.loc 1 433 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 16
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411 0000 80B5     		push	{r7, lr}
 412              	.LCFI15:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 84B0     		sub	sp, sp, #16
 417              	.LCFI16:
 418              		.cfi_def_cfa_offset 24
 419 0004 00AF     		add	r7, sp, #0
 420              	.LCFI17:
 421              		.cfi_def_cfa_register 7
 422 0006 F860     		str	r0, [r7, #12]
 423 0008 0B46     		mov	r3, r1
 424 000a 7A60     		str	r2, [r7, #4]
 425 000c FB72     		strb	r3, [r7, #11]
 434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 426              		.loc 1 435 0
 427 000e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 16


 428 0010 002B     		cmp	r3, #0
 429 0012 01D1     		bne	.L14
 436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 430              		.loc 1 437 0
 431 0014 0123     		movs	r3, #1
 432 0016 5FE0     		b	.L15
 433              	.L14:
 438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_ADDRESS(Address));
 444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 434              		.loc 1 447 0
 435 0018 FB68     		ldr	r3, [r7, #12]
 436 001a 93F83930 		ldrb	r3, [r3, #57]
 437 001e DBB2     		uxtb	r3, r3
 438 0020 002B     		cmp	r3, #0
 439 0022 06D1     		bne	.L16
 448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 440              		.loc 1 450 0
 441 0024 FB68     		ldr	r3, [r7, #12]
 442 0026 0022     		movs	r2, #0
 443 0028 83F83820 		strb	r2, [r3, #56]
 451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init the low level hardware */
 452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 444              		.loc 1 452 0
 445 002c F868     		ldr	r0, [r7, #12]
 446 002e FFF7FEFF 		bl	HAL_UART_MspInit
 447              	.L16:
 453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 448              		.loc 1 455 0
 449 0032 FB68     		ldr	r3, [r7, #12]
 450 0034 2422     		movs	r2, #36
 451 0036 83F83920 		strb	r2, [r3, #57]
 456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the peripheral */
 458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 452              		.loc 1 458 0
 453 003a FB68     		ldr	r3, [r7, #12]
 454 003c 1B68     		ldr	r3, [r3]
 455 003e FA68     		ldr	r2, [r7, #12]
 456 0040 1268     		ldr	r2, [r2]
 457 0042 D268     		ldr	r2, [r2, #12]
 458 0044 22F40052 		bic	r2, r2, #8192
 459 0048 DA60     		str	r2, [r3, #12]
 459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the UART Communication parameters */
ARM GAS  /tmp/ccLJIDLw.s 			page 17


 461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_SetConfig(huart);
 460              		.loc 1 461 0
 461 004a F868     		ldr	r0, [r7, #12]
 462 004c FFF7FEFF 		bl	UART_SetConfig
 462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* In Multi-Processor mode, the following bits must be kept cleared: 
 464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - LINEN and CLKEN bits in the USART_CR2 register,
 465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
 466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 463              		.loc 1 466 0
 464 0050 FB68     		ldr	r3, [r7, #12]
 465 0052 1B68     		ldr	r3, [r3]
 466 0054 FA68     		ldr	r2, [r7, #12]
 467 0056 1268     		ldr	r2, [r2]
 468 0058 1269     		ldr	r2, [r2, #16]
 469 005a 22F49042 		bic	r2, r2, #18432
 470 005e 1A61     		str	r2, [r3, #16]
 467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 471              		.loc 1 467 0
 472 0060 FB68     		ldr	r3, [r7, #12]
 473 0062 1B68     		ldr	r3, [r3]
 474 0064 FA68     		ldr	r2, [r7, #12]
 475 0066 1268     		ldr	r2, [r2]
 476 0068 5269     		ldr	r2, [r2, #20]
 477 006a 22F02A02 		bic	r2, r2, #42
 478 006e 5A61     		str	r2, [r3, #20]
 468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear the USART address */
 470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 479              		.loc 1 470 0
 480 0070 FB68     		ldr	r3, [r7, #12]
 481 0072 1B68     		ldr	r3, [r3]
 482 0074 FA68     		ldr	r2, [r7, #12]
 483 0076 1268     		ldr	r2, [r2]
 484 0078 1269     		ldr	r2, [r2, #16]
 485 007a 22F00F02 		bic	r2, r2, #15
 486 007e 1A61     		str	r2, [r3, #16]
 471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the USART address node */
 472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, Address);
 487              		.loc 1 472 0
 488 0080 FB68     		ldr	r3, [r7, #12]
 489 0082 1B68     		ldr	r3, [r3]
 490 0084 FA68     		ldr	r2, [r7, #12]
 491 0086 1268     		ldr	r2, [r2]
 492 0088 1169     		ldr	r1, [r2, #16]
 493 008a FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 494 008c 0A43     		orrs	r2, r2, r1
 495 008e 1A61     		str	r2, [r3, #16]
 473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 496              		.loc 1 475 0
 497 0090 FB68     		ldr	r3, [r7, #12]
 498 0092 1B68     		ldr	r3, [r3]
 499 0094 FA68     		ldr	r2, [r7, #12]
 500 0096 1268     		ldr	r2, [r2]
 501 0098 D268     		ldr	r2, [r2, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 18


 502 009a 22F40062 		bic	r2, r2, #2048
 503 009e DA60     		str	r2, [r3, #12]
 476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, WakeUpMethod);
 504              		.loc 1 476 0
 505 00a0 FB68     		ldr	r3, [r7, #12]
 506 00a2 1B68     		ldr	r3, [r3]
 507 00a4 FA68     		ldr	r2, [r7, #12]
 508 00a6 1268     		ldr	r2, [r2]
 509 00a8 D168     		ldr	r1, [r2, #12]
 510 00aa 7A68     		ldr	r2, [r7, #4]
 511 00ac 0A43     		orrs	r2, r2, r1
 512 00ae DA60     		str	r2, [r3, #12]
 477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the peripheral */
 479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 513              		.loc 1 479 0
 514 00b0 FB68     		ldr	r3, [r7, #12]
 515 00b2 1B68     		ldr	r3, [r3]
 516 00b4 FA68     		ldr	r2, [r7, #12]
 517 00b6 1268     		ldr	r2, [r2]
 518 00b8 D268     		ldr	r2, [r2, #12]
 519 00ba 42F40052 		orr	r2, r2, #8192
 520 00be DA60     		str	r2, [r3, #12]
 480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Initialize the UART state */
 482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 521              		.loc 1 482 0
 522 00c0 FB68     		ldr	r3, [r7, #12]
 523 00c2 0022     		movs	r2, #0
 524 00c4 DA63     		str	r2, [r3, #60]
 483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState= HAL_UART_STATE_READY;
 525              		.loc 1 483 0
 526 00c6 FB68     		ldr	r3, [r7, #12]
 527 00c8 2022     		movs	r2, #32
 528 00ca 83F83920 		strb	r2, [r3, #57]
 484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState= HAL_UART_STATE_READY;
 529              		.loc 1 484 0
 530 00ce FB68     		ldr	r3, [r7, #12]
 531 00d0 2022     		movs	r2, #32
 532 00d2 83F83A20 		strb	r2, [r3, #58]
 485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 533              		.loc 1 486 0
 534 00d6 0023     		movs	r3, #0
 535              	.L15:
 487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 536              		.loc 1 487 0
 537 00d8 1846     		mov	r0, r3
 538 00da 1037     		adds	r7, r7, #16
 539              	.LCFI18:
 540              		.cfi_def_cfa_offset 8
 541 00dc BD46     		mov	sp, r7
 542              	.LCFI19:
 543              		.cfi_def_cfa_register 13
 544              		@ sp needed
 545 00de 80BD     		pop	{r7, pc}
 546              		.cfi_endproc
ARM GAS  /tmp/ccLJIDLw.s 			page 19


 547              	.LFE127:
 549              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_UART_DeInit
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	HAL_UART_DeInit:
 558              	.LFB128:
 488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DeInitializes the UART peripheral. 
 491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 559              		.loc 1 496 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 8
 562              		@ frame_needed = 1, uses_anonymous_args = 0
 563 0000 80B5     		push	{r7, lr}
 564              	.LCFI20:
 565              		.cfi_def_cfa_offset 8
 566              		.cfi_offset 7, -8
 567              		.cfi_offset 14, -4
 568 0002 82B0     		sub	sp, sp, #8
 569              	.LCFI21:
 570              		.cfi_def_cfa_offset 16
 571 0004 00AF     		add	r7, sp, #0
 572              	.LCFI22:
 573              		.cfi_def_cfa_register 7
 574 0006 7860     		str	r0, [r7, #4]
 497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the UART handle allocation */
 498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart == NULL)
 575              		.loc 1 498 0
 576 0008 7B68     		ldr	r3, [r7, #4]
 577 000a 002B     		cmp	r3, #0
 578 000c 01D1     		bne	.L18
 499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_ERROR;
 579              		.loc 1 500 0
 580 000e 0123     		movs	r3, #1
 581 0010 16E0     		b	.L19
 582              	.L18:
 501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
 504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 583              		.loc 1 506 0
 584 0012 7B68     		ldr	r3, [r7, #4]
 585 0014 2422     		movs	r2, #36
 586 0016 83F83920 		strb	r2, [r3, #57]
ARM GAS  /tmp/ccLJIDLw.s 			page 20


 507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DeInit the low level hardware */
 509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 587              		.loc 1 509 0
 588 001a 7868     		ldr	r0, [r7, #4]
 589 001c FFF7FEFF 		bl	HAL_UART_MspDeInit
 510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 590              		.loc 1 511 0
 591 0020 7B68     		ldr	r3, [r7, #4]
 592 0022 0022     		movs	r2, #0
 593 0024 DA63     		str	r2, [r3, #60]
 512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 594              		.loc 1 512 0
 595 0026 7B68     		ldr	r3, [r7, #4]
 596 0028 0022     		movs	r2, #0
 597 002a 83F83920 		strb	r2, [r3, #57]
 513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 598              		.loc 1 513 0
 599 002e 7B68     		ldr	r3, [r7, #4]
 600 0030 0022     		movs	r2, #0
 601 0032 83F83A20 		strb	r2, [r3, #58]
 514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Lock */
 516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 602              		.loc 1 516 0
 603 0036 7B68     		ldr	r3, [r7, #4]
 604 0038 0022     		movs	r2, #0
 605 003a 83F83820 		strb	r2, [r3, #56]
 517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 606              		.loc 1 518 0
 607 003e 0023     		movs	r3, #0
 608              	.L19:
 519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 609              		.loc 1 519 0
 610 0040 1846     		mov	r0, r3
 611 0042 0837     		adds	r7, r7, #8
 612              	.LCFI23:
 613              		.cfi_def_cfa_offset 8
 614 0044 BD46     		mov	sp, r7
 615              	.LCFI24:
 616              		.cfi_def_cfa_register 13
 617              		@ sp needed
 618 0046 80BD     		pop	{r7, pc}
 619              		.cfi_endproc
 620              	.LFE128:
 622              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 623              		.align	1
 624              		.weak	HAL_UART_MspInit
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu fpv4-sp-d16
 630              	HAL_UART_MspInit:
 631              	.LFB129:
 520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccLJIDLw.s 			page 21


 521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP Init.
 523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 632              		.loc 1 528 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 8
 635              		@ frame_needed = 1, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637 0000 80B4     		push	{r7}
 638              	.LCFI25:
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 7, -4
 641 0002 83B0     		sub	sp, sp, #12
 642              	.LCFI26:
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              	.LCFI27:
 646              		.cfi_def_cfa_register 7
 647 0006 7860     		str	r0, [r7, #4]
 529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    /* Prevent unused argument(s) compilation warning */
 530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspInit could be implemented in the user file
 533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
 534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 648              		.loc 1 534 0
 649 0008 00BF     		nop
 650 000a 0C37     		adds	r7, r7, #12
 651              	.LCFI28:
 652              		.cfi_def_cfa_offset 4
 653 000c BD46     		mov	sp, r7
 654              	.LCFI29:
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 000e 5DF8047B 		ldr	r7, [sp], #4
 658              	.LCFI30:
 659              		.cfi_restore 7
 660              		.cfi_def_cfa_offset 0
 661 0012 7047     		bx	lr
 662              		.cfi_endproc
 663              	.LFE129:
 665              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 666              		.align	1
 667              		.weak	HAL_UART_MspDeInit
 668              		.syntax unified
 669              		.thumb
 670              		.thumb_func
 671              		.fpu fpv4-sp-d16
 673              	HAL_UART_MspDeInit:
 674              	.LFB130:
 535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
ARM GAS  /tmp/ccLJIDLw.s 			page 22


 537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART MSP DeInit.
 538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
 541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 675              		.loc 1 543 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 8
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680 0000 80B4     		push	{r7}
 681              	.LCFI31:
 682              		.cfi_def_cfa_offset 4
 683              		.cfi_offset 7, -4
 684 0002 83B0     		sub	sp, sp, #12
 685              	.LCFI32:
 686              		.cfi_def_cfa_offset 16
 687 0004 00AF     		add	r7, sp, #0
 688              	.LCFI33:
 689              		.cfi_def_cfa_register 7
 690 0006 7860     		str	r0, [r7, #4]
 544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
 546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_MspDeInit could be implemented in the user file
 548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
 549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 691              		.loc 1 549 0
 692 0008 00BF     		nop
 693 000a 0C37     		adds	r7, r7, #12
 694              	.LCFI34:
 695              		.cfi_def_cfa_offset 4
 696 000c BD46     		mov	sp, r7
 697              	.LCFI35:
 698              		.cfi_def_cfa_register 13
 699              		@ sp needed
 700 000e 5DF8047B 		ldr	r7, [sp], #4
 701              	.LCFI36:
 702              		.cfi_restore 7
 703              		.cfi_def_cfa_offset 0
 704 0012 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE130:
 708              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 709              		.align	1
 710              		.global	HAL_UART_Transmit
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu fpv4-sp-d16
 716              	HAL_UART_Transmit:
 717              	.LFB131:
 550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
ARM GAS  /tmp/ccLJIDLw.s 			page 23


 553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions 
 556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief UART Transmit and Receive functions 
 557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
 558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
 559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
 560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### IO operation functions #####
 561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
 562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
 563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     and Half duplex data transfers.
 565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) There are two modes of transfer:
 567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode. 
 568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL status of all data processing is returned by the same function 
 569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             after finishing transfer.  
 570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        (++) Non blocking mode: The communication is performed using Interrupts 
 571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             or DMA, these APIs return the HAL status.
 572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The end of the data processing will be indicated through the 
 573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             dedicated UART IRQ when using Interrupt mode or the DMA IRQ when 
 574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             using DMA mode.
 575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks 
 576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             will be executed respectively at the end of the transmit or receive process.
 577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             The HAL_UART_ErrorCallback() user callback will be executed when 
 578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             a communication error is detected.
 579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Blocking mode APIs are:
 581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive() 
 583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non Blocking mode APIs with Interrupt are:
 585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) Non Blocking mode functions with DMA are:
 590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in non blocking mode:
 594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     [..] 
 599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       (@) In the Half duplex communication, it is forbidden to run the transmit 
 600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX 
 601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           can't be useful.
 602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       
 603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
 604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
 605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in blocking mode. 
 609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
ARM GAS  /tmp/ccLJIDLw.s 			page 24


 610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration  
 614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 718              		.loc 1 617 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 24
 721              		@ frame_needed = 1, uses_anonymous_args = 0
 722 0000 80B5     		push	{r7, lr}
 723              	.LCFI37:
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 88B0     		sub	sp, sp, #32
 728              	.LCFI38:
 729              		.cfi_def_cfa_offset 40
 730 0004 02AF     		add	r7, sp, #8
 731              	.LCFI39:
 732              		.cfi_def_cfa 7, 32
 733 0006 F860     		str	r0, [r7, #12]
 734 0008 B960     		str	r1, [r7, #8]
 735 000a 3B60     		str	r3, [r7]
 736 000c 1346     		mov	r3, r2	@ movhi
 737 000e FB80     		strh	r3, [r7, #6]	@ movhi
 618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
 619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 738              		.loc 1 619 0
 739 0010 0023     		movs	r3, #0
 740 0012 7B61     		str	r3, [r7, #20]
 620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY) 
 741              		.loc 1 622 0
 742 0014 FB68     		ldr	r3, [r7, #12]
 743 0016 93F83930 		ldrb	r3, [r3, #57]
 744 001a DBB2     		uxtb	r3, r3
 745 001c 202B     		cmp	r3, #32
 746 001e 40F08280 		bne	.L23
 623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 747              		.loc 1 624 0
 748 0022 BB68     		ldr	r3, [r7, #8]
 749 0024 002B     		cmp	r3, #0
 750 0026 02D0     		beq	.L24
 751              		.loc 1 624 0 is_stmt 0 discriminator 1
 752 0028 FB88     		ldrh	r3, [r7, #6]
 753 002a 002B     		cmp	r3, #0
 754 002c 01D1     		bne	.L25
 755              	.L24:
 625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 756              		.loc 1 626 0 is_stmt 1
 757 002e 0123     		movs	r3, #1
ARM GAS  /tmp/ccLJIDLw.s 			page 25


 758 0030 7AE0     		b	.L26
 759              	.L25:
 627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 760              		.loc 1 630 0
 761 0032 FB68     		ldr	r3, [r7, #12]
 762 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 763 0038 012B     		cmp	r3, #1
 764 003a 01D1     		bne	.L27
 765              		.loc 1 630 0 is_stmt 0 discriminator 1
 766 003c 0223     		movs	r3, #2
 767 003e 73E0     		b	.L26
 768              	.L27:
 769              		.loc 1 630 0 discriminator 2
 770 0040 FB68     		ldr	r3, [r7, #12]
 771 0042 0122     		movs	r2, #1
 772 0044 83F83820 		strb	r2, [r3, #56]
 631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 773              		.loc 1 632 0 is_stmt 1 discriminator 2
 774 0048 FB68     		ldr	r3, [r7, #12]
 775 004a 0022     		movs	r2, #0
 776 004c DA63     		str	r2, [r3, #60]
 633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 777              		.loc 1 633 0 discriminator 2
 778 004e FB68     		ldr	r3, [r7, #12]
 779 0050 2122     		movs	r2, #33
 780 0052 83F83920 		strb	r2, [r3, #57]
 634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
 635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 781              		.loc 1 636 0 discriminator 2
 782 0056 FFF7FEFF 		bl	HAL_GetTick
 783 005a 7861     		str	r0, [r7, #20]
 637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 784              		.loc 1 638 0 discriminator 2
 785 005c FB68     		ldr	r3, [r7, #12]
 786 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 787 0060 9A84     		strh	r2, [r3, #36]	@ movhi
 639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 788              		.loc 1 639 0 discriminator 2
 789 0062 FB68     		ldr	r3, [r7, #12]
 790 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 791 0066 DA84     		strh	r2, [r3, #38]	@ movhi
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while(huart->TxXferCount > 0U)
 792              		.loc 1 640 0 discriminator 2
 793 0068 41E0     		b	.L28
 794              	.L34:
 641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount--;
 795              		.loc 1 642 0
 796 006a FB68     		ldr	r3, [r7, #12]
 797 006c DB8C     		ldrh	r3, [r3, #38]	@ movhi
 798 006e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 26


 799 0070 013B     		subs	r3, r3, #1
 800 0072 9AB2     		uxth	r2, r3
 801 0074 FB68     		ldr	r3, [r7, #12]
 802 0076 DA84     		strh	r2, [r3, #38]	@ movhi
 643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 803              		.loc 1 643 0
 804 0078 FB68     		ldr	r3, [r7, #12]
 805 007a 9B68     		ldr	r3, [r3, #8]
 806 007c B3F5805F 		cmp	r3, #4096
 807 0080 21D1     		bne	.L29
 644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 808              		.loc 1 645 0
 809 0082 3B68     		ldr	r3, [r7]
 810 0084 0093     		str	r3, [sp]
 811 0086 7B69     		ldr	r3, [r7, #20]
 812 0088 0022     		movs	r2, #0
 813 008a 8021     		movs	r1, #128
 814 008c F868     		ldr	r0, [r7, #12]
 815 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 816 0092 0346     		mov	r3, r0
 817 0094 002B     		cmp	r3, #0
 818 0096 01D0     		beq	.L30
 646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 819              		.loc 1 647 0
 820 0098 0323     		movs	r3, #3
 821 009a 45E0     		b	.L26
 822              	.L30:
 648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 823              		.loc 1 649 0
 824 009c BB68     		ldr	r3, [r7, #8]
 825 009e 3B61     		str	r3, [r7, #16]
 650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 826              		.loc 1 650 0
 827 00a0 FB68     		ldr	r3, [r7, #12]
 828 00a2 1B68     		ldr	r3, [r3]
 829 00a4 3A69     		ldr	r2, [r7, #16]
 830 00a6 1288     		ldrh	r2, [r2]
 831 00a8 C2F30802 		ubfx	r2, r2, #0, #9
 832 00ac 5A60     		str	r2, [r3, #4]
 651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 833              		.loc 1 651 0
 834 00ae FB68     		ldr	r3, [r7, #12]
 835 00b0 1B69     		ldr	r3, [r3, #16]
 836 00b2 002B     		cmp	r3, #0
 837 00b4 03D1     		bne	.L31
 652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=2U;
 838              		.loc 1 653 0
 839 00b6 BB68     		ldr	r3, [r7, #8]
 840 00b8 0233     		adds	r3, r3, #2
 841 00ba BB60     		str	r3, [r7, #8]
 842 00bc 17E0     		b	.L28
 843              	.L31:
 654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
ARM GAS  /tmp/ccLJIDLw.s 			page 27


 655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=1U;
 844              		.loc 1 657 0
 845 00be BB68     		ldr	r3, [r7, #8]
 846 00c0 0133     		adds	r3, r3, #1
 847 00c2 BB60     		str	r3, [r7, #8]
 848 00c4 13E0     		b	.L28
 849              	.L29:
 658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
 661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 850              		.loc 1 662 0
 851 00c6 3B68     		ldr	r3, [r7]
 852 00c8 0093     		str	r3, [sp]
 853 00ca 7B69     		ldr	r3, [r7, #20]
 854 00cc 0022     		movs	r2, #0
 855 00ce 8021     		movs	r1, #128
 856 00d0 F868     		ldr	r0, [r7, #12]
 857 00d2 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 858 00d6 0346     		mov	r3, r0
 859 00d8 002B     		cmp	r3, #0
 860 00da 01D0     		beq	.L33
 663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 861              		.loc 1 664 0
 862 00dc 0323     		movs	r3, #3
 863 00de 23E0     		b	.L26
 864              	.L33:
 665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 865              		.loc 1 666 0
 866 00e0 FB68     		ldr	r3, [r7, #12]
 867 00e2 1A68     		ldr	r2, [r3]
 868 00e4 BB68     		ldr	r3, [r7, #8]
 869 00e6 591C     		adds	r1, r3, #1
 870 00e8 B960     		str	r1, [r7, #8]
 871 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 872 00ec 5360     		str	r3, [r2, #4]
 873              	.L28:
 640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 874              		.loc 1 640 0
 875 00ee FB68     		ldr	r3, [r7, #12]
 876 00f0 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 877 00f2 9BB2     		uxth	r3, r3
 878 00f4 002B     		cmp	r3, #0
 879 00f6 B8D1     		bne	.L34
 667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 880              		.loc 1 670 0
 881 00f8 3B68     		ldr	r3, [r7]
 882 00fa 0093     		str	r3, [sp]
 883 00fc 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccLJIDLw.s 			page 28


 884 00fe 0022     		movs	r2, #0
 885 0100 4021     		movs	r1, #64
 886 0102 F868     		ldr	r0, [r7, #12]
 887 0104 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 888 0108 0346     		mov	r3, r0
 889 010a 002B     		cmp	r3, #0
 890 010c 01D0     		beq	.L35
 671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     { 
 672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_TIMEOUT;
 891              		.loc 1 672 0
 892 010e 0323     		movs	r3, #3
 893 0110 0AE0     		b	.L26
 894              	.L35:
 673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 895              		.loc 1 676 0
 896 0112 FB68     		ldr	r3, [r7, #12]
 897 0114 2022     		movs	r2, #32
 898 0116 83F83920 		strb	r2, [r3, #57]
 677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 899              		.loc 1 679 0
 900 011a FB68     		ldr	r3, [r7, #12]
 901 011c 0022     		movs	r2, #0
 902 011e 83F83820 		strb	r2, [r3, #56]
 680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 903              		.loc 1 681 0
 904 0122 0023     		movs	r3, #0
 905 0124 00E0     		b	.L26
 906              	.L23:
 682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 907              		.loc 1 685 0
 908 0126 0223     		movs	r3, #2
 909              	.L26:
 686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 910              		.loc 1 687 0
 911 0128 1846     		mov	r0, r3
 912 012a 1837     		adds	r7, r7, #24
 913              	.LCFI40:
 914              		.cfi_def_cfa_offset 8
 915 012c BD46     		mov	sp, r7
 916              	.LCFI41:
 917              		.cfi_def_cfa_register 13
 918              		@ sp needed
 919 012e 80BD     		pop	{r7, pc}
 920              		.cfi_endproc
 921              	.LFE131:
 923              		.section	.text.HAL_UART_Receive,"ax",%progbits
 924              		.align	1
ARM GAS  /tmp/ccLJIDLw.s 			page 29


 925              		.global	HAL_UART_Receive
 926              		.syntax unified
 927              		.thumb
 928              		.thumb_func
 929              		.fpu fpv4-sp-d16
 931              	HAL_UART_Receive:
 932              	.LFB132:
 688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in blocking mode. 
 691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
 696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** { 
 933              		.loc 1 699 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 24
 936              		@ frame_needed = 1, uses_anonymous_args = 0
 937 0000 80B5     		push	{r7, lr}
 938              	.LCFI42:
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 88B0     		sub	sp, sp, #32
 943              	.LCFI43:
 944              		.cfi_def_cfa_offset 40
 945 0004 02AF     		add	r7, sp, #8
 946              	.LCFI44:
 947              		.cfi_def_cfa 7, 32
 948 0006 F860     		str	r0, [r7, #12]
 949 0008 B960     		str	r1, [r7, #8]
 950 000a 3B60     		str	r3, [r7]
 951 000c 1346     		mov	r3, r2	@ movhi
 952 000e FB80     		strh	r3, [r7, #6]	@ movhi
 700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
 701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tickstart = 0U;
 953              		.loc 1 701 0
 954 0010 0023     		movs	r3, #0
 955 0012 7B61     		str	r3, [r7, #20]
 702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY) 
 956              		.loc 1 704 0
 957 0014 FB68     		ldr	r3, [r7, #12]
 958 0016 93F83A30 		ldrb	r3, [r3, #58]
 959 001a DBB2     		uxtb	r3, r3
 960 001c 202B     		cmp	r3, #32
 961 001e 40F09080 		bne	.L37
 705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   { 
 706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 962              		.loc 1 706 0
 963 0022 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccLJIDLw.s 			page 30


 964 0024 002B     		cmp	r3, #0
 965 0026 02D0     		beq	.L38
 966              		.loc 1 706 0 is_stmt 0 discriminator 1
 967 0028 FB88     		ldrh	r3, [r7, #6]
 968 002a 002B     		cmp	r3, #0
 969 002c 01D1     		bne	.L39
 970              	.L38:
 707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return  HAL_ERROR;
 971              		.loc 1 708 0 is_stmt 1
 972 002e 0123     		movs	r3, #1
 973 0030 88E0     		b	.L40
 974              	.L39:
 709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 975              		.loc 1 712 0
 976 0032 FB68     		ldr	r3, [r7, #12]
 977 0034 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 978 0038 012B     		cmp	r3, #1
 979 003a 01D1     		bne	.L41
 980              		.loc 1 712 0 is_stmt 0 discriminator 1
 981 003c 0223     		movs	r3, #2
 982 003e 81E0     		b	.L40
 983              	.L41:
 984              		.loc 1 712 0 discriminator 2
 985 0040 FB68     		ldr	r3, [r7, #12]
 986 0042 0122     		movs	r2, #1
 987 0044 83F83820 		strb	r2, [r3, #56]
 713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 988              		.loc 1 714 0 is_stmt 1 discriminator 2
 989 0048 FB68     		ldr	r3, [r7, #12]
 990 004a 0022     		movs	r2, #0
 991 004c DA63     		str	r2, [r3, #60]
 715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 992              		.loc 1 715 0 discriminator 2
 993 004e FB68     		ldr	r3, [r7, #12]
 994 0050 2222     		movs	r2, #34
 995 0052 83F83A20 		strb	r2, [r3, #58]
 716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
 717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Init tickstart for timeout managment */
 718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tickstart = HAL_GetTick();
 996              		.loc 1 718 0 discriminator 2
 997 0056 FFF7FEFF 		bl	HAL_GetTick
 998 005a 7861     		str	r0, [r7, #20]
 719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size; 
 999              		.loc 1 720 0 discriminator 2
 1000 005c FB68     		ldr	r3, [r7, #12]
 1001 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1002 0060 9A85     		strh	r2, [r3, #44]	@ movhi
 721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 1003              		.loc 1 721 0 discriminator 2
 1004 0062 FB68     		ldr	r3, [r7, #12]
 1005 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/ccLJIDLw.s 			page 31


 1006 0066 DA85     		strh	r2, [r3, #46]	@ movhi
 722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check the remain data to be received */
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     while(huart->RxXferCount > 0U)
 1007              		.loc 1 724 0 discriminator 2
 1008 0068 5CE0     		b	.L42
 1009              	.L49:
 725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount--;
 1010              		.loc 1 726 0
 1011 006a FB68     		ldr	r3, [r7, #12]
 1012 006c DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1013 006e 9BB2     		uxth	r3, r3
 1014 0070 013B     		subs	r3, r3, #1
 1015 0072 9AB2     		uxth	r2, r3
 1016 0074 FB68     		ldr	r3, [r7, #12]
 1017 0076 DA85     		strh	r2, [r3, #46]	@ movhi
 727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 1018              		.loc 1 727 0
 1019 0078 FB68     		ldr	r3, [r7, #12]
 1020 007a 9B68     		ldr	r3, [r3, #8]
 1021 007c B3F5805F 		cmp	r3, #4096
 1022 0080 2BD1     		bne	.L43
 728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1023              		.loc 1 729 0
 1024 0082 3B68     		ldr	r3, [r7]
 1025 0084 0093     		str	r3, [sp]
 1026 0086 7B69     		ldr	r3, [r7, #20]
 1027 0088 0022     		movs	r2, #0
 1028 008a 2021     		movs	r1, #32
 1029 008c F868     		ldr	r0, [r7, #12]
 1030 008e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1031 0092 0346     		mov	r3, r0
 1032 0094 002B     		cmp	r3, #0
 1033 0096 01D0     		beq	.L44
 730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 1034              		.loc 1 731 0
 1035 0098 0323     		movs	r3, #3
 1036 009a 53E0     		b	.L40
 1037              	.L44:
 732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 1038              		.loc 1 733 0
 1039 009c BB68     		ldr	r3, [r7, #8]
 1040 009e 3B61     		str	r3, [r7, #16]
 734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1041              		.loc 1 734 0
 1042 00a0 FB68     		ldr	r3, [r7, #12]
 1043 00a2 1B69     		ldr	r3, [r3, #16]
 1044 00a4 002B     		cmp	r3, #0
 1045 00a6 0CD1     		bne	.L45
 735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 1046              		.loc 1 736 0
 1047 00a8 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 32


 1048 00aa 1B68     		ldr	r3, [r3]
 1049 00ac 5B68     		ldr	r3, [r3, #4]
 1050 00ae 9BB2     		uxth	r3, r3
 1051 00b0 C3F30803 		ubfx	r3, r3, #0, #9
 1052 00b4 9AB2     		uxth	r2, r3
 1053 00b6 3B69     		ldr	r3, [r7, #16]
 1054 00b8 1A80     		strh	r2, [r3]	@ movhi
 737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=2U;
 1055              		.loc 1 737 0
 1056 00ba BB68     		ldr	r3, [r7, #8]
 1057 00bc 0233     		adds	r3, r3, #2
 1058 00be BB60     		str	r3, [r7, #8]
 1059 00c0 30E0     		b	.L42
 1060              	.L45:
 738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 1061              		.loc 1 741 0
 1062 00c2 FB68     		ldr	r3, [r7, #12]
 1063 00c4 1B68     		ldr	r3, [r3]
 1064 00c6 5B68     		ldr	r3, [r3, #4]
 1065 00c8 9BB2     		uxth	r3, r3
 1066 00ca DBB2     		uxtb	r3, r3
 1067 00cc 9AB2     		uxth	r2, r3
 1068 00ce 3B69     		ldr	r3, [r7, #16]
 1069 00d0 1A80     		strh	r2, [r3]	@ movhi
 742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           pData +=1U;
 1070              		.loc 1 742 0
 1071 00d2 BB68     		ldr	r3, [r7, #8]
 1072 00d4 0133     		adds	r3, r3, #1
 1073 00d6 BB60     		str	r3, [r7, #8]
 1074 00d8 24E0     		b	.L42
 1075              	.L43:
 743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       } 
 746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
 747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
 748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1076              		.loc 1 748 0
 1077 00da 3B68     		ldr	r3, [r7]
 1078 00dc 0093     		str	r3, [sp]
 1079 00de 7B69     		ldr	r3, [r7, #20]
 1080 00e0 0022     		movs	r2, #0
 1081 00e2 2021     		movs	r1, #32
 1082 00e4 F868     		ldr	r0, [r7, #12]
 1083 00e6 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1084 00ea 0346     		mov	r3, r0
 1085 00ec 002B     		cmp	r3, #0
 1086 00ee 01D0     		beq	.L47
 749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         { 
 750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           return HAL_TIMEOUT;
 1087              		.loc 1 750 0
 1088 00f0 0323     		movs	r3, #3
 1089 00f2 27E0     		b	.L40
 1090              	.L47:
ARM GAS  /tmp/ccLJIDLw.s 			page 33


 751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(huart->Init.Parity == UART_PARITY_NONE)
 1091              		.loc 1 752 0
 1092 00f4 FB68     		ldr	r3, [r7, #12]
 1093 00f6 1B69     		ldr	r3, [r3, #16]
 1094 00f8 002B     		cmp	r3, #0
 1095 00fa 08D1     		bne	.L48
 753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 1096              		.loc 1 754 0
 1097 00fc BB68     		ldr	r3, [r7, #8]
 1098 00fe 5A1C     		adds	r2, r3, #1
 1099 0100 BA60     		str	r2, [r7, #8]
 1100 0102 FA68     		ldr	r2, [r7, #12]
 1101 0104 1268     		ldr	r2, [r2]
 1102 0106 5268     		ldr	r2, [r2, #4]
 1103 0108 D2B2     		uxtb	r2, r2
 1104 010a 1A70     		strb	r2, [r3]
 1105 010c 0AE0     		b	.L42
 1106              	.L48:
 755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
 757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 1107              		.loc 1 758 0
 1108 010e BB68     		ldr	r3, [r7, #8]
 1109 0110 5A1C     		adds	r2, r3, #1
 1110 0112 BA60     		str	r2, [r7, #8]
 1111 0114 FA68     		ldr	r2, [r7, #12]
 1112 0116 1268     		ldr	r2, [r2]
 1113 0118 5268     		ldr	r2, [r2, #4]
 1114 011a D2B2     		uxtb	r2, r2
 1115 011c 02F07F02 		and	r2, r2, #127
 1116 0120 D2B2     		uxtb	r2, r2
 1117 0122 1A70     		strb	r2, [r3]
 1118              	.L42:
 724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 1119              		.loc 1 724 0
 1120 0124 FB68     		ldr	r3, [r7, #12]
 1121 0126 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 1122 0128 9BB2     		uxth	r3, r3
 1123 012a 002B     		cmp	r3, #0
 1124 012c 9DD1     		bne	.L49
 759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
 760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
 762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1125              		.loc 1 765 0
 1126 012e FB68     		ldr	r3, [r7, #12]
 1127 0130 2022     		movs	r2, #32
 1128 0132 83F83A20 		strb	r2, [r3, #58]
 766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccLJIDLw.s 			page 34


 1129              		.loc 1 768 0
 1130 0136 FB68     		ldr	r3, [r7, #12]
 1131 0138 0022     		movs	r2, #0
 1132 013a 83F83820 		strb	r2, [r3, #56]
 769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1133              		.loc 1 770 0
 1134 013e 0023     		movs	r3, #0
 1135 0140 00E0     		b	.L40
 1136              	.L37:
 771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;   
 1137              		.loc 1 774 0
 1138 0142 0223     		movs	r3, #2
 1139              	.L40:
 775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1140              		.loc 1 776 0
 1141 0144 1846     		mov	r0, r3
 1142 0146 1837     		adds	r7, r7, #24
 1143              	.LCFI45:
 1144              		.cfi_def_cfa_offset 8
 1145 0148 BD46     		mov	sp, r7
 1146              	.LCFI46:
 1147              		.cfi_def_cfa_register 13
 1148              		@ sp needed
 1149 014a 80BD     		pop	{r7, pc}
 1150              		.cfi_endproc
 1151              	.LFE132:
 1153              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1154              		.align	1
 1155              		.global	HAL_UART_Transmit_IT
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu fpv4-sp-d16
 1161              	HAL_UART_Transmit_IT:
 1162              	.LFB133:
 777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
 780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1163              		.loc 1 787 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 16
 1166              		@ frame_needed = 1, uses_anonymous_args = 0
 1167              		@ link register save eliminated.
 1168 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccLJIDLw.s 			page 35


 1169              	.LCFI47:
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 0002 85B0     		sub	sp, sp, #20
 1173              	.LCFI48:
 1174              		.cfi_def_cfa_offset 24
 1175 0004 00AF     		add	r7, sp, #0
 1176              	.LCFI49:
 1177              		.cfi_def_cfa_register 7
 1178 0006 F860     		str	r0, [r7, #12]
 1179 0008 B960     		str	r1, [r7, #8]
 1180 000a 1346     		mov	r3, r2
 1181 000c FB80     		strh	r3, [r7, #6]	@ movhi
 788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1182              		.loc 1 789 0
 1183 000e FB68     		ldr	r3, [r7, #12]
 1184 0010 93F83930 		ldrb	r3, [r3, #57]
 1185 0014 DBB2     		uxtb	r3, r3
 1186 0016 202B     		cmp	r3, #32
 1187 0018 30D1     		bne	.L51
 790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1188              		.loc 1 791 0
 1189 001a BB68     		ldr	r3, [r7, #8]
 1190 001c 002B     		cmp	r3, #0
 1191 001e 02D0     		beq	.L52
 1192              		.loc 1 791 0 is_stmt 0 discriminator 1
 1193 0020 FB88     		ldrh	r3, [r7, #6]
 1194 0022 002B     		cmp	r3, #0
 1195 0024 01D1     		bne	.L53
 1196              	.L52:
 792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1197              		.loc 1 793 0 is_stmt 1
 1198 0026 0123     		movs	r3, #1
 1199 0028 29E0     		b	.L54
 1200              	.L53:
 794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1201              		.loc 1 797 0
 1202 002a FB68     		ldr	r3, [r7, #12]
 1203 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1204 0030 012B     		cmp	r3, #1
 1205 0032 01D1     		bne	.L55
 1206              		.loc 1 797 0 is_stmt 0 discriminator 1
 1207 0034 0223     		movs	r3, #2
 1208 0036 22E0     		b	.L54
 1209              	.L55:
 1210              		.loc 1 797 0 discriminator 2
 1211 0038 FB68     		ldr	r3, [r7, #12]
 1212 003a 0122     		movs	r2, #1
 1213 003c 83F83820 		strb	r2, [r3, #56]
 798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
ARM GAS  /tmp/ccLJIDLw.s 			page 36


 1214              		.loc 1 799 0 is_stmt 1 discriminator 2
 1215 0040 FB68     		ldr	r3, [r7, #12]
 1216 0042 BA68     		ldr	r2, [r7, #8]
 1217 0044 1A62     		str	r2, [r3, #32]
 800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1218              		.loc 1 800 0 discriminator 2
 1219 0046 FB68     		ldr	r3, [r7, #12]
 1220 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1221 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1222              		.loc 1 801 0 discriminator 2
 1223 004c FB68     		ldr	r3, [r7, #12]
 1224 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1225 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1226              		.loc 1 803 0 discriminator 2
 1227 0052 FB68     		ldr	r3, [r7, #12]
 1228 0054 0022     		movs	r2, #0
 1229 0056 DA63     		str	r2, [r3, #60]
 804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1230              		.loc 1 804 0 discriminator 2
 1231 0058 FB68     		ldr	r3, [r7, #12]
 1232 005a 2122     		movs	r2, #33
 1233 005c 83F83920 		strb	r2, [r3, #57]
 805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1234              		.loc 1 807 0 discriminator 2
 1235 0060 FB68     		ldr	r3, [r7, #12]
 1236 0062 0022     		movs	r2, #0
 1237 0064 83F83820 		strb	r2, [r3, #56]
 808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit data register empty Interrupt */
 810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 1238              		.loc 1 810 0 discriminator 2
 1239 0068 FB68     		ldr	r3, [r7, #12]
 1240 006a 1B68     		ldr	r3, [r3]
 1241 006c FA68     		ldr	r2, [r7, #12]
 1242 006e 1268     		ldr	r2, [r2]
 1243 0070 D268     		ldr	r2, [r2, #12]
 1244 0072 42F08002 		orr	r2, r2, #128
 1245 0076 DA60     		str	r2, [r3, #12]
 811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1246              		.loc 1 812 0 discriminator 2
 1247 0078 0023     		movs	r3, #0
 1248 007a 00E0     		b	.L54
 1249              	.L51:
 813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;   
 1250              		.loc 1 816 0
 1251 007c 0223     		movs	r3, #2
 1252              	.L54:
 817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
ARM GAS  /tmp/ccLJIDLw.s 			page 37


 818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1253              		.loc 1 818 0
 1254 007e 1846     		mov	r0, r3
 1255 0080 1437     		adds	r7, r7, #20
 1256              	.LCFI50:
 1257              		.cfi_def_cfa_offset 4
 1258 0082 BD46     		mov	sp, r7
 1259              	.LCFI51:
 1260              		.cfi_def_cfa_register 13
 1261              		@ sp needed
 1262 0084 5DF8047B 		ldr	r7, [sp], #4
 1263              	.LCFI52:
 1264              		.cfi_restore 7
 1265              		.cfi_def_cfa_offset 0
 1266 0088 7047     		bx	lr
 1267              		.cfi_endproc
 1268              	.LFE133:
 1270              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1271              		.align	1
 1272              		.global	HAL_UART_Receive_IT
 1273              		.syntax unified
 1274              		.thumb
 1275              		.thumb_func
 1276              		.fpu fpv4-sp-d16
 1278              	HAL_UART_Receive_IT:
 1279              	.LFB134:
 819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
 822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1280              		.loc 1 829 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 16
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284              		@ link register save eliminated.
 1285 0000 80B4     		push	{r7}
 1286              	.LCFI53:
 1287              		.cfi_def_cfa_offset 4
 1288              		.cfi_offset 7, -4
 1289 0002 85B0     		sub	sp, sp, #20
 1290              	.LCFI54:
 1291              		.cfi_def_cfa_offset 24
 1292 0004 00AF     		add	r7, sp, #0
 1293              	.LCFI55:
 1294              		.cfi_def_cfa_register 7
 1295 0006 F860     		str	r0, [r7, #12]
 1296 0008 B960     		str	r1, [r7, #8]
 1297 000a 1346     		mov	r3, r2
 1298 000c FB80     		strh	r3, [r7, #6]	@ movhi
 830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */ 
ARM GAS  /tmp/ccLJIDLw.s 			page 38


 831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1299              		.loc 1 831 0
 1300 000e FB68     		ldr	r3, [r7, #12]
 1301 0010 93F83A30 		ldrb	r3, [r3, #58]
 1302 0014 DBB2     		uxtb	r3, r3
 1303 0016 202B     		cmp	r3, #32
 1304 0018 38D1     		bne	.L57
 832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1305              		.loc 1 833 0
 1306 001a BB68     		ldr	r3, [r7, #8]
 1307 001c 002B     		cmp	r3, #0
 1308 001e 02D0     		beq	.L58
 1309              		.loc 1 833 0 is_stmt 0 discriminator 1
 1310 0020 FB88     		ldrh	r3, [r7, #6]
 1311 0022 002B     		cmp	r3, #0
 1312 0024 01D1     		bne	.L59
 1313              	.L58:
 834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1314              		.loc 1 835 0 is_stmt 1
 1315 0026 0123     		movs	r3, #1
 1316 0028 31E0     		b	.L60
 1317              	.L59:
 836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1318              		.loc 1 839 0
 1319 002a FB68     		ldr	r3, [r7, #12]
 1320 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1321 0030 012B     		cmp	r3, #1
 1322 0032 01D1     		bne	.L61
 1323              		.loc 1 839 0 is_stmt 0 discriminator 1
 1324 0034 0223     		movs	r3, #2
 1325 0036 2AE0     		b	.L60
 1326              	.L61:
 1327              		.loc 1 839 0 discriminator 2
 1328 0038 FB68     		ldr	r3, [r7, #12]
 1329 003a 0122     		movs	r2, #1
 1330 003c 83F83820 		strb	r2, [r3, #56]
 840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1331              		.loc 1 841 0 is_stmt 1 discriminator 2
 1332 0040 FB68     		ldr	r3, [r7, #12]
 1333 0042 BA68     		ldr	r2, [r7, #8]
 1334 0044 9A62     		str	r2, [r3, #40]
 842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size;
 1335              		.loc 1 842 0 discriminator 2
 1336 0046 FB68     		ldr	r3, [r7, #12]
 1337 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1338 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = Size;
 1339              		.loc 1 843 0 discriminator 2
 1340 004c FB68     		ldr	r3, [r7, #12]
 1341 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1342 0050 DA85     		strh	r2, [r3, #46]	@ movhi
ARM GAS  /tmp/ccLJIDLw.s 			page 39


 844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1343              		.loc 1 845 0 discriminator 2
 1344 0052 FB68     		ldr	r3, [r7, #12]
 1345 0054 0022     		movs	r2, #0
 1346 0056 DA63     		str	r2, [r3, #60]
 846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1347              		.loc 1 846 0 discriminator 2
 1348 0058 FB68     		ldr	r3, [r7, #12]
 1349 005a 2222     		movs	r2, #34
 1350 005c 83F83A20 		strb	r2, [r3, #58]
 847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1351              		.loc 1 849 0 discriminator 2
 1352 0060 FB68     		ldr	r3, [r7, #12]
 1353 0062 0022     		movs	r2, #0
 1354 0064 83F83820 		strb	r2, [r3, #56]
 850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1355              		.loc 1 852 0 discriminator 2
 1356 0068 FB68     		ldr	r3, [r7, #12]
 1357 006a 1B68     		ldr	r3, [r3]
 1358 006c FA68     		ldr	r2, [r7, #12]
 1359 006e 1268     		ldr	r2, [r2]
 1360 0070 5269     		ldr	r2, [r2, #20]
 1361 0072 42F00102 		orr	r2, r2, #1
 1362 0076 5A61     		str	r2, [r3, #20]
 853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error and Data Register not empty Interrupts */
 855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 1363              		.loc 1 855 0 discriminator 2
 1364 0078 FB68     		ldr	r3, [r7, #12]
 1365 007a 1B68     		ldr	r3, [r3]
 1366 007c FA68     		ldr	r2, [r7, #12]
 1367 007e 1268     		ldr	r2, [r2]
 1368 0080 D268     		ldr	r2, [r2, #12]
 1369 0082 42F49072 		orr	r2, r2, #288
 1370 0086 DA60     		str	r2, [r3, #12]
 856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1371              		.loc 1 857 0 discriminator 2
 1372 0088 0023     		movs	r3, #0
 1373 008a 00E0     		b	.L60
 1374              	.L57:
 858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY; 
 1375              		.loc 1 861 0
 1376 008c 0223     		movs	r3, #2
 1377              	.L60:
 862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1378              		.loc 1 863 0
 1379 008e 1846     		mov	r0, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 40


 1380 0090 1437     		adds	r7, r7, #20
 1381              	.LCFI56:
 1382              		.cfi_def_cfa_offset 4
 1383 0092 BD46     		mov	sp, r7
 1384              	.LCFI57:
 1385              		.cfi_def_cfa_register 13
 1386              		@ sp needed
 1387 0094 5DF8047B 		ldr	r7, [sp], #4
 1388              	.LCFI58:
 1389              		.cfi_restore 7
 1390              		.cfi_def_cfa_offset 0
 1391 0098 7047     		bx	lr
 1392              		.cfi_endproc
 1393              	.LFE134:
 1395              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1396              		.align	1
 1397              		.global	HAL_UART_Transmit_DMA
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu fpv4-sp-d16
 1403              	HAL_UART_Transmit_DMA:
 1404              	.LFB135:
 864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode. 
 867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be sent
 871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1405              		.loc 1 874 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 24
 1408              		@ frame_needed = 1, uses_anonymous_args = 0
 1409 0000 80B5     		push	{r7, lr}
 1410              	.LCFI59:
 1411              		.cfi_def_cfa_offset 8
 1412              		.cfi_offset 7, -8
 1413              		.cfi_offset 14, -4
 1414 0002 86B0     		sub	sp, sp, #24
 1415              	.LCFI60:
 1416              		.cfi_def_cfa_offset 32
 1417 0004 00AF     		add	r7, sp, #0
 1418              	.LCFI61:
 1419              		.cfi_def_cfa_register 7
 1420 0006 F860     		str	r0, [r7, #12]
 1421 0008 B960     		str	r1, [r7, #8]
 1422 000a 1346     		mov	r3, r2
 1423 000c FB80     		strh	r3, [r7, #6]	@ movhi
 875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t *tmp;
 876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
ARM GAS  /tmp/ccLJIDLw.s 			page 41


 1424              		.loc 1 878 0
 1425 000e FB68     		ldr	r3, [r7, #12]
 1426 0010 93F83930 		ldrb	r3, [r3, #57]
 1427 0014 DBB2     		uxtb	r3, r3
 1428 0016 202B     		cmp	r3, #32
 1429 0018 53D1     		bne	.L63
 879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0))
 1430              		.loc 1 880 0
 1431 001a BB68     		ldr	r3, [r7, #8]
 1432 001c 002B     		cmp	r3, #0
 1433 001e 02D0     		beq	.L64
 1434              		.loc 1 880 0 is_stmt 0 discriminator 1
 1435 0020 FB88     		ldrh	r3, [r7, #6]
 1436 0022 002B     		cmp	r3, #0
 1437 0024 01D1     		bne	.L65
 1438              	.L64:
 881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1439              		.loc 1 882 0 is_stmt 1
 1440 0026 0123     		movs	r3, #1
 1441 0028 4CE0     		b	.L66
 1442              	.L65:
 883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1443              		.loc 1 886 0
 1444 002a FB68     		ldr	r3, [r7, #12]
 1445 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1446 0030 012B     		cmp	r3, #1
 1447 0032 01D1     		bne	.L67
 1448              		.loc 1 886 0 is_stmt 0 discriminator 1
 1449 0034 0223     		movs	r3, #2
 1450 0036 45E0     		b	.L66
 1451              	.L67:
 1452              		.loc 1 886 0 discriminator 2
 1453 0038 FB68     		ldr	r3, [r7, #12]
 1454 003a 0122     		movs	r2, #1
 1455 003c 83F83820 		strb	r2, [r3, #56]
 887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1456              		.loc 1 888 0 is_stmt 1 discriminator 2
 1457 0040 BA68     		ldr	r2, [r7, #8]
 1458 0042 FB68     		ldr	r3, [r7, #12]
 1459 0044 1A62     		str	r2, [r3, #32]
 889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferSize = Size;
 1460              		.loc 1 889 0 discriminator 2
 1461 0046 FB68     		ldr	r3, [r7, #12]
 1462 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1463 004a 9A84     		strh	r2, [r3, #36]	@ movhi
 890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = Size;
 1464              		.loc 1 890 0 discriminator 2
 1465 004c FB68     		ldr	r3, [r7, #12]
 1466 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1467 0050 DA84     		strh	r2, [r3, #38]	@ movhi
 891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccLJIDLw.s 			page 42


 892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1468              		.loc 1 892 0 discriminator 2
 1469 0052 FB68     		ldr	r3, [r7, #12]
 1470 0054 0022     		movs	r2, #0
 1471 0056 DA63     		str	r2, [r3, #60]
 893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1472              		.loc 1 893 0 discriminator 2
 1473 0058 FB68     		ldr	r3, [r7, #12]
 1474 005a 2122     		movs	r2, #33
 1475 005c 83F83920 		strb	r2, [r3, #57]
 894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1476              		.loc 1 896 0 discriminator 2
 1477 0060 FB68     		ldr	r3, [r7, #12]
 1478 0062 1B6B     		ldr	r3, [r3, #48]
 1479 0064 194A     		ldr	r2, .L68
 1480 0066 DA63     		str	r2, [r3, #60]
 897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1481              		.loc 1 899 0 discriminator 2
 1482 0068 FB68     		ldr	r3, [r7, #12]
 1483 006a 1B6B     		ldr	r3, [r3, #48]
 1484 006c 184A     		ldr	r2, .L68+4
 1485 006e 1A64     		str	r2, [r3, #64]
 900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA error callback */
 902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1486              		.loc 1 902 0 discriminator 2
 1487 0070 FB68     		ldr	r3, [r7, #12]
 1488 0072 1B6B     		ldr	r3, [r3, #48]
 1489 0074 174A     		ldr	r2, .L68+8
 1490 0076 DA64     		str	r2, [r3, #76]
 903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA abort callback */
 905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1491              		.loc 1 905 0 discriminator 2
 1492 0078 FB68     		ldr	r3, [r7, #12]
 1493 007a 1B6B     		ldr	r3, [r3, #48]
 1494 007c 0022     		movs	r2, #0
 1495 007e 1A65     		str	r2, [r3, #80]
 906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART transmit DMA Stream */
 908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1496              		.loc 1 908 0 discriminator 2
 1497 0080 07F10803 		add	r3, r7, #8
 1498 0084 7B61     		str	r3, [r7, #20]
 909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 1499              		.loc 1 909 0 discriminator 2
 1500 0086 FB68     		ldr	r3, [r7, #12]
 1501 0088 186B     		ldr	r0, [r3, #48]
 1502 008a 7B69     		ldr	r3, [r7, #20]
 1503 008c 1968     		ldr	r1, [r3]
 1504 008e FB68     		ldr	r3, [r7, #12]
 1505 0090 1B68     		ldr	r3, [r3]
 1506 0092 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccLJIDLw.s 			page 43


 1507 0094 1A46     		mov	r2, r3
 1508 0096 FB88     		ldrh	r3, [r7, #6]
 1509 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
 910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 1510              		.loc 1 912 0 discriminator 2
 1511 009c FB68     		ldr	r3, [r7, #12]
 1512 009e 1B68     		ldr	r3, [r3]
 1513 00a0 6FF04002 		mvn	r2, #64
 1514 00a4 1A60     		str	r2, [r3]
 913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1515              		.loc 1 915 0 discriminator 2
 1516 00a6 FB68     		ldr	r3, [r7, #12]
 1517 00a8 0022     		movs	r2, #0
 1518 00aa 83F83820 		strb	r2, [r3, #56]
 916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
 919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1519              		.loc 1 919 0 discriminator 2
 1520 00ae FB68     		ldr	r3, [r7, #12]
 1521 00b0 1B68     		ldr	r3, [r3]
 1522 00b2 FA68     		ldr	r2, [r7, #12]
 1523 00b4 1268     		ldr	r2, [r2]
 1524 00b6 5269     		ldr	r2, [r2, #20]
 1525 00b8 42F08002 		orr	r2, r2, #128
 1526 00bc 5A61     		str	r2, [r3, #20]
 920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1527              		.loc 1 921 0 discriminator 2
 1528 00be 0023     		movs	r3, #0
 1529 00c0 00E0     		b	.L66
 1530              	.L63:
 922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
 924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 1531              		.loc 1 925 0
 1532 00c2 0223     		movs	r3, #2
 1533              	.L66:
 926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1534              		.loc 1 927 0
 1535 00c4 1846     		mov	r0, r3
 1536 00c6 1837     		adds	r7, r7, #24
 1537              	.LCFI62:
 1538              		.cfi_def_cfa_offset 8
 1539 00c8 BD46     		mov	sp, r7
 1540              	.LCFI63:
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 00ca 80BD     		pop	{r7, pc}
 1544              	.L69:
 1545              		.align	2
ARM GAS  /tmp/ccLJIDLw.s 			page 44


 1546              	.L68:
 1547 00cc 00000000 		.word	UART_DMATransmitCplt
 1548 00d0 00000000 		.word	UART_DMATxHalfCplt
 1549 00d4 00000000 		.word	UART_DMAError
 1550              		.cfi_endproc
 1551              	.LFE135:
 1553              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1554              		.align	1
 1555              		.global	HAL_UART_Receive_DMA
 1556              		.syntax unified
 1557              		.thumb
 1558              		.thumb_func
 1559              		.fpu fpv4-sp-d16
 1561              	HAL_UART_Receive_DMA:
 1562              	.LFB136:
 928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
 930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode. 
 931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
 932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
 933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  pData Pointer to data buffer
 934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Size Amount of data to be received
 935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
 936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
 937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
 938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {  
 1563              		.loc 1 939 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 24
 1566              		@ frame_needed = 1, uses_anonymous_args = 0
 1567 0000 80B5     		push	{r7, lr}
 1568              	.LCFI64:
 1569              		.cfi_def_cfa_offset 8
 1570              		.cfi_offset 7, -8
 1571              		.cfi_offset 14, -4
 1572 0002 86B0     		sub	sp, sp, #24
 1573              	.LCFI65:
 1574              		.cfi_def_cfa_offset 32
 1575 0004 00AF     		add	r7, sp, #0
 1576              	.LCFI66:
 1577              		.cfi_def_cfa_register 7
 1578 0006 F860     		str	r0, [r7, #12]
 1579 0008 B960     		str	r1, [r7, #8]
 1580 000a 1346     		mov	r3, r2
 1581 000c FB80     		strh	r3, [r7, #6]	@ movhi
 940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t *tmp;
 941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
 942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY) 
 1582              		.loc 1 943 0
 1583 000e FB68     		ldr	r3, [r7, #12]
 1584 0010 93F83A30 		ldrb	r3, [r3, #58]
 1585 0014 DBB2     		uxtb	r3, r3
 1586 0016 202B     		cmp	r3, #32
 1587 0018 66D1     		bne	.L71
 944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
ARM GAS  /tmp/ccLJIDLw.s 			page 45


 945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0)) 
 1588              		.loc 1 945 0
 1589 001a BB68     		ldr	r3, [r7, #8]
 1590 001c 002B     		cmp	r3, #0
 1591 001e 02D0     		beq	.L72
 1592              		.loc 1 945 0 is_stmt 0 discriminator 1
 1593 0020 FB88     		ldrh	r3, [r7, #6]
 1594 0022 002B     		cmp	r3, #0
 1595 0024 01D1     		bne	.L73
 1596              	.L72:
 946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_ERROR;
 1597              		.loc 1 947 0 is_stmt 1
 1598 0026 0123     		movs	r3, #1
 1599 0028 5FE0     		b	.L74
 1600              	.L73:
 948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Locked */
 951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_LOCK(huart);
 1601              		.loc 1 951 0
 1602 002a FB68     		ldr	r3, [r7, #12]
 1603 002c 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1604 0030 012B     		cmp	r3, #1
 1605 0032 01D1     		bne	.L75
 1606              		.loc 1 951 0 is_stmt 0 discriminator 1
 1607 0034 0223     		movs	r3, #2
 1608 0036 58E0     		b	.L74
 1609              	.L75:
 1610              		.loc 1 951 0 discriminator 2
 1611 0038 FB68     		ldr	r3, [r7, #12]
 1612 003a 0122     		movs	r2, #1
 1613 003c 83F83820 		strb	r2, [r3, #56]
 952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1614              		.loc 1 953 0 is_stmt 1 discriminator 2
 1615 0040 BA68     		ldr	r2, [r7, #8]
 1616 0042 FB68     		ldr	r3, [r7, #12]
 1617 0044 9A62     		str	r2, [r3, #40]
 954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferSize = Size;
 1618              		.loc 1 954 0 discriminator 2
 1619 0046 FB68     		ldr	r3, [r7, #12]
 1620 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1621 004a 9A85     		strh	r2, [r3, #44]	@ movhi
 955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1622              		.loc 1 956 0 discriminator 2
 1623 004c FB68     		ldr	r3, [r7, #12]
 1624 004e 0022     		movs	r2, #0
 1625 0050 DA63     		str	r2, [r3, #60]
 957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1626              		.loc 1 957 0 discriminator 2
 1627 0052 FB68     		ldr	r3, [r7, #12]
 1628 0054 2222     		movs	r2, #34
 1629 0056 83F83A20 		strb	r2, [r3, #58]
 958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
 959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
ARM GAS  /tmp/ccLJIDLw.s 			page 46


 960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1630              		.loc 1 960 0 discriminator 2
 1631 005a FB68     		ldr	r3, [r7, #12]
 1632 005c 5B6B     		ldr	r3, [r3, #52]
 1633 005e 254A     		ldr	r2, .L76
 1634 0060 DA63     		str	r2, [r3, #60]
 961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1635              		.loc 1 963 0 discriminator 2
 1636 0062 FB68     		ldr	r3, [r7, #12]
 1637 0064 5B6B     		ldr	r3, [r3, #52]
 1638 0066 244A     		ldr	r2, .L76+4
 1639 0068 1A64     		str	r2, [r3, #64]
 964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA error callback */
 966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 1640              		.loc 1 966 0 discriminator 2
 1641 006a FB68     		ldr	r3, [r7, #12]
 1642 006c 5B6B     		ldr	r3, [r3, #52]
 1643 006e 234A     		ldr	r2, .L76+8
 1644 0070 DA64     		str	r2, [r3, #76]
 967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set the DMA abort callback */
 969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
 1645              		.loc 1 969 0 discriminator 2
 1646 0072 FB68     		ldr	r3, [r7, #12]
 1647 0074 5B6B     		ldr	r3, [r3, #52]
 1648 0076 0022     		movs	r2, #0
 1649 0078 1A65     		str	r2, [r3, #80]
 970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA Stream */
 972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     tmp = (uint32_t*)&pData;
 1650              		.loc 1 972 0 discriminator 2
 1651 007a 07F10803 		add	r3, r7, #8
 1652 007e 7B61     		str	r3, [r7, #20]
 973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 1653              		.loc 1 973 0 discriminator 2
 1654 0080 FB68     		ldr	r3, [r7, #12]
 1655 0082 586B     		ldr	r0, [r3, #52]
 1656 0084 FB68     		ldr	r3, [r7, #12]
 1657 0086 1B68     		ldr	r3, [r3]
 1658 0088 0433     		adds	r3, r3, #4
 1659 008a 1946     		mov	r1, r3
 1660 008c 7B69     		ldr	r3, [r7, #20]
 1661 008e 1A68     		ldr	r2, [r3]
 1662 0090 FB88     		ldrh	r3, [r7, #6]
 1663 0092 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1664              	.LBB2:
 974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
 976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1665              		.loc 1 976 0 discriminator 2
 1666 0096 0023     		movs	r3, #0
 1667 0098 3B61     		str	r3, [r7, #16]
 1668 009a FB68     		ldr	r3, [r7, #12]
 1669 009c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLJIDLw.s 			page 47


 1670 009e 1B68     		ldr	r3, [r3]
 1671 00a0 3B61     		str	r3, [r7, #16]
 1672 00a2 FB68     		ldr	r3, [r7, #12]
 1673 00a4 1B68     		ldr	r3, [r3]
 1674 00a6 5B68     		ldr	r3, [r3, #4]
 1675 00a8 3B61     		str	r3, [r7, #16]
 1676 00aa 3B69     		ldr	r3, [r7, #16]
 1677              	.LBE2:
 977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Process Unlocked */
 979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1678              		.loc 1 979 0 discriminator 2
 1679 00ac FB68     		ldr	r3, [r7, #12]
 1680 00ae 0022     		movs	r2, #0
 1681 00b0 83F83820 		strb	r2, [r3, #56]
 980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
 982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1682              		.loc 1 982 0 discriminator 2
 1683 00b4 FB68     		ldr	r3, [r7, #12]
 1684 00b6 1B68     		ldr	r3, [r3]
 1685 00b8 FA68     		ldr	r2, [r7, #12]
 1686 00ba 1268     		ldr	r2, [r2]
 1687 00bc D268     		ldr	r2, [r2, #12]
 1688 00be 42F48072 		orr	r2, r2, #256
 1689 00c2 DA60     		str	r2, [r3, #12]
 983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1690              		.loc 1 985 0 discriminator 2
 1691 00c4 FB68     		ldr	r3, [r7, #12]
 1692 00c6 1B68     		ldr	r3, [r3]
 1693 00c8 FA68     		ldr	r2, [r7, #12]
 1694 00ca 1268     		ldr	r2, [r2]
 1695 00cc 5269     		ldr	r2, [r2, #20]
 1696 00ce 42F00102 		orr	r2, r2, #1
 1697 00d2 5A61     		str	r2, [r3, #20]
 986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     in the UART CR3 register */
 989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1698              		.loc 1 989 0 discriminator 2
 1699 00d4 FB68     		ldr	r3, [r7, #12]
 1700 00d6 1B68     		ldr	r3, [r3]
 1701 00d8 FA68     		ldr	r2, [r7, #12]
 1702 00da 1268     		ldr	r2, [r2]
 1703 00dc 5269     		ldr	r2, [r2, #20]
 1704 00de 42F04002 		orr	r2, r2, #64
 1705 00e2 5A61     		str	r2, [r3, #20]
 990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
 991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 1706              		.loc 1 991 0 discriminator 2
 1707 00e4 0023     		movs	r3, #0
 1708 00e6 00E0     		b	.L74
 1709              	.L71:
 992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
ARM GAS  /tmp/ccLJIDLw.s 			page 48


 994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY; 
 1710              		.loc 1 995 0
 1711 00e8 0223     		movs	r3, #2
 1712              	.L74:
 996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1713              		.loc 1 997 0
 1714 00ea 1846     		mov	r0, r3
 1715 00ec 1837     		adds	r7, r7, #24
 1716              	.LCFI67:
 1717              		.cfi_def_cfa_offset 8
 1718 00ee BD46     		mov	sp, r7
 1719              	.LCFI68:
 1720              		.cfi_def_cfa_register 13
 1721              		@ sp needed
 1722 00f0 80BD     		pop	{r7, pc}
 1723              	.L77:
 1724 00f2 00BF     		.align	2
 1725              	.L76:
 1726 00f4 00000000 		.word	UART_DMAReceiveCplt
 1727 00f8 00000000 		.word	UART_DMARxHalfCplt
 1728 00fc 00000000 		.word	UART_DMAError
 1729              		.cfi_endproc
 1730              	.LFE136:
 1732              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1733              		.align	1
 1734              		.global	HAL_UART_DMAPause
 1735              		.syntax unified
 1736              		.thumb
 1737              		.thumb_func
 1738              		.fpu fpv4-sp-d16
 1740              	HAL_UART_DMAPause:
 1741              	.LFB137:
 998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
 999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Pauses the DMA Transfer.
1001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1742              		.loc 1 1006 0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 16
 1745              		@ frame_needed = 1, uses_anonymous_args = 0
 1746              		@ link register save eliminated.
 1747 0000 80B4     		push	{r7}
 1748              	.LCFI69:
 1749              		.cfi_def_cfa_offset 4
 1750              		.cfi_offset 7, -4
 1751 0002 85B0     		sub	sp, sp, #20
 1752              	.LCFI70:
 1753              		.cfi_def_cfa_offset 24
 1754 0004 00AF     		add	r7, sp, #0
 1755              	.LCFI71:
ARM GAS  /tmp/ccLJIDLw.s 			page 49


 1756              		.cfi_def_cfa_register 7
 1757 0006 7860     		str	r0, [r7, #4]
1007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t dmarequest = 0x00U;
 1758              		.loc 1 1007 0
 1759 0008 0023     		movs	r3, #0
 1760 000a FB60     		str	r3, [r7, #12]
1008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 1761              		.loc 1 1010 0
 1762 000c 7B68     		ldr	r3, [r7, #4]
 1763 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1764 0012 012B     		cmp	r3, #1
 1765 0014 01D1     		bne	.L79
 1766              		.loc 1 1010 0 is_stmt 0 discriminator 1
 1767 0016 0223     		movs	r3, #2
 1768 0018 50E0     		b	.L80
 1769              	.L79:
 1770              		.loc 1 1010 0 discriminator 2
 1771 001a 7B68     		ldr	r3, [r7, #4]
 1772 001c 0122     		movs	r2, #1
 1773 001e 83F83820 		strb	r2, [r3, #56]
1011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 1774              		.loc 1 1011 0 is_stmt 1 discriminator 2
 1775 0022 7B68     		ldr	r3, [r7, #4]
 1776 0024 1B68     		ldr	r3, [r3]
 1777 0026 5B69     		ldr	r3, [r3, #20]
 1778 0028 03F08003 		and	r3, r3, #128
 1779 002c 002B     		cmp	r3, #0
 1780 002e 14BF     		ite	ne
 1781 0030 0123     		movne	r3, #1
 1782 0032 0023     		moveq	r3, #0
 1783 0034 DBB2     		uxtb	r3, r3
 1784 0036 FB60     		str	r3, [r7, #12]
1012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 1785              		.loc 1 1012 0 discriminator 2
 1786 0038 7B68     		ldr	r3, [r7, #4]
 1787 003a 93F83930 		ldrb	r3, [r3, #57]
 1788 003e DBB2     		uxtb	r3, r3
 1789 0040 212B     		cmp	r3, #33
 1790 0042 0AD1     		bne	.L81
 1791              		.loc 1 1012 0 is_stmt 0 discriminator 1
 1792 0044 FB68     		ldr	r3, [r7, #12]
 1793 0046 002B     		cmp	r3, #0
 1794 0048 07D0     		beq	.L81
1013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1795              		.loc 1 1015 0 is_stmt 1
 1796 004a 7B68     		ldr	r3, [r7, #4]
 1797 004c 1B68     		ldr	r3, [r3]
 1798 004e 7A68     		ldr	r2, [r7, #4]
 1799 0050 1268     		ldr	r2, [r2]
 1800 0052 5269     		ldr	r2, [r2, #20]
 1801 0054 22F08002 		bic	r2, r2, #128
 1802 0058 5A61     		str	r2, [r3, #20]
 1803              	.L81:
ARM GAS  /tmp/ccLJIDLw.s 			page 50


1016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 1804              		.loc 1 1017 0
 1805 005a 7B68     		ldr	r3, [r7, #4]
 1806 005c 1B68     		ldr	r3, [r3]
 1807 005e 5B69     		ldr	r3, [r3, #20]
 1808 0060 03F04003 		and	r3, r3, #64
 1809 0064 002B     		cmp	r3, #0
 1810 0066 14BF     		ite	ne
 1811 0068 0123     		movne	r3, #1
 1812 006a 0023     		moveq	r3, #0
 1813 006c DBB2     		uxtb	r3, r3
 1814 006e FB60     		str	r3, [r7, #12]
1018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 1815              		.loc 1 1018 0
 1816 0070 7B68     		ldr	r3, [r7, #4]
 1817 0072 93F83A30 		ldrb	r3, [r3, #58]
 1818 0076 DBB2     		uxtb	r3, r3
 1819 0078 222B     		cmp	r3, #34
 1820 007a 1AD1     		bne	.L82
 1821              		.loc 1 1018 0 is_stmt 0 discriminator 1
 1822 007c FB68     		ldr	r3, [r7, #12]
 1823 007e 002B     		cmp	r3, #0
 1824 0080 17D0     		beq	.L82
1019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1825              		.loc 1 1021 0 is_stmt 1
 1826 0082 7B68     		ldr	r3, [r7, #4]
 1827 0084 1B68     		ldr	r3, [r3]
 1828 0086 7A68     		ldr	r2, [r7, #4]
 1829 0088 1268     		ldr	r2, [r2]
 1830 008a D268     		ldr	r2, [r2, #12]
 1831 008c 22F48072 		bic	r2, r2, #256
 1832 0090 DA60     		str	r2, [r3, #12]
1022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1833              		.loc 1 1022 0
 1834 0092 7B68     		ldr	r3, [r7, #4]
 1835 0094 1B68     		ldr	r3, [r3]
 1836 0096 7A68     		ldr	r2, [r7, #4]
 1837 0098 1268     		ldr	r2, [r2]
 1838 009a 5269     		ldr	r2, [r2, #20]
 1839 009c 22F00102 		bic	r2, r2, #1
 1840 00a0 5A61     		str	r2, [r3, #20]
1023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1841              		.loc 1 1025 0
 1842 00a2 7B68     		ldr	r3, [r7, #4]
 1843 00a4 1B68     		ldr	r3, [r3]
 1844 00a6 7A68     		ldr	r2, [r7, #4]
 1845 00a8 1268     		ldr	r2, [r2]
 1846 00aa 5269     		ldr	r2, [r2, #20]
 1847 00ac 22F04002 		bic	r2, r2, #64
 1848 00b0 5A61     		str	r2, [r3, #20]
 1849              	.L82:
1026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
ARM GAS  /tmp/ccLJIDLw.s 			page 51


1027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1850              		.loc 1 1029 0
 1851 00b2 7B68     		ldr	r3, [r7, #4]
 1852 00b4 0022     		movs	r2, #0
 1853 00b6 83F83820 		strb	r2, [r3, #56]
1030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 1854              		.loc 1 1031 0
 1855 00ba 0023     		movs	r3, #0
 1856              	.L80:
1032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1857              		.loc 1 1032 0
 1858 00bc 1846     		mov	r0, r3
 1859 00be 1437     		adds	r7, r7, #20
 1860              	.LCFI72:
 1861              		.cfi_def_cfa_offset 4
 1862 00c0 BD46     		mov	sp, r7
 1863              	.LCFI73:
 1864              		.cfi_def_cfa_register 13
 1865              		@ sp needed
 1866 00c2 5DF8047B 		ldr	r7, [sp], #4
 1867              	.LCFI74:
 1868              		.cfi_restore 7
 1869              		.cfi_def_cfa_offset 0
 1870 00c6 7047     		bx	lr
 1871              		.cfi_endproc
 1872              	.LFE137:
 1874              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1875              		.align	1
 1876              		.global	HAL_UART_DMAResume
 1877              		.syntax unified
 1878              		.thumb
 1879              		.thumb_func
 1880              		.fpu fpv4-sp-d16
 1882              	HAL_UART_DMAResume:
 1883              	.LFB138:
1033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Resumes the DMA Transfer.
1036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 1884              		.loc 1 1041 0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 16
 1887              		@ frame_needed = 1, uses_anonymous_args = 0
 1888              		@ link register save eliminated.
 1889 0000 80B4     		push	{r7}
 1890              	.LCFI75:
 1891              		.cfi_def_cfa_offset 4
 1892              		.cfi_offset 7, -4
 1893 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccLJIDLw.s 			page 52


 1894              	.LCFI76:
 1895              		.cfi_def_cfa_offset 24
 1896 0004 00AF     		add	r7, sp, #0
 1897              	.LCFI77:
 1898              		.cfi_def_cfa_register 7
 1899 0006 7860     		str	r0, [r7, #4]
1042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 1900              		.loc 1 1043 0
 1901 0008 7B68     		ldr	r3, [r7, #4]
 1902 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1903 000e 012B     		cmp	r3, #1
 1904 0010 01D1     		bne	.L84
 1905              		.loc 1 1043 0 is_stmt 0 discriminator 1
 1906 0012 0223     		movs	r3, #2
 1907 0014 3FE0     		b	.L85
 1908              	.L84:
 1909              		.loc 1 1043 0 discriminator 2
 1910 0016 7B68     		ldr	r3, [r7, #4]
 1911 0018 0122     		movs	r2, #1
 1912 001a 83F83820 		strb	r2, [r3, #56]
1044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 1913              		.loc 1 1045 0 is_stmt 1 discriminator 2
 1914 001e 7B68     		ldr	r3, [r7, #4]
 1915 0020 93F83930 		ldrb	r3, [r3, #57]
 1916 0024 DBB2     		uxtb	r3, r3
 1917 0026 212B     		cmp	r3, #33
 1918 0028 07D1     		bne	.L86
1046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1919              		.loc 1 1048 0
 1920 002a 7B68     		ldr	r3, [r7, #4]
 1921 002c 1B68     		ldr	r3, [r3]
 1922 002e 7A68     		ldr	r2, [r7, #4]
 1923 0030 1268     		ldr	r2, [r2]
 1924 0032 5269     		ldr	r2, [r2, #20]
 1925 0034 42F08002 		orr	r2, r2, #128
 1926 0038 5A61     		str	r2, [r3, #20]
 1927              	.L86:
1049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 1928              		.loc 1 1050 0
 1929 003a 7B68     		ldr	r3, [r7, #4]
 1930 003c 93F83A30 		ldrb	r3, [r3, #58]
 1931 0040 DBB2     		uxtb	r3, r3
 1932 0042 222B     		cmp	r3, #34
 1933 0044 22D1     		bne	.L87
 1934              	.LBB3:
1051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer*/
1053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     __HAL_UART_CLEAR_OREFLAG(huart);
 1935              		.loc 1 1053 0
 1936 0046 0023     		movs	r3, #0
 1937 0048 FB60     		str	r3, [r7, #12]
 1938 004a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLJIDLw.s 			page 53


 1939 004c 1B68     		ldr	r3, [r3]
 1940 004e 1B68     		ldr	r3, [r3]
 1941 0050 FB60     		str	r3, [r7, #12]
 1942 0052 7B68     		ldr	r3, [r7, #4]
 1943 0054 1B68     		ldr	r3, [r3]
 1944 0056 5B68     		ldr	r3, [r3, #4]
 1945 0058 FB60     		str	r3, [r7, #12]
 1946 005a FB68     		ldr	r3, [r7, #12]
 1947              	.LBE3:
1054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1948              		.loc 1 1056 0
 1949 005c 7B68     		ldr	r3, [r7, #4]
 1950 005e 1B68     		ldr	r3, [r3]
 1951 0060 7A68     		ldr	r2, [r7, #4]
 1952 0062 1268     		ldr	r2, [r2]
 1953 0064 D268     		ldr	r2, [r2, #12]
 1954 0066 42F48072 		orr	r2, r2, #256
 1955 006a DA60     		str	r2, [r3, #12]
1057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1956              		.loc 1 1057 0
 1957 006c 7B68     		ldr	r3, [r7, #4]
 1958 006e 1B68     		ldr	r3, [r3]
 1959 0070 7A68     		ldr	r2, [r7, #4]
 1960 0072 1268     		ldr	r2, [r2]
 1961 0074 5269     		ldr	r2, [r2, #20]
 1962 0076 42F00102 		orr	r2, r2, #1
 1963 007a 5A61     		str	r2, [r3, #20]
1058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1964              		.loc 1 1060 0
 1965 007c 7B68     		ldr	r3, [r7, #4]
 1966 007e 1B68     		ldr	r3, [r3]
 1967 0080 7A68     		ldr	r2, [r7, #4]
 1968 0082 1268     		ldr	r2, [r2]
 1969 0084 5269     		ldr	r2, [r2, #20]
 1970 0086 42F04002 		orr	r2, r2, #64
 1971 008a 5A61     		str	r2, [r3, #20]
 1972              	.L87:
1061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1973              		.loc 1 1064 0
 1974 008c 7B68     		ldr	r3, [r7, #4]
 1975 008e 0022     		movs	r2, #0
 1976 0090 83F83820 		strb	r2, [r3, #56]
1065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 1977              		.loc 1 1066 0
 1978 0094 0023     		movs	r3, #0
 1979              	.L85:
1067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 1980              		.loc 1 1067 0
 1981 0096 1846     		mov	r0, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 54


 1982 0098 1437     		adds	r7, r7, #20
 1983              	.LCFI78:
 1984              		.cfi_def_cfa_offset 4
 1985 009a BD46     		mov	sp, r7
 1986              	.LCFI79:
 1987              		.cfi_def_cfa_register 13
 1988              		@ sp needed
 1989 009c 5DF8047B 		ldr	r7, [sp], #4
 1990              	.LCFI80:
 1991              		.cfi_restore 7
 1992              		.cfi_def_cfa_offset 0
 1993 00a0 7047     		bx	lr
 1994              		.cfi_endproc
 1995              	.LFE138:
 1997              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1998              		.align	1
 1999              		.global	HAL_UART_DMAStop
 2000              		.syntax unified
 2001              		.thumb
 2002              		.thumb_func
 2003              		.fpu fpv4-sp-d16
 2005              	HAL_UART_DMAStop:
 2006              	.LFB139:
1068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief Stops the DMA Transfer.
1071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2007              		.loc 1 1076 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 16
 2010              		@ frame_needed = 1, uses_anonymous_args = 0
 2011 0000 80B5     		push	{r7, lr}
 2012              	.LCFI81:
 2013              		.cfi_def_cfa_offset 8
 2014              		.cfi_offset 7, -8
 2015              		.cfi_offset 14, -4
 2016 0002 84B0     		sub	sp, sp, #16
 2017              	.LCFI82:
 2018              		.cfi_def_cfa_offset 24
 2019 0004 00AF     		add	r7, sp, #0
 2020              	.LCFI83:
 2021              		.cfi_def_cfa_register 7
 2022 0006 7860     		str	r0, [r7, #4]
1077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 2023              		.loc 1 1077 0
 2024 0008 0023     		movs	r3, #0
 2025 000a FB60     		str	r3, [r7, #12]
1078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      */
ARM GAS  /tmp/ccLJIDLw.s 			page 55


1083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 2026              		.loc 1 1085 0
 2027 000c 7B68     		ldr	r3, [r7, #4]
 2028 000e 1B68     		ldr	r3, [r3]
 2029 0010 5B69     		ldr	r3, [r3, #20]
 2030 0012 03F08003 		and	r3, r3, #128
 2031 0016 002B     		cmp	r3, #0
 2032 0018 14BF     		ite	ne
 2033 001a 0123     		movne	r3, #1
 2034 001c 0023     		moveq	r3, #0
 2035 001e DBB2     		uxtb	r3, r3
 2036 0020 FB60     		str	r3, [r7, #12]
1086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 2037              		.loc 1 1086 0
 2038 0022 7B68     		ldr	r3, [r7, #4]
 2039 0024 93F83930 		ldrb	r3, [r3, #57]
 2040 0028 DBB2     		uxtb	r3, r3
 2041 002a 212B     		cmp	r3, #33
 2042 002c 16D1     		bne	.L89
 2043              		.loc 1 1086 0 is_stmt 0 discriminator 1
 2044 002e FB68     		ldr	r3, [r7, #12]
 2045 0030 002B     		cmp	r3, #0
 2046 0032 13D0     		beq	.L89
1087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2047              		.loc 1 1088 0 is_stmt 1
 2048 0034 7B68     		ldr	r3, [r7, #4]
 2049 0036 1B68     		ldr	r3, [r3]
 2050 0038 7A68     		ldr	r2, [r7, #4]
 2051 003a 1268     		ldr	r2, [r2]
 2052 003c 5269     		ldr	r2, [r2, #20]
 2053 003e 22F08002 		bic	r2, r2, #128
 2054 0042 5A61     		str	r2, [r3, #20]
1089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2055              		.loc 1 1091 0
 2056 0044 7B68     		ldr	r3, [r7, #4]
 2057 0046 1B6B     		ldr	r3, [r3, #48]
 2058 0048 002B     		cmp	r3, #0
 2059 004a 04D0     		beq	.L90
1092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2060              		.loc 1 1093 0
 2061 004c 7B68     		ldr	r3, [r7, #4]
 2062 004e 1B6B     		ldr	r3, [r3, #48]
 2063 0050 1846     		mov	r0, r3
 2064 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 2065              	.L90:
1094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2066              		.loc 1 1095 0
 2067 0056 7868     		ldr	r0, [r7, #4]
 2068 0058 FFF7FEFF 		bl	UART_EndTxTransfer
 2069              	.L89:
ARM GAS  /tmp/ccLJIDLw.s 			page 56


1096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 2070              		.loc 1 1099 0
 2071 005c 7B68     		ldr	r3, [r7, #4]
 2072 005e 1B68     		ldr	r3, [r3]
 2073 0060 5B69     		ldr	r3, [r3, #20]
 2074 0062 03F04003 		and	r3, r3, #64
 2075 0066 002B     		cmp	r3, #0
 2076 0068 14BF     		ite	ne
 2077 006a 0123     		movne	r3, #1
 2078 006c 0023     		moveq	r3, #0
 2079 006e DBB2     		uxtb	r3, r3
 2080 0070 FB60     		str	r3, [r7, #12]
1100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 2081              		.loc 1 1100 0
 2082 0072 7B68     		ldr	r3, [r7, #4]
 2083 0074 93F83A30 		ldrb	r3, [r3, #58]
 2084 0078 DBB2     		uxtb	r3, r3
 2085 007a 222B     		cmp	r3, #34
 2086 007c 16D1     		bne	.L91
 2087              		.loc 1 1100 0 is_stmt 0 discriminator 1
 2088 007e FB68     		ldr	r3, [r7, #12]
 2089 0080 002B     		cmp	r3, #0
 2090 0082 13D0     		beq	.L91
1101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2091              		.loc 1 1102 0 is_stmt 1
 2092 0084 7B68     		ldr	r3, [r7, #4]
 2093 0086 1B68     		ldr	r3, [r3]
 2094 0088 7A68     		ldr	r2, [r7, #4]
 2095 008a 1268     		ldr	r2, [r2]
 2096 008c 5269     		ldr	r2, [r2, #20]
 2097 008e 22F04002 		bic	r2, r2, #64
 2098 0092 5A61     		str	r2, [r3, #20]
1103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2099              		.loc 1 1105 0
 2100 0094 7B68     		ldr	r3, [r7, #4]
 2101 0096 5B6B     		ldr	r3, [r3, #52]
 2102 0098 002B     		cmp	r3, #0
 2103 009a 04D0     		beq	.L92
1106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2104              		.loc 1 1107 0
 2105 009c 7B68     		ldr	r3, [r7, #4]
 2106 009e 5B6B     		ldr	r3, [r3, #52]
 2107 00a0 1846     		mov	r0, r3
 2108 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 2109              	.L92:
1108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2110              		.loc 1 1109 0
 2111 00a6 7868     		ldr	r0, [r7, #4]
 2112 00a8 FFF7FEFF 		bl	UART_EndRxTransfer
ARM GAS  /tmp/ccLJIDLw.s 			page 57


 2113              	.L91:
1110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2114              		.loc 1 1112 0
 2115 00ac 0023     		movs	r3, #0
1113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2116              		.loc 1 1113 0
 2117 00ae 1846     		mov	r0, r3
 2118 00b0 1037     		adds	r7, r7, #16
 2119              	.LCFI84:
 2120              		.cfi_def_cfa_offset 8
 2121 00b2 BD46     		mov	sp, r7
 2122              	.LCFI85:
 2123              		.cfi_def_cfa_register 13
 2124              		@ sp needed
 2125 00b4 80BD     		pop	{r7, pc}
 2126              		.cfi_endproc
 2127              	.LFE139:
 2129              		.section	.text.HAL_UART_Abort,"ax",%progbits
 2130              		.align	1
 2131              		.global	HAL_UART_Abort
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv4-sp-d16
 2137              	HAL_UART_Abort:
 2138              	.LFB140:
1114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2139              		.loc 1 1128 0
 2140              		.cfi_startproc
 2141              		@ args = 0, pretend = 0, frame = 8
 2142              		@ frame_needed = 1, uses_anonymous_args = 0
 2143 0000 80B5     		push	{r7, lr}
 2144              	.LCFI86:
 2145              		.cfi_def_cfa_offset 8
 2146              		.cfi_offset 7, -8
 2147              		.cfi_offset 14, -4
 2148 0002 82B0     		sub	sp, sp, #8
 2149              	.LCFI87:
 2150              		.cfi_def_cfa_offset 16
 2151 0004 00AF     		add	r7, sp, #0
 2152              	.LCFI88:
ARM GAS  /tmp/ccLJIDLw.s 			page 58


 2153              		.cfi_def_cfa_register 7
 2154 0006 7860     		str	r0, [r7, #4]
1129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2155              		.loc 1 1130 0
 2156 0008 7B68     		ldr	r3, [r7, #4]
 2157 000a 1B68     		ldr	r3, [r3]
 2158 000c 7A68     		ldr	r2, [r7, #4]
 2159 000e 1268     		ldr	r2, [r2]
 2160 0010 D268     		ldr	r2, [r2, #12]
 2161 0012 22F4F072 		bic	r2, r2, #480
 2162 0016 DA60     		str	r2, [r3, #12]
1131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2163              		.loc 1 1131 0
 2164 0018 7B68     		ldr	r3, [r7, #4]
 2165 001a 1B68     		ldr	r3, [r3]
 2166 001c 7A68     		ldr	r2, [r7, #4]
 2167 001e 1268     		ldr	r2, [r2]
 2168 0020 5269     		ldr	r2, [r2, #20]
 2169 0022 22F00102 		bic	r2, r2, #1
 2170 0026 5A61     		str	r2, [r3, #20]
1132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2171              		.loc 1 1134 0
 2172 0028 7B68     		ldr	r3, [r7, #4]
 2173 002a 1B68     		ldr	r3, [r3]
 2174 002c 5B69     		ldr	r3, [r3, #20]
 2175 002e 03F08003 		and	r3, r3, #128
 2176 0032 002B     		cmp	r3, #0
 2177 0034 14D0     		beq	.L95
1135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2178              		.loc 1 1136 0
 2179 0036 7B68     		ldr	r3, [r7, #4]
 2180 0038 1B68     		ldr	r3, [r3]
 2181 003a 7A68     		ldr	r2, [r7, #4]
 2182 003c 1268     		ldr	r2, [r2]
 2183 003e 5269     		ldr	r2, [r2, #20]
 2184 0040 22F08002 		bic	r2, r2, #128
 2185 0044 5A61     		str	r2, [r3, #20]
1137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
1139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2186              		.loc 1 1139 0
 2187 0046 7B68     		ldr	r3, [r7, #4]
 2188 0048 1B6B     		ldr	r3, [r3, #48]
 2189 004a 002B     		cmp	r3, #0
 2190 004c 08D0     		beq	.L95
1140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2191              		.loc 1 1143 0
 2192 004e 7B68     		ldr	r3, [r7, #4]
 2193 0050 1B6B     		ldr	r3, [r3, #48]
 2194 0052 0022     		movs	r2, #0
ARM GAS  /tmp/ccLJIDLw.s 			page 59


 2195 0054 1A65     		str	r2, [r3, #80]
1144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2196              		.loc 1 1145 0
 2197 0056 7B68     		ldr	r3, [r7, #4]
 2198 0058 1B6B     		ldr	r3, [r3, #48]
 2199 005a 1846     		mov	r0, r3
 2200 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2201              	.L95:
1146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2202              		.loc 1 1150 0
 2203 0060 7B68     		ldr	r3, [r7, #4]
 2204 0062 1B68     		ldr	r3, [r3]
 2205 0064 5B69     		ldr	r3, [r3, #20]
 2206 0066 03F04003 		and	r3, r3, #64
 2207 006a 002B     		cmp	r3, #0
 2208 006c 14D0     		beq	.L96
1151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2209              		.loc 1 1152 0
 2210 006e 7B68     		ldr	r3, [r7, #4]
 2211 0070 1B68     		ldr	r3, [r3]
 2212 0072 7A68     		ldr	r2, [r7, #4]
 2213 0074 1268     		ldr	r2, [r2]
 2214 0076 5269     		ldr	r2, [r2, #20]
 2215 0078 22F04002 		bic	r2, r2, #64
 2216 007c 5A61     		str	r2, [r3, #20]
1153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
1155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2217              		.loc 1 1155 0
 2218 007e 7B68     		ldr	r3, [r7, #4]
 2219 0080 5B6B     		ldr	r3, [r3, #52]
 2220 0082 002B     		cmp	r3, #0
 2221 0084 08D0     		beq	.L96
1156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2222              		.loc 1 1159 0
 2223 0086 7B68     		ldr	r3, [r7, #4]
 2224 0088 5B6B     		ldr	r3, [r3, #52]
 2225 008a 0022     		movs	r2, #0
 2226 008c 1A65     		str	r2, [r3, #80]
1160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2227              		.loc 1 1161 0
 2228 008e 7B68     		ldr	r3, [r7, #4]
 2229 0090 5B6B     		ldr	r3, [r3, #52]
 2230 0092 1846     		mov	r0, r3
 2231 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 2232              	.L96:
1162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
ARM GAS  /tmp/ccLJIDLw.s 			page 60


1163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2233              		.loc 1 1166 0
 2234 0098 7B68     		ldr	r3, [r7, #4]
 2235 009a 0022     		movs	r2, #0
 2236 009c DA84     		strh	r2, [r3, #38]	@ movhi
1167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2237              		.loc 1 1167 0
 2238 009e 7B68     		ldr	r3, [r7, #4]
 2239 00a0 0022     		movs	r2, #0
 2240 00a2 DA85     		strh	r2, [r3, #46]	@ movhi
1168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
1170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2241              		.loc 1 1170 0
 2242 00a4 7B68     		ldr	r3, [r7, #4]
 2243 00a6 0022     		movs	r2, #0
 2244 00a8 DA63     		str	r2, [r3, #60]
1171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState and huart->gState to Ready */
1173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2245              		.loc 1 1173 0
 2246 00aa 7B68     		ldr	r3, [r7, #4]
 2247 00ac 2022     		movs	r2, #32
 2248 00ae 83F83A20 		strb	r2, [r3, #58]
1174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2249              		.loc 1 1174 0
 2250 00b2 7B68     		ldr	r3, [r7, #4]
 2251 00b4 2022     		movs	r2, #32
 2252 00b6 83F83920 		strb	r2, [r3, #57]
1175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2253              		.loc 1 1176 0
 2254 00ba 0023     		movs	r3, #0
1177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2255              		.loc 1 1177 0
 2256 00bc 1846     		mov	r0, r3
 2257 00be 0837     		adds	r7, r7, #8
 2258              	.LCFI89:
 2259              		.cfi_def_cfa_offset 8
 2260 00c0 BD46     		mov	sp, r7
 2261              	.LCFI90:
 2262              		.cfi_def_cfa_register 13
 2263              		@ sp needed
 2264 00c2 80BD     		pop	{r7, pc}
 2265              		.cfi_endproc
 2266              	.LFE140:
 2268              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2269              		.align	1
 2270              		.global	HAL_UART_AbortTransmit
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.fpu fpv4-sp-d16
 2276              	HAL_UART_AbortTransmit:
ARM GAS  /tmp/ccLJIDLw.s 			page 61


 2277              	.LFB141:
1178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2278              		.loc 1 1192 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 8
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282 0000 80B5     		push	{r7, lr}
 2283              	.LCFI91:
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 82B0     		sub	sp, sp, #8
 2288              	.LCFI92:
 2289              		.cfi_def_cfa_offset 16
 2290 0004 00AF     		add	r7, sp, #0
 2291              	.LCFI93:
 2292              		.cfi_def_cfa_register 7
 2293 0006 7860     		str	r0, [r7, #4]
1193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2294              		.loc 1 1194 0
 2295 0008 7B68     		ldr	r3, [r7, #4]
 2296 000a 1B68     		ldr	r3, [r3]
 2297 000c 7A68     		ldr	r2, [r7, #4]
 2298 000e 1268     		ldr	r2, [r2]
 2299 0010 D268     		ldr	r2, [r2, #12]
 2300 0012 22F0C002 		bic	r2, r2, #192
 2301 0016 DA60     		str	r2, [r3, #12]
1195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2302              		.loc 1 1197 0
 2303 0018 7B68     		ldr	r3, [r7, #4]
 2304 001a 1B68     		ldr	r3, [r3]
 2305 001c 5B69     		ldr	r3, [r3, #20]
 2306 001e 03F08003 		and	r3, r3, #128
 2307 0022 002B     		cmp	r3, #0
 2308 0024 14D0     		beq	.L99
1198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2309              		.loc 1 1199 0
 2310 0026 7B68     		ldr	r3, [r7, #4]
 2311 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLJIDLw.s 			page 62


 2312 002a 7A68     		ldr	r2, [r7, #4]
 2313 002c 1268     		ldr	r2, [r2]
 2314 002e 5269     		ldr	r2, [r2, #20]
 2315 0030 22F08002 		bic	r2, r2, #128
 2316 0034 5A61     		str	r2, [r3, #20]
1200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2317              		.loc 1 1202 0
 2318 0036 7B68     		ldr	r3, [r7, #4]
 2319 0038 1B6B     		ldr	r3, [r3, #48]
 2320 003a 002B     		cmp	r3, #0
 2321 003c 08D0     		beq	.L99
1203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2322              		.loc 1 1206 0
 2323 003e 7B68     		ldr	r3, [r7, #4]
 2324 0040 1B6B     		ldr	r3, [r3, #48]
 2325 0042 0022     		movs	r2, #0
 2326 0044 1A65     		str	r2, [r3, #80]
1207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2327              		.loc 1 1208 0
 2328 0046 7B68     		ldr	r3, [r7, #4]
 2329 0048 1B6B     		ldr	r3, [r3, #48]
 2330 004a 1846     		mov	r0, r3
 2331 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2332              	.L99:
1209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Tx transfer counter */
1213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 2333              		.loc 1 1213 0
 2334 0050 7B68     		ldr	r3, [r7, #4]
 2335 0052 0022     		movs	r2, #0
 2336 0054 DA84     		strh	r2, [r3, #38]	@ movhi
1214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2337              		.loc 1 1216 0
 2338 0056 7B68     		ldr	r3, [r7, #4]
 2339 0058 2022     		movs	r2, #32
 2340 005a 83F83920 		strb	r2, [r3, #57]
1217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2341              		.loc 1 1218 0
 2342 005e 0023     		movs	r3, #0
1219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2343              		.loc 1 1219 0
 2344 0060 1846     		mov	r0, r3
 2345 0062 0837     		adds	r7, r7, #8
 2346              	.LCFI94:
 2347              		.cfi_def_cfa_offset 8
 2348 0064 BD46     		mov	sp, r7
ARM GAS  /tmp/ccLJIDLw.s 			page 63


 2349              	.LCFI95:
 2350              		.cfi_def_cfa_register 13
 2351              		@ sp needed
 2352 0066 80BD     		pop	{r7, pc}
 2353              		.cfi_endproc
 2354              	.LFE141:
 2356              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2357              		.align	1
 2358              		.global	HAL_UART_AbortReceive
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv4-sp-d16
 2364              	HAL_UART_AbortReceive:
 2365              	.LFB142:
1220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2366              		.loc 1 1234 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 8
 2369              		@ frame_needed = 1, uses_anonymous_args = 0
 2370 0000 80B5     		push	{r7, lr}
 2371              	.LCFI96:
 2372              		.cfi_def_cfa_offset 8
 2373              		.cfi_offset 7, -8
 2374              		.cfi_offset 14, -4
 2375 0002 82B0     		sub	sp, sp, #8
 2376              	.LCFI97:
 2377              		.cfi_def_cfa_offset 16
 2378 0004 00AF     		add	r7, sp, #0
 2379              	.LCFI98:
 2380              		.cfi_def_cfa_register 7
 2381 0006 7860     		str	r0, [r7, #4]
1235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2382              		.loc 1 1236 0
 2383 0008 7B68     		ldr	r3, [r7, #4]
 2384 000a 1B68     		ldr	r3, [r3]
 2385 000c 7A68     		ldr	r2, [r7, #4]
 2386 000e 1268     		ldr	r2, [r2]
 2387 0010 D268     		ldr	r2, [r2, #12]
 2388 0012 22F49072 		bic	r2, r2, #288
 2389 0016 DA60     		str	r2, [r3, #12]
1237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
ARM GAS  /tmp/ccLJIDLw.s 			page 64


 2390              		.loc 1 1237 0
 2391 0018 7B68     		ldr	r3, [r7, #4]
 2392 001a 1B68     		ldr	r3, [r3]
 2393 001c 7A68     		ldr	r2, [r7, #4]
 2394 001e 1268     		ldr	r2, [r2]
 2395 0020 5269     		ldr	r2, [r2, #20]
 2396 0022 22F00102 		bic	r2, r2, #1
 2397 0026 5A61     		str	r2, [r3, #20]
1238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2398              		.loc 1 1240 0
 2399 0028 7B68     		ldr	r3, [r7, #4]
 2400 002a 1B68     		ldr	r3, [r3]
 2401 002c 5B69     		ldr	r3, [r3, #20]
 2402 002e 03F04003 		and	r3, r3, #64
 2403 0032 002B     		cmp	r3, #0
 2404 0034 14D0     		beq	.L102
1241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2405              		.loc 1 1242 0
 2406 0036 7B68     		ldr	r3, [r7, #4]
 2407 0038 1B68     		ldr	r3, [r3]
 2408 003a 7A68     		ldr	r2, [r7, #4]
 2409 003c 1268     		ldr	r2, [r2]
 2410 003e 5269     		ldr	r2, [r2, #20]
 2411 0040 22F04002 		bic	r2, r2, #64
 2412 0044 5A61     		str	r2, [r3, #20]
1243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2413              		.loc 1 1245 0
 2414 0046 7B68     		ldr	r3, [r7, #4]
 2415 0048 5B6B     		ldr	r3, [r3, #52]
 2416 004a 002B     		cmp	r3, #0
 2417 004c 08D0     		beq	.L102
1246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2418              		.loc 1 1249 0
 2419 004e 7B68     		ldr	r3, [r7, #4]
 2420 0050 5B6B     		ldr	r3, [r3, #52]
 2421 0052 0022     		movs	r2, #0
 2422 0054 1A65     		str	r2, [r3, #80]
1250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2423              		.loc 1 1251 0
 2424 0056 7B68     		ldr	r3, [r7, #4]
 2425 0058 5B6B     		ldr	r3, [r3, #52]
 2426 005a 1846     		mov	r0, r3
 2427 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2428              	.L102:
1252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset Rx transfer counter */
ARM GAS  /tmp/ccLJIDLw.s 			page 65


1256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 2429              		.loc 1 1256 0
 2430 0060 7B68     		ldr	r3, [r7, #4]
 2431 0062 0022     		movs	r2, #0
 2432 0064 DA85     		strh	r2, [r3, #46]	@ movhi
1257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2433              		.loc 1 1259 0
 2434 0066 7B68     		ldr	r3, [r7, #4]
 2435 0068 2022     		movs	r2, #32
 2436 006a 83F83A20 		strb	r2, [r3, #58]
1260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2437              		.loc 1 1261 0
 2438 006e 0023     		movs	r3, #0
1262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2439              		.loc 1 1262 0
 2440 0070 1846     		mov	r0, r3
 2441 0072 0837     		adds	r7, r7, #8
 2442              	.LCFI99:
 2443              		.cfi_def_cfa_offset 8
 2444 0074 BD46     		mov	sp, r7
 2445              	.LCFI100:
 2446              		.cfi_def_cfa_register 13
 2447              		@ sp needed
 2448 0076 80BD     		pop	{r7, pc}
 2449              		.cfi_endproc
 2450              	.LFE142:
 2452              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2453              		.align	1
 2454              		.global	HAL_UART_Abort_IT
 2455              		.syntax unified
 2456              		.thumb
 2457              		.thumb_func
 2458              		.fpu fpv4-sp-d16
 2460              	HAL_UART_Abort_IT:
 2461              	.LFB143:
1263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2462              		.loc 1 1279 0
 2463              		.cfi_startproc
ARM GAS  /tmp/ccLJIDLw.s 			page 66


 2464              		@ args = 0, pretend = 0, frame = 16
 2465              		@ frame_needed = 1, uses_anonymous_args = 0
 2466 0000 80B5     		push	{r7, lr}
 2467              	.LCFI101:
 2468              		.cfi_def_cfa_offset 8
 2469              		.cfi_offset 7, -8
 2470              		.cfi_offset 14, -4
 2471 0002 84B0     		sub	sp, sp, #16
 2472              	.LCFI102:
 2473              		.cfi_def_cfa_offset 24
 2474 0004 00AF     		add	r7, sp, #0
 2475              	.LCFI103:
 2476              		.cfi_def_cfa_register 7
 2477 0006 7860     		str	r0, [r7, #4]
1280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t AbortCplt = 0x01U;
 2478              		.loc 1 1280 0
 2479 0008 0123     		movs	r3, #1
 2480 000a FB60     		str	r3, [r7, #12]
1281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2481              		.loc 1 1283 0
 2482 000c 7B68     		ldr	r3, [r7, #4]
 2483 000e 1B68     		ldr	r3, [r3]
 2484 0010 7A68     		ldr	r2, [r7, #4]
 2485 0012 1268     		ldr	r2, [r2]
 2486 0014 D268     		ldr	r2, [r2, #12]
 2487 0016 22F4F072 		bic	r2, r2, #480
 2488 001a DA60     		str	r2, [r3, #12]
1284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2489              		.loc 1 1284 0
 2490 001c 7B68     		ldr	r3, [r7, #4]
 2491 001e 1B68     		ldr	r3, [r3]
 2492 0020 7A68     		ldr	r2, [r7, #4]
 2493 0022 1268     		ldr	r2, [r2]
 2494 0024 5269     		ldr	r2, [r2, #20]
 2495 0026 22F00102 		bic	r2, r2, #1
 2496 002a 5A61     		str	r2, [r3, #20]
1285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      before any call to DMA Abort functions */
1288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 2497              		.loc 1 1289 0
 2498 002c 7B68     		ldr	r3, [r7, #4]
 2499 002e 1B6B     		ldr	r3, [r3, #48]
 2500 0030 002B     		cmp	r3, #0
 2501 0032 0FD0     		beq	.L105
1290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
1293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2502              		.loc 1 1293 0
 2503 0034 7B68     		ldr	r3, [r7, #4]
 2504 0036 1B68     		ldr	r3, [r3]
 2505 0038 5B69     		ldr	r3, [r3, #20]
 2506 003a 03F08003 		and	r3, r3, #128
ARM GAS  /tmp/ccLJIDLw.s 			page 67


 2507 003e 002B     		cmp	r3, #0
 2508 0040 04D0     		beq	.L106
1294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 2509              		.loc 1 1295 0
 2510 0042 7B68     		ldr	r3, [r7, #4]
 2511 0044 1B6B     		ldr	r3, [r3, #48]
 2512 0046 3E4A     		ldr	r2, .L115
 2513 0048 1A65     		str	r2, [r3, #80]
 2514 004a 03E0     		b	.L105
 2515              	.L106:
1296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2516              		.loc 1 1299 0
 2517 004c 7B68     		ldr	r3, [r7, #4]
 2518 004e 1B6B     		ldr	r3, [r3, #48]
 2519 0050 0022     		movs	r2, #0
 2520 0052 1A65     		str	r2, [r3, #80]
 2521              	.L105:
1300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 2522              		.loc 1 1303 0
 2523 0054 7B68     		ldr	r3, [r7, #4]
 2524 0056 5B6B     		ldr	r3, [r3, #52]
 2525 0058 002B     		cmp	r3, #0
 2526 005a 0FD0     		beq	.L107
1304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        Otherwise, set it to NULL */
1307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2527              		.loc 1 1307 0
 2528 005c 7B68     		ldr	r3, [r7, #4]
 2529 005e 1B68     		ldr	r3, [r3]
 2530 0060 5B69     		ldr	r3, [r3, #20]
 2531 0062 03F04003 		and	r3, r3, #64
 2532 0066 002B     		cmp	r3, #0
 2533 0068 04D0     		beq	.L108
1308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 2534              		.loc 1 1309 0
 2535 006a 7B68     		ldr	r3, [r7, #4]
 2536 006c 5B6B     		ldr	r3, [r3, #52]
 2537 006e 354A     		ldr	r2, .L115+4
 2538 0070 1A65     		str	r2, [r3, #80]
 2539 0072 03E0     		b	.L107
 2540              	.L108:
1310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2541              		.loc 1 1313 0
 2542 0074 7B68     		ldr	r3, [r7, #4]
 2543 0076 5B6B     		ldr	r3, [r3, #52]
ARM GAS  /tmp/ccLJIDLw.s 			page 68


 2544 0078 0022     		movs	r2, #0
 2545 007a 1A65     		str	r2, [r3, #80]
 2546              	.L107:
1314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2547              		.loc 1 1318 0
 2548 007c 7B68     		ldr	r3, [r7, #4]
 2549 007e 1B68     		ldr	r3, [r3]
 2550 0080 5B69     		ldr	r3, [r3, #20]
 2551 0082 03F08003 		and	r3, r3, #128
 2552 0086 002B     		cmp	r3, #0
 2553 0088 1AD0     		beq	.L109
1319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2554              		.loc 1 1321 0
 2555 008a 7B68     		ldr	r3, [r7, #4]
 2556 008c 1B68     		ldr	r3, [r3]
 2557 008e 7A68     		ldr	r2, [r7, #4]
 2558 0090 1268     		ldr	r2, [r2]
 2559 0092 5269     		ldr	r2, [r2, #20]
 2560 0094 22F08002 		bic	r2, r2, #128
 2561 0098 5A61     		str	r2, [r3, #20]
1322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2562              		.loc 1 1324 0
 2563 009a 7B68     		ldr	r3, [r7, #4]
 2564 009c 1B6B     		ldr	r3, [r3, #48]
 2565 009e 002B     		cmp	r3, #0
 2566 00a0 0ED0     		beq	.L109
1325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised : 
1327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
1330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2567              		.loc 1 1330 0
 2568 00a2 7B68     		ldr	r3, [r7, #4]
 2569 00a4 1B6B     		ldr	r3, [r3, #48]
 2570 00a6 1846     		mov	r0, r3
 2571 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2572 00ac 0346     		mov	r3, r0
 2573 00ae 002B     		cmp	r3, #0
 2574 00b0 04D0     		beq	.L110
1331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 2575              		.loc 1 1332 0
 2576 00b2 7B68     		ldr	r3, [r7, #4]
 2577 00b4 1B6B     		ldr	r3, [r3, #48]
 2578 00b6 0022     		movs	r2, #0
 2579 00b8 1A65     		str	r2, [r3, #80]
 2580 00ba 01E0     		b	.L109
 2581              	.L110:
ARM GAS  /tmp/ccLJIDLw.s 			page 69


1333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 2582              		.loc 1 1336 0
 2583 00bc 0023     		movs	r3, #0
 2584 00be FB60     		str	r3, [r7, #12]
 2585              	.L109:
1337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2586              		.loc 1 1342 0
 2587 00c0 7B68     		ldr	r3, [r7, #4]
 2588 00c2 1B68     		ldr	r3, [r3]
 2589 00c4 5B69     		ldr	r3, [r3, #20]
 2590 00c6 03F04003 		and	r3, r3, #64
 2591 00ca 002B     		cmp	r3, #0
 2592 00cc 1CD0     		beq	.L111
1343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2593              		.loc 1 1344 0
 2594 00ce 7B68     		ldr	r3, [r7, #4]
 2595 00d0 1B68     		ldr	r3, [r3]
 2596 00d2 7A68     		ldr	r2, [r7, #4]
 2597 00d4 1268     		ldr	r2, [r2]
 2598 00d6 5269     		ldr	r2, [r2, #20]
 2599 00d8 22F04002 		bic	r2, r2, #64
 2600 00dc 5A61     		str	r2, [r3, #20]
1345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2601              		.loc 1 1347 0
 2602 00de 7B68     		ldr	r3, [r7, #4]
 2603 00e0 5B6B     		ldr	r3, [r3, #52]
 2604 00e2 002B     		cmp	r3, #0
 2605 00e4 10D0     		beq	.L111
1348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised : 
1350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
1353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2606              		.loc 1 1353 0
 2607 00e6 7B68     		ldr	r3, [r7, #4]
 2608 00e8 5B6B     		ldr	r3, [r3, #52]
 2609 00ea 1846     		mov	r0, r3
 2610 00ec FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2611 00f0 0346     		mov	r3, r0
 2612 00f2 002B     		cmp	r3, #0
 2613 00f4 06D0     		beq	.L112
1354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 2614              		.loc 1 1355 0
 2615 00f6 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLJIDLw.s 			page 70


 2616 00f8 5B6B     		ldr	r3, [r3, #52]
 2617 00fa 0022     		movs	r2, #0
 2618 00fc 1A65     		str	r2, [r3, #80]
1356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x01U;
 2619              		.loc 1 1356 0
 2620 00fe 0123     		movs	r3, #1
 2621 0100 FB60     		str	r3, [r7, #12]
 2622 0102 01E0     		b	.L111
 2623              	.L112:
1357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         AbortCplt = 0x00U;
 2624              		.loc 1 1360 0
 2625 0104 0023     		movs	r3, #0
 2626 0106 FB60     		str	r3, [r7, #12]
 2627              	.L111:
1361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(AbortCplt == 0x01U)
 2628              		.loc 1 1366 0
 2629 0108 FB68     		ldr	r3, [r7, #12]
 2630 010a 012B     		cmp	r3, #1
 2631 010c 13D1     		bne	.L113
1367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U; 
 2632              		.loc 1 1369 0
 2633 010e 7B68     		ldr	r3, [r7, #4]
 2634 0110 0022     		movs	r2, #0
 2635 0112 DA84     		strh	r2, [r3, #38]	@ movhi
1370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U;
 2636              		.loc 1 1370 0
 2637 0114 7B68     		ldr	r3, [r7, #4]
 2638 0116 0022     		movs	r2, #0
 2639 0118 DA85     		strh	r2, [r3, #46]	@ movhi
1371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset ErrorCode */
1373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2640              		.loc 1 1373 0
 2641 011a 7B68     		ldr	r3, [r7, #4]
 2642 011c 0022     		movs	r2, #0
 2643 011e DA63     		str	r2, [r3, #60]
1374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 2644              		.loc 1 1376 0
 2645 0120 7B68     		ldr	r3, [r7, #4]
 2646 0122 2022     		movs	r2, #32
 2647 0124 83F83920 		strb	r2, [r3, #57]
1377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2648              		.loc 1 1377 0
 2649 0128 7B68     		ldr	r3, [r7, #4]
 2650 012a 2022     		movs	r2, #32
ARM GAS  /tmp/ccLJIDLw.s 			page 71


 2651 012c 83F83A20 		strb	r2, [r3, #58]
1378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 2652              		.loc 1 1380 0
 2653 0130 7868     		ldr	r0, [r7, #4]
 2654 0132 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2655              	.L113:
1381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2656              		.loc 1 1383 0
 2657 0136 0023     		movs	r3, #0
1384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2658              		.loc 1 1384 0
 2659 0138 1846     		mov	r0, r3
 2660 013a 1037     		adds	r7, r7, #16
 2661              	.LCFI104:
 2662              		.cfi_def_cfa_offset 8
 2663 013c BD46     		mov	sp, r7
 2664              	.LCFI105:
 2665              		.cfi_def_cfa_register 13
 2666              		@ sp needed
 2667 013e 80BD     		pop	{r7, pc}
 2668              	.L116:
 2669              		.align	2
 2670              	.L115:
 2671 0140 00000000 		.word	UART_DMATxAbortCallback
 2672 0144 00000000 		.word	UART_DMARxAbortCallback
 2673              		.cfi_endproc
 2674              	.LFE143:
 2676              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2677              		.align	1
 2678              		.global	HAL_UART_AbortTransmit_IT
 2679              		.syntax unified
 2680              		.thumb
 2681              		.thumb_func
 2682              		.fpu fpv4-sp-d16
 2684              	HAL_UART_AbortTransmit_IT:
 2685              	.LFB144:
1385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
ARM GAS  /tmp/ccLJIDLw.s 			page 72


 2686              		.loc 1 1401 0
 2687              		.cfi_startproc
 2688              		@ args = 0, pretend = 0, frame = 8
 2689              		@ frame_needed = 1, uses_anonymous_args = 0
 2690 0000 80B5     		push	{r7, lr}
 2691              	.LCFI106:
 2692              		.cfi_def_cfa_offset 8
 2693              		.cfi_offset 7, -8
 2694              		.cfi_offset 14, -4
 2695 0002 82B0     		sub	sp, sp, #8
 2696              	.LCFI107:
 2697              		.cfi_def_cfa_offset 16
 2698 0004 00AF     		add	r7, sp, #0
 2699              	.LCFI108:
 2700              		.cfi_def_cfa_register 7
 2701 0006 7860     		str	r0, [r7, #4]
1402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2702              		.loc 1 1403 0
 2703 0008 7B68     		ldr	r3, [r7, #4]
 2704 000a 1B68     		ldr	r3, [r3]
 2705 000c 7A68     		ldr	r2, [r7, #4]
 2706 000e 1268     		ldr	r2, [r2]
 2707 0010 D268     		ldr	r2, [r2, #12]
 2708 0012 22F0C002 		bic	r2, r2, #192
 2709 0016 DA60     		str	r2, [r3, #12]
1404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2710              		.loc 1 1406 0
 2711 0018 7B68     		ldr	r3, [r7, #4]
 2712 001a 1B68     		ldr	r3, [r3]
 2713 001c 5B69     		ldr	r3, [r3, #20]
 2714 001e 03F08003 		and	r3, r3, #128
 2715 0022 002B     		cmp	r3, #0
 2716 0024 2AD0     		beq	.L118
1407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2717              		.loc 1 1408 0
 2718 0026 7B68     		ldr	r3, [r7, #4]
 2719 0028 1B68     		ldr	r3, [r3]
 2720 002a 7A68     		ldr	r2, [r7, #4]
 2721 002c 1268     		ldr	r2, [r2]
 2722 002e 5269     		ldr	r2, [r2, #20]
 2723 0030 22F08002 		bic	r2, r2, #128
 2724 0034 5A61     		str	r2, [r3, #20]
1409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2725              		.loc 1 1411 0
 2726 0036 7B68     		ldr	r3, [r7, #4]
 2727 0038 1B6B     		ldr	r3, [r3, #48]
 2728 003a 002B     		cmp	r3, #0
 2729 003c 13D0     		beq	.L119
1412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
ARM GAS  /tmp/ccLJIDLw.s 			page 73


1415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 2730              		.loc 1 1415 0
 2731 003e 7B68     		ldr	r3, [r7, #4]
 2732 0040 1B6B     		ldr	r3, [r3, #48]
 2733 0042 164A     		ldr	r2, .L124
 2734 0044 1A65     		str	r2, [r3, #80]
1416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA TX */
1418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2735              		.loc 1 1418 0
 2736 0046 7B68     		ldr	r3, [r7, #4]
 2737 0048 1B6B     		ldr	r3, [r3, #48]
 2738 004a 1846     		mov	r0, r3
 2739 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2740 0050 0346     		mov	r3, r0
 2741 0052 002B     		cmp	r3, #0
 2742 0054 1CD0     		beq	.L122
1419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 2743              		.loc 1 1421 0
 2744 0056 7B68     		ldr	r3, [r7, #4]
 2745 0058 1B6B     		ldr	r3, [r3, #48]
 2746 005a 1B6D     		ldr	r3, [r3, #80]
 2747 005c 7A68     		ldr	r2, [r7, #4]
 2748 005e 126B     		ldr	r2, [r2, #48]
 2749 0060 1046     		mov	r0, r2
 2750 0062 9847     		blx	r3
 2751              	.LVL0:
 2752 0064 14E0     		b	.L122
 2753              	.L119:
1422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
1425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {      
1426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Tx transfer counter */
1427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->TxXferCount = 0x00U;
 2754              		.loc 1 1427 0
 2755 0066 7B68     		ldr	r3, [r7, #4]
 2756 0068 0022     		movs	r2, #0
 2757 006a DA84     		strh	r2, [r3, #38]	@ movhi
1428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 2758              		.loc 1 1430 0
 2759 006c 7B68     		ldr	r3, [r7, #4]
 2760 006e 2022     		movs	r2, #32
 2761 0070 83F83920 		strb	r2, [r3, #57]
1431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 2762              		.loc 1 1433 0
 2763 0074 7868     		ldr	r0, [r7, #4]
 2764 0076 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2765 007a 09E0     		b	.L122
 2766              	.L118:
1434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
ARM GAS  /tmp/ccLJIDLw.s 			page 74


1435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Tx transfer counter */
1439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0x00U;
 2767              		.loc 1 1439 0
 2768 007c 7B68     		ldr	r3, [r7, #4]
 2769 007e 0022     		movs	r2, #0
 2770 0080 DA84     		strh	r2, [r3, #38]	@ movhi
1440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 2771              		.loc 1 1442 0
 2772 0082 7B68     		ldr	r3, [r7, #4]
 2773 0084 2022     		movs	r2, #32
 2774 0086 83F83920 		strb	r2, [r3, #57]
1443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 2775              		.loc 1 1445 0
 2776 008a 7868     		ldr	r0, [r7, #4]
 2777 008c FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2778              	.L122:
1446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2779              		.loc 1 1448 0
 2780 0090 0023     		movs	r3, #0
1449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2781              		.loc 1 1449 0
 2782 0092 1846     		mov	r0, r3
 2783 0094 0837     		adds	r7, r7, #8
 2784              	.LCFI109:
 2785              		.cfi_def_cfa_offset 8
 2786 0096 BD46     		mov	sp, r7
 2787              	.LCFI110:
 2788              		.cfi_def_cfa_register 13
 2789              		@ sp needed
 2790 0098 80BD     		pop	{r7, pc}
 2791              	.L125:
 2792 009a 00BF     		.align	2
 2793              	.L124:
 2794 009c 00000000 		.word	UART_DMATxOnlyAbortCallback
 2795              		.cfi_endproc
 2796              	.LFE144:
 2798              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2799              		.align	1
 2800              		.global	HAL_UART_AbortReceive_IT
 2801              		.syntax unified
 2802              		.thumb
 2803              		.thumb_func
 2804              		.fpu fpv4-sp-d16
 2806              	HAL_UART_AbortReceive_IT:
 2807              	.LFB145:
1450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
ARM GAS  /tmp/ccLJIDLw.s 			page 75


1453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         This procedure performs following operations :
1456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable PPP Interrupts
1457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - Set handle State to READY
1460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** */
1465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2808              		.loc 1 1466 0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 8
 2811              		@ frame_needed = 1, uses_anonymous_args = 0
 2812 0000 80B5     		push	{r7, lr}
 2813              	.LCFI111:
 2814              		.cfi_def_cfa_offset 8
 2815              		.cfi_offset 7, -8
 2816              		.cfi_offset 14, -4
 2817 0002 82B0     		sub	sp, sp, #8
 2818              	.LCFI112:
 2819              		.cfi_def_cfa_offset 16
 2820 0004 00AF     		add	r7, sp, #0
 2821              	.LCFI113:
 2822              		.cfi_def_cfa_register 7
 2823 0006 7860     		str	r0, [r7, #4]
1467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2824              		.loc 1 1468 0
 2825 0008 7B68     		ldr	r3, [r7, #4]
 2826 000a 1B68     		ldr	r3, [r3]
 2827 000c 7A68     		ldr	r2, [r7, #4]
 2828 000e 1268     		ldr	r2, [r2]
 2829 0010 D268     		ldr	r2, [r2, #12]
 2830 0012 22F49072 		bic	r2, r2, #288
 2831 0016 DA60     		str	r2, [r3, #12]
1469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2832              		.loc 1 1469 0
 2833 0018 7B68     		ldr	r3, [r7, #4]
 2834 001a 1B68     		ldr	r3, [r3]
 2835 001c 7A68     		ldr	r2, [r7, #4]
 2836 001e 1268     		ldr	r2, [r2]
 2837 0020 5269     		ldr	r2, [r2, #20]
 2838 0022 22F00102 		bic	r2, r2, #1
 2839 0026 5A61     		str	r2, [r3, #20]
1470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2840              		.loc 1 1472 0
 2841 0028 7B68     		ldr	r3, [r7, #4]
 2842 002a 1B68     		ldr	r3, [r3]
 2843 002c 5B69     		ldr	r3, [r3, #20]
 2844 002e 03F04003 		and	r3, r3, #64
ARM GAS  /tmp/ccLJIDLw.s 			page 76


 2845 0032 002B     		cmp	r3, #0
 2846 0034 2AD0     		beq	.L127
1473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2847              		.loc 1 1474 0
 2848 0036 7B68     		ldr	r3, [r7, #4]
 2849 0038 1B68     		ldr	r3, [r3]
 2850 003a 7A68     		ldr	r2, [r7, #4]
 2851 003c 1268     		ldr	r2, [r2]
 2852 003e 5269     		ldr	r2, [r2, #20]
 2853 0040 22F04002 		bic	r2, r2, #64
 2854 0044 5A61     		str	r2, [r3, #20]
1475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2855              		.loc 1 1477 0
 2856 0046 7B68     		ldr	r3, [r7, #4]
 2857 0048 5B6B     		ldr	r3, [r3, #52]
 2858 004a 002B     		cmp	r3, #0
 2859 004c 13D0     		beq	.L128
1478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 2860              		.loc 1 1481 0
 2861 004e 7B68     		ldr	r3, [r7, #4]
 2862 0050 5B6B     		ldr	r3, [r3, #52]
 2863 0052 164A     		ldr	r2, .L133
 2864 0054 1A65     		str	r2, [r3, #80]
1482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Abort DMA RX */
1484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2865              		.loc 1 1484 0
 2866 0056 7B68     		ldr	r3, [r7, #4]
 2867 0058 5B6B     		ldr	r3, [r3, #52]
 2868 005a 1846     		mov	r0, r3
 2869 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2870 0060 0346     		mov	r3, r0
 2871 0062 002B     		cmp	r3, #0
 2872 0064 1CD0     		beq	.L131
1485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 2873              		.loc 1 1487 0
 2874 0066 7B68     		ldr	r3, [r7, #4]
 2875 0068 5B6B     		ldr	r3, [r3, #52]
 2876 006a 1B6D     		ldr	r3, [r3, #80]
 2877 006c 7A68     		ldr	r2, [r7, #4]
 2878 006e 526B     		ldr	r2, [r2, #52]
 2879 0070 1046     		mov	r0, r2
 2880 0072 9847     		blx	r3
 2881              	.LVL1:
 2882 0074 14E0     		b	.L131
 2883              	.L128:
1488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
ARM GAS  /tmp/ccLJIDLw.s 			page 77


1491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Reset Rx transfer counter */
1493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxXferCount = 0x00U; 
 2884              		.loc 1 1493 0
 2885 0076 7B68     		ldr	r3, [r7, #4]
 2886 0078 0022     		movs	r2, #0
 2887 007a DA85     		strh	r2, [r3, #46]	@ movhi
1494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 2888              		.loc 1 1496 0
 2889 007c 7B68     		ldr	r3, [r7, #4]
 2890 007e 2022     		movs	r2, #32
 2891 0080 83F83A20 		strb	r2, [r3, #58]
1497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 2892              		.loc 1 1499 0
 2893 0084 7868     		ldr	r0, [r7, #4]
 2894 0086 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2895 008a 09E0     		b	.L131
 2896              	.L127:
1500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
1503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Reset Rx transfer counter */
1505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0x00U; 
 2897              		.loc 1 1505 0
 2898 008c 7B68     		ldr	r3, [r7, #4]
 2899 008e 0022     		movs	r2, #0
 2900 0090 DA85     		strh	r2, [r3, #46]	@ movhi
1506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
1508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2901              		.loc 1 1508 0
 2902 0092 7B68     		ldr	r3, [r7, #4]
 2903 0094 2022     		movs	r2, #32
 2904 0096 83F83A20 		strb	r2, [r3, #58]
1509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 2905              		.loc 1 1511 0
 2906 009a 7868     		ldr	r0, [r7, #4]
 2907 009c FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2908              	.L131:
1512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 2909              		.loc 1 1514 0
 2910 00a0 0023     		movs	r3, #0
1515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 2911              		.loc 1 1515 0
 2912 00a2 1846     		mov	r0, r3
 2913 00a4 0837     		adds	r7, r7, #8
 2914              	.LCFI114:
 2915              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccLJIDLw.s 			page 78


 2916 00a6 BD46     		mov	sp, r7
 2917              	.LCFI115:
 2918              		.cfi_def_cfa_register 13
 2919              		@ sp needed
 2920 00a8 80BD     		pop	{r7, pc}
 2921              	.L134:
 2922 00aa 00BF     		.align	2
 2923              	.L133:
 2924 00ac 00000000 		.word	UART_DMARxOnlyAbortCallback
 2925              		.cfi_endproc
 2926              	.LFE145:
 2928              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2929              		.align	1
 2930              		.global	HAL_UART_IRQHandler
 2931              		.syntax unified
 2932              		.thumb
 2933              		.thumb_func
 2934              		.fpu fpv4-sp-d16
 2936              	HAL_UART_IRQHandler:
 2937              	.LFB146:
1516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART interrupt request.
1519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1523:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
1524:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 2938              		.loc 1 1524 0
 2939              		.cfi_startproc
 2940              		@ args = 0, pretend = 0, frame = 32
 2941              		@ frame_needed = 1, uses_anonymous_args = 0
 2942 0000 80B5     		push	{r7, lr}
 2943              	.LCFI116:
 2944              		.cfi_def_cfa_offset 8
 2945              		.cfi_offset 7, -8
 2946              		.cfi_offset 14, -4
 2947 0002 88B0     		sub	sp, sp, #32
 2948              	.LCFI117:
 2949              		.cfi_def_cfa_offset 40
 2950 0004 00AF     		add	r7, sp, #0
 2951              	.LCFI118:
 2952              		.cfi_def_cfa_register 7
 2953 0006 7860     		str	r0, [r7, #4]
1525:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t isrflags   = READ_REG(huart->Instance->SR);
 2954              		.loc 1 1525 0
 2955 0008 7B68     		ldr	r3, [r7, #4]
 2956 000a 1B68     		ldr	r3, [r3]
 2957 000c 1B68     		ldr	r3, [r3]
 2958 000e FB61     		str	r3, [r7, #28]
1526:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2959              		.loc 1 1526 0
 2960 0010 7B68     		ldr	r3, [r7, #4]
 2961 0012 1B68     		ldr	r3, [r3]
 2962 0014 DB68     		ldr	r3, [r3, #12]
 2963 0016 BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccLJIDLw.s 			page 79


1527:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2964              		.loc 1 1527 0
 2965 0018 7B68     		ldr	r3, [r7, #4]
 2966 001a 1B68     		ldr	r3, [r3]
 2967 001c 5B69     		ldr	r3, [r3, #20]
 2968 001e 7B61     		str	r3, [r7, #20]
1528:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t errorflags = 0x00U;
 2969              		.loc 1 1528 0
 2970 0020 0023     		movs	r3, #0
 2971 0022 3B61     		str	r3, [r7, #16]
1529:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    uint32_t dmarequest = 0x00U;
 2972              		.loc 1 1529 0
 2973 0024 0023     		movs	r3, #0
 2974 0026 FB60     		str	r3, [r7, #12]
1530:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1531:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If no error occurs */
1532:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 2975              		.loc 1 1532 0
 2976 0028 FB69     		ldr	r3, [r7, #28]
 2977 002a 03F00F03 		and	r3, r3, #15
 2978 002e 3B61     		str	r3, [r7, #16]
1533:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(errorflags == RESET)
 2979              		.loc 1 1533 0
 2980 0030 3B69     		ldr	r3, [r7, #16]
 2981 0032 002B     		cmp	r3, #0
 2982 0034 0DD1     		bne	.L136
1534:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1535:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART in mode Receiver -------------------------------------------------*/
1536:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 2983              		.loc 1 1536 0
 2984 0036 FB69     		ldr	r3, [r7, #28]
 2985 0038 03F02003 		and	r3, r3, #32
 2986 003c 002B     		cmp	r3, #0
 2987 003e 08D0     		beq	.L136
 2988              		.loc 1 1536 0 is_stmt 0 discriminator 1
 2989 0040 BB69     		ldr	r3, [r7, #24]
 2990 0042 03F02003 		and	r3, r3, #32
 2991 0046 002B     		cmp	r3, #0
 2992 0048 03D0     		beq	.L136
1537:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1538:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       UART_Receive_IT(huart);
 2993              		.loc 1 1538 0 is_stmt 1
 2994 004a 7868     		ldr	r0, [r7, #4]
 2995 004c FFF7FEFF 		bl	UART_Receive_IT
1539:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
 2996              		.loc 1 1539 0
 2997 0050 CCE0     		b	.L135
 2998              	.L136:
1540:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1541:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }  
1542:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1543:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* If some errors occur */
1544:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
 2999              		.loc 1 1544 0
 3000 0052 3B69     		ldr	r3, [r7, #16]
 3001 0054 002B     		cmp	r3, #0
 3002 0056 00F0AB80 		beq	.L138
ARM GAS  /tmp/ccLJIDLw.s 			page 80


 3003              		.loc 1 1544 0 is_stmt 0 discriminator 1
 3004 005a 7B69     		ldr	r3, [r7, #20]
 3005 005c 03F00103 		and	r3, r3, #1
 3006 0060 002B     		cmp	r3, #0
 3007 0062 05D1     		bne	.L139
 3008              		.loc 1 1544 0 discriminator 2
 3009 0064 BB69     		ldr	r3, [r7, #24]
 3010 0066 03F49073 		and	r3, r3, #288
 3011 006a 002B     		cmp	r3, #0
 3012 006c 00F0A080 		beq	.L138
 3013              	.L139:
1545:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1546:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART parity error interrupt occurred ----------------------------------*/
1547:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3014              		.loc 1 1547 0 is_stmt 1
 3015 0070 FB69     		ldr	r3, [r7, #28]
 3016 0072 03F00103 		and	r3, r3, #1
 3017 0076 002B     		cmp	r3, #0
 3018 0078 0AD0     		beq	.L140
 3019              		.loc 1 1547 0 is_stmt 0 discriminator 1
 3020 007a BB69     		ldr	r3, [r7, #24]
 3021 007c 03F48073 		and	r3, r3, #256
 3022 0080 002B     		cmp	r3, #0
 3023 0082 05D0     		beq	.L140
1548:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1549:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3024              		.loc 1 1549 0 is_stmt 1
 3025 0084 7B68     		ldr	r3, [r7, #4]
 3026 0086 DB6B     		ldr	r3, [r3, #60]
 3027 0088 43F00102 		orr	r2, r3, #1
 3028 008c 7B68     		ldr	r3, [r7, #4]
 3029 008e DA63     		str	r2, [r3, #60]
 3030              	.L140:
1550:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1551:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1552:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART noise error interrupt occurred -----------------------------------*/
1553:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3031              		.loc 1 1553 0
 3032 0090 FB69     		ldr	r3, [r7, #28]
 3033 0092 03F00403 		and	r3, r3, #4
 3034 0096 002B     		cmp	r3, #0
 3035 0098 0AD0     		beq	.L141
 3036              		.loc 1 1553 0 is_stmt 0 discriminator 1
 3037 009a 7B69     		ldr	r3, [r7, #20]
 3038 009c 03F00103 		and	r3, r3, #1
 3039 00a0 002B     		cmp	r3, #0
 3040 00a2 05D0     		beq	.L141
1554:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1555:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3041              		.loc 1 1555 0 is_stmt 1
 3042 00a4 7B68     		ldr	r3, [r7, #4]
 3043 00a6 DB6B     		ldr	r3, [r3, #60]
 3044 00a8 43F00202 		orr	r2, r3, #2
 3045 00ac 7B68     		ldr	r3, [r7, #4]
 3046 00ae DA63     		str	r2, [r3, #60]
 3047              	.L141:
1556:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
ARM GAS  /tmp/ccLJIDLw.s 			page 81


1557:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1558:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART frame error interrupt occurred -----------------------------------*/
1559:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3048              		.loc 1 1559 0
 3049 00b0 FB69     		ldr	r3, [r7, #28]
 3050 00b2 03F00203 		and	r3, r3, #2
 3051 00b6 002B     		cmp	r3, #0
 3052 00b8 0AD0     		beq	.L142
 3053              		.loc 1 1559 0 is_stmt 0 discriminator 1
 3054 00ba 7B69     		ldr	r3, [r7, #20]
 3055 00bc 03F00103 		and	r3, r3, #1
 3056 00c0 002B     		cmp	r3, #0
 3057 00c2 05D0     		beq	.L142
1560:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1561:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3058              		.loc 1 1561 0 is_stmt 1
 3059 00c4 7B68     		ldr	r3, [r7, #4]
 3060 00c6 DB6B     		ldr	r3, [r3, #60]
 3061 00c8 43F00402 		orr	r2, r3, #4
 3062 00cc 7B68     		ldr	r3, [r7, #4]
 3063 00ce DA63     		str	r2, [r3, #60]
 3064              	.L142:
1562:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1563:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1564:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* UART Over-Run interrupt occurred --------------------------------------*/
1565:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3065              		.loc 1 1565 0
 3066 00d0 FB69     		ldr	r3, [r7, #28]
 3067 00d2 03F00803 		and	r3, r3, #8
 3068 00d6 002B     		cmp	r3, #0
 3069 00d8 0AD0     		beq	.L143
 3070              		.loc 1 1565 0 is_stmt 0 discriminator 1
 3071 00da 7B69     		ldr	r3, [r7, #20]
 3072 00dc 03F00103 		and	r3, r3, #1
 3073 00e0 002B     		cmp	r3, #0
 3074 00e2 05D0     		beq	.L143
1566:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     { 
1567:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3075              		.loc 1 1567 0 is_stmt 1
 3076 00e4 7B68     		ldr	r3, [r7, #4]
 3077 00e6 DB6B     		ldr	r3, [r3, #60]
 3078 00e8 43F00802 		orr	r2, r3, #8
 3079 00ec 7B68     		ldr	r3, [r7, #4]
 3080 00ee DA63     		str	r2, [r3, #60]
 3081              	.L143:
1568:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1569:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1570:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/    
1571:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 3082              		.loc 1 1571 0
 3083 00f0 7B68     		ldr	r3, [r7, #4]
 3084 00f2 DB6B     		ldr	r3, [r3, #60]
 3085 00f4 002B     		cmp	r3, #0
 3086 00f6 78D0     		beq	.L154
1572:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
1573:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* UART in mode Receiver -----------------------------------------------*/
1574:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
ARM GAS  /tmp/ccLJIDLw.s 			page 82


 3087              		.loc 1 1574 0
 3088 00f8 FB69     		ldr	r3, [r7, #28]
 3089 00fa 03F02003 		and	r3, r3, #32
 3090 00fe 002B     		cmp	r3, #0
 3091 0100 07D0     		beq	.L145
 3092              		.loc 1 1574 0 is_stmt 0 discriminator 1
 3093 0102 BB69     		ldr	r3, [r7, #24]
 3094 0104 03F02003 		and	r3, r3, #32
 3095 0108 002B     		cmp	r3, #0
 3096 010a 02D0     		beq	.L145
1575:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1576:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_Receive_IT(huart);
 3097              		.loc 1 1576 0 is_stmt 1
 3098 010c 7868     		ldr	r0, [r7, #4]
 3099 010e FFF7FEFF 		bl	UART_Receive_IT
 3100              	.L145:
1577:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1578:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1579:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1580:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****          consider error as blocking */
1581:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 3101              		.loc 1 1581 0
 3102 0112 7B68     		ldr	r3, [r7, #4]
 3103 0114 1B68     		ldr	r3, [r3]
 3104 0116 5B69     		ldr	r3, [r3, #20]
 3105 0118 03F04003 		and	r3, r3, #64
 3106 011c 002B     		cmp	r3, #0
 3107 011e 14BF     		ite	ne
 3108 0120 0123     		movne	r3, #1
 3109 0122 0023     		moveq	r3, #0
 3110 0124 DBB2     		uxtb	r3, r3
 3111 0126 FB60     		str	r3, [r7, #12]
1582:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 3112              		.loc 1 1582 0
 3113 0128 7B68     		ldr	r3, [r7, #4]
 3114 012a DB6B     		ldr	r3, [r3, #60]
 3115 012c 03F00803 		and	r3, r3, #8
 3116 0130 002B     		cmp	r3, #0
 3117 0132 02D1     		bne	.L146
 3118              		.loc 1 1582 0 is_stmt 0 discriminator 1
 3119 0134 FB68     		ldr	r3, [r7, #12]
 3120 0136 002B     		cmp	r3, #0
 3121 0138 31D0     		beq	.L147
 3122              	.L146:
1583:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1584:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Blocking error : transfer is aborted
1585:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
1586:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1587:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3123              		.loc 1 1587 0 is_stmt 1
 3124 013a 7868     		ldr	r0, [r7, #4]
 3125 013c FFF7FEFF 		bl	UART_EndRxTransfer
1588:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
1589:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3126              		.loc 1 1590 0
 3127 0140 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLJIDLw.s 			page 83


 3128 0142 1B68     		ldr	r3, [r3]
 3129 0144 5B69     		ldr	r3, [r3, #20]
 3130 0146 03F04003 		and	r3, r3, #64
 3131 014a 002B     		cmp	r3, #0
 3132 014c 23D0     		beq	.L148
1591:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1592:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3133              		.loc 1 1592 0
 3134 014e 7B68     		ldr	r3, [r7, #4]
 3135 0150 1B68     		ldr	r3, [r3]
 3136 0152 7A68     		ldr	r2, [r7, #4]
 3137 0154 1268     		ldr	r2, [r2]
 3138 0156 5269     		ldr	r2, [r2, #20]
 3139 0158 22F04002 		bic	r2, r2, #64
 3140 015c 5A61     		str	r2, [r3, #20]
1593:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           
1594:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
1595:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           if(huart->hdmarx != NULL)
 3141              		.loc 1 1595 0
 3142 015e 7B68     		ldr	r3, [r7, #4]
 3143 0160 5B6B     		ldr	r3, [r3, #52]
 3144 0162 002B     		cmp	r3, #0
 3145 0164 13D0     		beq	.L149
1596:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1597:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Set the UART DMA Abort callback : 
1598:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
1599:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3146              		.loc 1 1599 0
 3147 0166 7B68     		ldr	r3, [r7, #4]
 3148 0168 5B6B     		ldr	r3, [r3, #52]
 3149 016a 224A     		ldr	r2, .L156
 3150 016c 1A65     		str	r2, [r3, #80]
1600:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3151              		.loc 1 1600 0
 3152 016e 7B68     		ldr	r3, [r7, #4]
 3153 0170 5B6B     		ldr	r3, [r3, #52]
 3154 0172 1846     		mov	r0, r3
 3155 0174 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3156 0178 0346     		mov	r3, r0
 3157 017a 002B     		cmp	r3, #0
 3158 017c 16D0     		beq	.L155
1601:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             {
1602:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               /* Call Directly XferAbortCallback function in case of error */
1603:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3159              		.loc 1 1603 0
 3160 017e 7B68     		ldr	r3, [r7, #4]
 3161 0180 5B6B     		ldr	r3, [r3, #52]
 3162 0182 1B6D     		ldr	r3, [r3, #80]
 3163 0184 7A68     		ldr	r2, [r7, #4]
 3164 0186 526B     		ldr	r2, [r2, #52]
 3165 0188 1046     		mov	r0, r2
 3166 018a 9847     		blx	r3
 3167              	.LVL2:
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3168              		.loc 1 1590 0
 3169 018c 0EE0     		b	.L155
 3170              	.L149:
ARM GAS  /tmp/ccLJIDLw.s 			page 84


1604:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             }
1605:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1606:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           else
1607:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           {
1608:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             /* Call user error callback */
1609:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3171              		.loc 1 1609 0
 3172 018e 7868     		ldr	r0, [r7, #4]
 3173 0190 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3174              		.loc 1 1590 0
 3175 0194 0AE0     		b	.L155
 3176              	.L148:
1610:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           }
1611:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1612:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         else
1613:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
1614:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           /* Call user error callback */
1615:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3177              		.loc 1 1615 0
 3178 0196 7868     		ldr	r0, [r7, #4]
 3179 0198 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3180              		.loc 1 1590 0
 3181 019c 06E0     		b	.L155
 3182              	.L147:
1616:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         }
1617:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1618:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
1619:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
1620:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Non Blocking error : transfer could go on. 
1621:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            Error is notified to user through user error callback */
1622:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3183              		.loc 1 1622 0
 3184 019e 7868     		ldr	r0, [r7, #4]
 3185 01a0 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1623:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3186              		.loc 1 1623 0
 3187 01a4 7B68     		ldr	r3, [r7, #4]
 3188 01a6 0022     		movs	r2, #0
 3189 01a8 DA63     		str	r2, [r3, #60]
1624:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
1625:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3190              		.loc 1 1626 0
 3191 01aa 1EE0     		b	.L154
 3192              	.L155:
1590:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         {
 3193              		.loc 1 1590 0
 3194 01ac 00BF     		nop
 3195              		.loc 1 1626 0
 3196 01ae 1CE0     		b	.L154
 3197              	.L138:
1627:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   } /* End if some error occurs */
1628:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1629:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1630:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
ARM GAS  /tmp/ccLJIDLw.s 			page 85


 3198              		.loc 1 1630 0
 3199 01b0 FB69     		ldr	r3, [r7, #28]
 3200 01b2 03F08003 		and	r3, r3, #128
 3201 01b6 002B     		cmp	r3, #0
 3202 01b8 08D0     		beq	.L153
 3203              		.loc 1 1630 0 is_stmt 0 discriminator 1
 3204 01ba BB69     		ldr	r3, [r7, #24]
 3205 01bc 03F08003 		and	r3, r3, #128
 3206 01c0 002B     		cmp	r3, #0
 3207 01c2 03D0     		beq	.L153
1631:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1632:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_Transmit_IT(huart);
 3208              		.loc 1 1632 0 is_stmt 1
 3209 01c4 7868     		ldr	r0, [r7, #4]
 3210 01c6 FFF7FEFF 		bl	UART_Transmit_IT
1633:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3211              		.loc 1 1633 0
 3212 01ca 0FE0     		b	.L135
 3213              	.L153:
1634:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1635:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1636:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* UART in mode Transmitter end --------------------------------------------*/
1637:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 3214              		.loc 1 1637 0
 3215 01cc FB69     		ldr	r3, [r7, #28]
 3216 01ce 03F04003 		and	r3, r3, #64
 3217 01d2 002B     		cmp	r3, #0
 3218 01d4 0AD0     		beq	.L135
 3219              		.loc 1 1637 0 is_stmt 0 discriminator 1
 3220 01d6 BB69     		ldr	r3, [r7, #24]
 3221 01d8 03F04003 		and	r3, r3, #64
 3222 01dc 002B     		cmp	r3, #0
 3223 01de 05D0     		beq	.L135
1638:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1639:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3224              		.loc 1 1639 0 is_stmt 1
 3225 01e0 7868     		ldr	r0, [r7, #4]
 3226 01e2 FFF7FEFF 		bl	UART_EndTransmit_IT
1640:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return;
 3227              		.loc 1 1640 0
 3228 01e6 00BF     		nop
 3229 01e8 00E0     		b	.L135
 3230              	.L154:
1626:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   } /* End if some error occurs */
 3231              		.loc 1 1626 0
 3232 01ea 00BF     		nop
 3233              	.L135:
1641:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
1642:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3234              		.loc 1 1642 0
 3235 01ec 2037     		adds	r7, r7, #32
 3236              	.LCFI119:
 3237              		.cfi_def_cfa_offset 8
 3238 01ee BD46     		mov	sp, r7
 3239              	.LCFI120:
 3240              		.cfi_def_cfa_register 13
 3241              		@ sp needed
ARM GAS  /tmp/ccLJIDLw.s 			page 86


 3242 01f0 80BD     		pop	{r7, pc}
 3243              	.L157:
 3244 01f2 00BF     		.align	2
 3245              	.L156:
 3246 01f4 00000000 		.word	UART_DMAAbortOnError
 3247              		.cfi_endproc
 3248              	.LFE146:
 3250              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3251              		.align	1
 3252              		.weak	HAL_UART_TxCpltCallback
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu fpv4-sp-d16
 3258              	HAL_UART_TxCpltCallback:
 3259              	.LFB147:
1643:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1644:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1645:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Transfer completed callbacks.
1646:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1647:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1648:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1649:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1650:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1651:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3260              		.loc 1 1651 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 8
 3263              		@ frame_needed = 1, uses_anonymous_args = 0
 3264              		@ link register save eliminated.
 3265 0000 80B4     		push	{r7}
 3266              	.LCFI121:
 3267              		.cfi_def_cfa_offset 4
 3268              		.cfi_offset 7, -4
 3269 0002 83B0     		sub	sp, sp, #12
 3270              	.LCFI122:
 3271              		.cfi_def_cfa_offset 16
 3272 0004 00AF     		add	r7, sp, #0
 3273              	.LCFI123:
 3274              		.cfi_def_cfa_register 7
 3275 0006 7860     		str	r0, [r7, #4]
1652:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1653:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1654:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1655:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1656:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1657:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3276              		.loc 1 1657 0
 3277 0008 00BF     		nop
 3278 000a 0C37     		adds	r7, r7, #12
 3279              	.LCFI124:
 3280              		.cfi_def_cfa_offset 4
 3281 000c BD46     		mov	sp, r7
 3282              	.LCFI125:
 3283              		.cfi_def_cfa_register 13
 3284              		@ sp needed
 3285 000e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccLJIDLw.s 			page 87


 3286              	.LCFI126:
 3287              		.cfi_restore 7
 3288              		.cfi_def_cfa_offset 0
 3289 0012 7047     		bx	lr
 3290              		.cfi_endproc
 3291              	.LFE147:
 3293              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 3294              		.align	1
 3295              		.weak	HAL_UART_TxHalfCpltCallback
 3296              		.syntax unified
 3297              		.thumb
 3298              		.thumb_func
 3299              		.fpu fpv4-sp-d16
 3301              	HAL_UART_TxHalfCpltCallback:
 3302              	.LFB148:
1658:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1659:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1660:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callbacks.
1661:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1662:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1663:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1664:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1665:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1666:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3303              		.loc 1 1666 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 8
 3306              		@ frame_needed = 1, uses_anonymous_args = 0
 3307              		@ link register save eliminated.
 3308 0000 80B4     		push	{r7}
 3309              	.LCFI127:
 3310              		.cfi_def_cfa_offset 4
 3311              		.cfi_offset 7, -4
 3312 0002 83B0     		sub	sp, sp, #12
 3313              	.LCFI128:
 3314              		.cfi_def_cfa_offset 16
 3315 0004 00AF     		add	r7, sp, #0
 3316              	.LCFI129:
 3317              		.cfi_def_cfa_register 7
 3318 0006 7860     		str	r0, [r7, #4]
1667:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1668:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1669:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1670:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1671:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1672:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3319              		.loc 1 1672 0
 3320 0008 00BF     		nop
 3321 000a 0C37     		adds	r7, r7, #12
 3322              	.LCFI130:
 3323              		.cfi_def_cfa_offset 4
 3324 000c BD46     		mov	sp, r7
 3325              	.LCFI131:
 3326              		.cfi_def_cfa_register 13
 3327              		@ sp needed
 3328 000e 5DF8047B 		ldr	r7, [sp], #4
 3329              	.LCFI132:
ARM GAS  /tmp/ccLJIDLw.s 			page 88


 3330              		.cfi_restore 7
 3331              		.cfi_def_cfa_offset 0
 3332 0012 7047     		bx	lr
 3333              		.cfi_endproc
 3334              	.LFE148:
 3336              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3337              		.align	1
 3338              		.weak	HAL_UART_RxCpltCallback
 3339              		.syntax unified
 3340              		.thumb
 3341              		.thumb_func
 3342              		.fpu fpv4-sp-d16
 3344              	HAL_UART_RxCpltCallback:
 3345              	.LFB149:
1673:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1674:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1675:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Transfer completed callbacks.
1676:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1677:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1678:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1679:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1680:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1681:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3346              		.loc 1 1681 0
 3347              		.cfi_startproc
 3348              		@ args = 0, pretend = 0, frame = 8
 3349              		@ frame_needed = 1, uses_anonymous_args = 0
 3350              		@ link register save eliminated.
 3351 0000 80B4     		push	{r7}
 3352              	.LCFI133:
 3353              		.cfi_def_cfa_offset 4
 3354              		.cfi_offset 7, -4
 3355 0002 83B0     		sub	sp, sp, #12
 3356              	.LCFI134:
 3357              		.cfi_def_cfa_offset 16
 3358 0004 00AF     		add	r7, sp, #0
 3359              	.LCFI135:
 3360              		.cfi_def_cfa_register 7
 3361 0006 7860     		str	r0, [r7, #4]
1682:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1683:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1684:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1685:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1686:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1687:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3362              		.loc 1 1687 0
 3363 0008 00BF     		nop
 3364 000a 0C37     		adds	r7, r7, #12
 3365              	.LCFI136:
 3366              		.cfi_def_cfa_offset 4
 3367 000c BD46     		mov	sp, r7
 3368              	.LCFI137:
 3369              		.cfi_def_cfa_register 13
 3370              		@ sp needed
 3371 000e 5DF8047B 		ldr	r7, [sp], #4
 3372              	.LCFI138:
 3373              		.cfi_restore 7
ARM GAS  /tmp/ccLJIDLw.s 			page 89


 3374              		.cfi_def_cfa_offset 0
 3375 0012 7047     		bx	lr
 3376              		.cfi_endproc
 3377              	.LFE149:
 3379              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 3380              		.align	1
 3381              		.weak	HAL_UART_RxHalfCpltCallback
 3382              		.syntax unified
 3383              		.thumb
 3384              		.thumb_func
 3385              		.fpu fpv4-sp-d16
 3387              	HAL_UART_RxHalfCpltCallback:
 3388              	.LFB150:
1688:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1689:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1690:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callbacks.
1691:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1692:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1693:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1694:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1695:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1696:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3389              		.loc 1 1696 0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 8
 3392              		@ frame_needed = 1, uses_anonymous_args = 0
 3393              		@ link register save eliminated.
 3394 0000 80B4     		push	{r7}
 3395              	.LCFI139:
 3396              		.cfi_def_cfa_offset 4
 3397              		.cfi_offset 7, -4
 3398 0002 83B0     		sub	sp, sp, #12
 3399              	.LCFI140:
 3400              		.cfi_def_cfa_offset 16
 3401 0004 00AF     		add	r7, sp, #0
 3402              	.LCFI141:
 3403              		.cfi_def_cfa_register 7
 3404 0006 7860     		str	r0, [r7, #4]
1697:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1698:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1699:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1700:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_TxCpltCallback could be implemented in the user file
1701:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1702:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3405              		.loc 1 1702 0
 3406 0008 00BF     		nop
 3407 000a 0C37     		adds	r7, r7, #12
 3408              	.LCFI142:
 3409              		.cfi_def_cfa_offset 4
 3410 000c BD46     		mov	sp, r7
 3411              	.LCFI143:
 3412              		.cfi_def_cfa_register 13
 3413              		@ sp needed
 3414 000e 5DF8047B 		ldr	r7, [sp], #4
 3415              	.LCFI144:
 3416              		.cfi_restore 7
 3417              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccLJIDLw.s 			page 90


 3418 0012 7047     		bx	lr
 3419              		.cfi_endproc
 3420              	.LFE150:
 3422              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 3423              		.align	1
 3424              		.weak	HAL_UART_ErrorCallback
 3425              		.syntax unified
 3426              		.thumb
 3427              		.thumb_func
 3428              		.fpu fpv4-sp-d16
 3430              	HAL_UART_ErrorCallback:
 3431              	.LFB151:
1703:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1704:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1705:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART error callbacks.
1706:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1707:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1708:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1709:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1710:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1711:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3432              		.loc 1 1711 0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 8
 3435              		@ frame_needed = 1, uses_anonymous_args = 0
 3436              		@ link register save eliminated.
 3437 0000 80B4     		push	{r7}
 3438              	.LCFI145:
 3439              		.cfi_def_cfa_offset 4
 3440              		.cfi_offset 7, -4
 3441 0002 83B0     		sub	sp, sp, #12
 3442              	.LCFI146:
 3443              		.cfi_def_cfa_offset 16
 3444 0004 00AF     		add	r7, sp, #0
 3445              	.LCFI147:
 3446              		.cfi_def_cfa_register 7
 3447 0006 7860     		str	r0, [r7, #4]
1712:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1713:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart); 
1714:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1715:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****            the HAL_UART_ErrorCallback could be implemented in the user file
1716:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */ 
1717:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3448              		.loc 1 1717 0
 3449 0008 00BF     		nop
 3450 000a 0C37     		adds	r7, r7, #12
 3451              	.LCFI148:
 3452              		.cfi_def_cfa_offset 4
 3453 000c BD46     		mov	sp, r7
 3454              	.LCFI149:
 3455              		.cfi_def_cfa_register 13
 3456              		@ sp needed
 3457 000e 5DF8047B 		ldr	r7, [sp], #4
 3458              	.LCFI150:
 3459              		.cfi_restore 7
 3460              		.cfi_def_cfa_offset 0
 3461 0012 7047     		bx	lr
ARM GAS  /tmp/ccLJIDLw.s 			page 91


 3462              		.cfi_endproc
 3463              	.LFE151:
 3465              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3466              		.align	1
 3467              		.weak	HAL_UART_AbortCpltCallback
 3468              		.syntax unified
 3469              		.thumb
 3470              		.thumb_func
 3471              		.fpu fpv4-sp-d16
 3473              	HAL_UART_AbortCpltCallback:
 3474              	.LFB152:
1718:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1719:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1720:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1721:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1722:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1723:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1724:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
1725:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3475              		.loc 1 1725 0
 3476              		.cfi_startproc
 3477              		@ args = 0, pretend = 0, frame = 8
 3478              		@ frame_needed = 1, uses_anonymous_args = 0
 3479              		@ link register save eliminated.
 3480 0000 80B4     		push	{r7}
 3481              	.LCFI151:
 3482              		.cfi_def_cfa_offset 4
 3483              		.cfi_offset 7, -4
 3484 0002 83B0     		sub	sp, sp, #12
 3485              	.LCFI152:
 3486              		.cfi_def_cfa_offset 16
 3487 0004 00AF     		add	r7, sp, #0
 3488              	.LCFI153:
 3489              		.cfi_def_cfa_register 7
 3490 0006 7860     		str	r0, [r7, #4]
1726:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1727:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1728:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1729:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1730:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
1731:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1732:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3491              		.loc 1 1732 0
 3492 0008 00BF     		nop
 3493 000a 0C37     		adds	r7, r7, #12
 3494              	.LCFI154:
 3495              		.cfi_def_cfa_offset 4
 3496 000c BD46     		mov	sp, r7
 3497              	.LCFI155:
 3498              		.cfi_def_cfa_register 13
 3499              		@ sp needed
 3500 000e 5DF8047B 		ldr	r7, [sp], #4
 3501              	.LCFI156:
 3502              		.cfi_restore 7
 3503              		.cfi_def_cfa_offset 0
 3504 0012 7047     		bx	lr
 3505              		.cfi_endproc
ARM GAS  /tmp/ccLJIDLw.s 			page 92


 3506              	.LFE152:
 3508              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3509              		.align	1
 3510              		.weak	HAL_UART_AbortTransmitCpltCallback
 3511              		.syntax unified
 3512              		.thumb
 3513              		.thumb_func
 3514              		.fpu fpv4-sp-d16
 3516              	HAL_UART_AbortTransmitCpltCallback:
 3517              	.LFB153:
1733:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1734:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1735:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1736:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1737:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1738:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
1739:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3518              		.loc 1 1739 0
 3519              		.cfi_startproc
 3520              		@ args = 0, pretend = 0, frame = 8
 3521              		@ frame_needed = 1, uses_anonymous_args = 0
 3522              		@ link register save eliminated.
 3523 0000 80B4     		push	{r7}
 3524              	.LCFI157:
 3525              		.cfi_def_cfa_offset 4
 3526              		.cfi_offset 7, -4
 3527 0002 83B0     		sub	sp, sp, #12
 3528              	.LCFI158:
 3529              		.cfi_def_cfa_offset 16
 3530 0004 00AF     		add	r7, sp, #0
 3531              	.LCFI159:
 3532              		.cfi_def_cfa_register 7
 3533 0006 7860     		str	r0, [r7, #4]
1740:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1741:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1742:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1743:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1744:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
1745:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1746:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3534              		.loc 1 1746 0
 3535 0008 00BF     		nop
 3536 000a 0C37     		adds	r7, r7, #12
 3537              	.LCFI160:
 3538              		.cfi_def_cfa_offset 4
 3539 000c BD46     		mov	sp, r7
 3540              	.LCFI161:
 3541              		.cfi_def_cfa_register 13
 3542              		@ sp needed
 3543 000e 5DF8047B 		ldr	r7, [sp], #4
 3544              	.LCFI162:
 3545              		.cfi_restore 7
 3546              		.cfi_def_cfa_offset 0
 3547 0012 7047     		bx	lr
 3548              		.cfi_endproc
 3549              	.LFE153:
 3551              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccLJIDLw.s 			page 93


 3552              		.align	1
 3553              		.weak	HAL_UART_AbortReceiveCpltCallback
 3554              		.syntax unified
 3555              		.thumb
 3556              		.thumb_func
 3557              		.fpu fpv4-sp-d16
 3559              	HAL_UART_AbortReceiveCpltCallback:
 3560              	.LFB154:
1747:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1748:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1749:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
1750:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
1751:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1752:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1753:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
1754:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3561              		.loc 1 1754 0
 3562              		.cfi_startproc
 3563              		@ args = 0, pretend = 0, frame = 8
 3564              		@ frame_needed = 1, uses_anonymous_args = 0
 3565              		@ link register save eliminated.
 3566 0000 80B4     		push	{r7}
 3567              	.LCFI163:
 3568              		.cfi_def_cfa_offset 4
 3569              		.cfi_offset 7, -4
 3570 0002 83B0     		sub	sp, sp, #12
 3571              	.LCFI164:
 3572              		.cfi_def_cfa_offset 16
 3573 0004 00AF     		add	r7, sp, #0
 3574              	.LCFI165:
 3575              		.cfi_def_cfa_register 7
 3576 0006 7860     		str	r0, [r7, #4]
1755:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1756:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UNUSED(huart);
1757:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1758:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1759:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
1760:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    */
1761:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3577              		.loc 1 1761 0
 3578 0008 00BF     		nop
 3579 000a 0C37     		adds	r7, r7, #12
 3580              	.LCFI166:
 3581              		.cfi_def_cfa_offset 4
 3582 000c BD46     		mov	sp, r7
 3583              	.LCFI167:
 3584              		.cfi_def_cfa_register 13
 3585              		@ sp needed
 3586 000e 5DF8047B 		ldr	r7, [sp], #4
 3587              	.LCFI168:
 3588              		.cfi_restore 7
 3589              		.cfi_def_cfa_offset 0
 3590 0012 7047     		bx	lr
 3591              		.cfi_endproc
 3592              	.LFE154:
 3594              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 3595              		.align	1
ARM GAS  /tmp/ccLJIDLw.s 			page 94


 3596              		.global	HAL_LIN_SendBreak
 3597              		.syntax unified
 3598              		.thumb
 3599              		.thumb_func
 3600              		.fpu fpv4-sp-d16
 3602              	HAL_LIN_SendBreak:
 3603              	.LFB155:
1762:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1763:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1764:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1765:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1766:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1767:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions 
1768:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART control functions 
1769:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
1770:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
1771:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
1772:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1773:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
1774:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   [..]
1775:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART:
1776:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_LIN_SendBreak() API can be helpful to transmit the break character.
1777:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_EnterMuteMode() API can be helpful to enter the UART in mute mode. 
1778:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     (+) HAL_MultiProcessor_ExitMuteMode() API can be helpful to exit the UART mute mode by software
1779:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
1780:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
1781:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
1782:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1783:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1784:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1785:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Transmits break characters.
1786:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1787:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1788:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1789:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1790:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
1791:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3604              		.loc 1 1791 0
 3605              		.cfi_startproc
 3606              		@ args = 0, pretend = 0, frame = 8
 3607              		@ frame_needed = 1, uses_anonymous_args = 0
 3608              		@ link register save eliminated.
 3609 0000 80B4     		push	{r7}
 3610              	.LCFI169:
 3611              		.cfi_def_cfa_offset 4
 3612              		.cfi_offset 7, -4
 3613 0002 83B0     		sub	sp, sp, #12
 3614              	.LCFI170:
 3615              		.cfi_def_cfa_offset 16
 3616 0004 00AF     		add	r7, sp, #0
 3617              	.LCFI171:
 3618              		.cfi_def_cfa_register 7
 3619 0006 7860     		str	r0, [r7, #4]
1792:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1793:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1794:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1795:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
ARM GAS  /tmp/ccLJIDLw.s 			page 95


1796:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3620              		.loc 1 1796 0
 3621 0008 7B68     		ldr	r3, [r7, #4]
 3622 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3623 000e 012B     		cmp	r3, #1
 3624 0010 01D1     		bne	.L167
 3625              		.loc 1 1796 0 is_stmt 0 discriminator 1
 3626 0012 0223     		movs	r3, #2
 3627 0014 18E0     		b	.L168
 3628              	.L167:
 3629              		.loc 1 1796 0 discriminator 2
 3630 0016 7B68     		ldr	r3, [r7, #4]
 3631 0018 0122     		movs	r2, #1
 3632 001a 83F83820 		strb	r2, [r3, #56]
1797:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1798:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3633              		.loc 1 1798 0 is_stmt 1 discriminator 2
 3634 001e 7B68     		ldr	r3, [r7, #4]
 3635 0020 2422     		movs	r2, #36
 3636 0022 83F83920 		strb	r2, [r3, #57]
1799:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1800:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Send break characters */
1801:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 3637              		.loc 1 1801 0 discriminator 2
 3638 0026 7B68     		ldr	r3, [r7, #4]
 3639 0028 1B68     		ldr	r3, [r3]
 3640 002a 7A68     		ldr	r2, [r7, #4]
 3641 002c 1268     		ldr	r2, [r2]
 3642 002e D268     		ldr	r2, [r2, #12]
 3643 0030 42F00102 		orr	r2, r2, #1
 3644 0034 DA60     		str	r2, [r3, #12]
1802:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
1803:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3645              		.loc 1 1803 0 discriminator 2
 3646 0036 7B68     		ldr	r3, [r7, #4]
 3647 0038 2022     		movs	r2, #32
 3648 003a 83F83920 		strb	r2, [r3, #57]
1804:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1805:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1806:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3649              		.loc 1 1806 0 discriminator 2
 3650 003e 7B68     		ldr	r3, [r7, #4]
 3651 0040 0022     		movs	r2, #0
 3652 0042 83F83820 		strb	r2, [r3, #56]
1807:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1808:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3653              		.loc 1 1808 0 discriminator 2
 3654 0046 0023     		movs	r3, #0
 3655              	.L168:
1809:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3656              		.loc 1 1809 0
 3657 0048 1846     		mov	r0, r3
 3658 004a 0C37     		adds	r7, r7, #12
 3659              	.LCFI172:
 3660              		.cfi_def_cfa_offset 4
 3661 004c BD46     		mov	sp, r7
 3662              	.LCFI173:
ARM GAS  /tmp/ccLJIDLw.s 			page 96


 3663              		.cfi_def_cfa_register 13
 3664              		@ sp needed
 3665 004e 5DF8047B 		ldr	r7, [sp], #4
 3666              	.LCFI174:
 3667              		.cfi_restore 7
 3668              		.cfi_def_cfa_offset 0
 3669 0052 7047     		bx	lr
 3670              		.cfi_endproc
 3671              	.LFE155:
 3673              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3674              		.align	1
 3675              		.global	HAL_MultiProcessor_EnterMuteMode
 3676              		.syntax unified
 3677              		.thumb
 3678              		.thumb_func
 3679              		.fpu fpv4-sp-d16
 3681              	HAL_MultiProcessor_EnterMuteMode:
 3682              	.LFB156:
1810:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1811:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1812:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enters the UART in mute mode. 
1813:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1814:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1815:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1816:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1817:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1818:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3683              		.loc 1 1818 0
 3684              		.cfi_startproc
 3685              		@ args = 0, pretend = 0, frame = 8
 3686              		@ frame_needed = 1, uses_anonymous_args = 0
 3687              		@ link register save eliminated.
 3688 0000 80B4     		push	{r7}
 3689              	.LCFI175:
 3690              		.cfi_def_cfa_offset 4
 3691              		.cfi_offset 7, -4
 3692 0002 83B0     		sub	sp, sp, #12
 3693              	.LCFI176:
 3694              		.cfi_def_cfa_offset 16
 3695 0004 00AF     		add	r7, sp, #0
 3696              	.LCFI177:
 3697              		.cfi_def_cfa_register 7
 3698 0006 7860     		str	r0, [r7, #4]
1819:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1820:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1821:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1822:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1823:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3699              		.loc 1 1823 0
 3700 0008 7B68     		ldr	r3, [r7, #4]
 3701 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3702 000e 012B     		cmp	r3, #1
 3703 0010 01D1     		bne	.L170
 3704              		.loc 1 1823 0 is_stmt 0 discriminator 1
 3705 0012 0223     		movs	r3, #2
 3706 0014 18E0     		b	.L171
 3707              	.L170:
ARM GAS  /tmp/ccLJIDLw.s 			page 97


 3708              		.loc 1 1823 0 discriminator 2
 3709 0016 7B68     		ldr	r3, [r7, #4]
 3710 0018 0122     		movs	r2, #1
 3711 001a 83F83820 		strb	r2, [r3, #56]
1824:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1825:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3712              		.loc 1 1825 0 is_stmt 1 discriminator 2
 3713 001e 7B68     		ldr	r3, [r7, #4]
 3714 0020 2422     		movs	r2, #36
 3715 0022 83F83920 		strb	r2, [r3, #57]
1826:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1827:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
1828:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3716              		.loc 1 1828 0 discriminator 2
 3717 0026 7B68     		ldr	r3, [r7, #4]
 3718 0028 1B68     		ldr	r3, [r3]
 3719 002a 7A68     		ldr	r2, [r7, #4]
 3720 002c 1268     		ldr	r2, [r2]
 3721 002e D268     		ldr	r2, [r2, #12]
 3722 0030 42F00202 		orr	r2, r2, #2
 3723 0034 DA60     		str	r2, [r3, #12]
1829:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1830:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3724              		.loc 1 1830 0 discriminator 2
 3725 0036 7B68     		ldr	r3, [r7, #4]
 3726 0038 2022     		movs	r2, #32
 3727 003a 83F83920 		strb	r2, [r3, #57]
1831:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1832:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1833:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3728              		.loc 1 1833 0 discriminator 2
 3729 003e 7B68     		ldr	r3, [r7, #4]
 3730 0040 0022     		movs	r2, #0
 3731 0042 83F83820 		strb	r2, [r3, #56]
1834:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1835:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3732              		.loc 1 1835 0 discriminator 2
 3733 0046 0023     		movs	r3, #0
 3734              	.L171:
1836:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3735              		.loc 1 1836 0
 3736 0048 1846     		mov	r0, r3
 3737 004a 0C37     		adds	r7, r7, #12
 3738              	.LCFI178:
 3739              		.cfi_def_cfa_offset 4
 3740 004c BD46     		mov	sp, r7
 3741              	.LCFI179:
 3742              		.cfi_def_cfa_register 13
 3743              		@ sp needed
 3744 004e 5DF8047B 		ldr	r7, [sp], #4
 3745              	.LCFI180:
 3746              		.cfi_restore 7
 3747              		.cfi_def_cfa_offset 0
 3748 0052 7047     		bx	lr
 3749              		.cfi_endproc
 3750              	.LFE156:
 3752              		.section	.text.HAL_MultiProcessor_ExitMuteMode,"ax",%progbits
ARM GAS  /tmp/ccLJIDLw.s 			page 98


 3753              		.align	1
 3754              		.global	HAL_MultiProcessor_ExitMuteMode
 3755              		.syntax unified
 3756              		.thumb
 3757              		.thumb_func
 3758              		.fpu fpv4-sp-d16
 3760              	HAL_MultiProcessor_ExitMuteMode:
 3761              	.LFB157:
1837:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1838:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1839:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Exits the UART mute mode: wake up software. 
1840:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1841:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1842:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1843:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1844:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
1845:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3762              		.loc 1 1845 0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 8
 3765              		@ frame_needed = 1, uses_anonymous_args = 0
 3766              		@ link register save eliminated.
 3767 0000 80B4     		push	{r7}
 3768              	.LCFI181:
 3769              		.cfi_def_cfa_offset 4
 3770              		.cfi_offset 7, -4
 3771 0002 83B0     		sub	sp, sp, #12
 3772              	.LCFI182:
 3773              		.cfi_def_cfa_offset 16
 3774 0004 00AF     		add	r7, sp, #0
 3775              	.LCFI183:
 3776              		.cfi_def_cfa_register 7
 3777 0006 7860     		str	r0, [r7, #4]
1846:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
1847:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
1848:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1849:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1850:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3778              		.loc 1 1850 0
 3779 0008 7B68     		ldr	r3, [r7, #4]
 3780 000a 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3781 000e 012B     		cmp	r3, #1
 3782 0010 01D1     		bne	.L173
 3783              		.loc 1 1850 0 is_stmt 0 discriminator 1
 3784 0012 0223     		movs	r3, #2
 3785 0014 18E0     		b	.L174
 3786              	.L173:
 3787              		.loc 1 1850 0 discriminator 2
 3788 0016 7B68     		ldr	r3, [r7, #4]
 3789 0018 0122     		movs	r2, #1
 3790 001a 83F83820 		strb	r2, [r3, #56]
1851:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1852:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3791              		.loc 1 1852 0 is_stmt 1 discriminator 2
 3792 001e 7B68     		ldr	r3, [r7, #4]
 3793 0020 2422     		movs	r2, #36
 3794 0022 83F83920 		strb	r2, [r3, #57]
ARM GAS  /tmp/ccLJIDLw.s 			page 99


1853:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1854:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
1855:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 3795              		.loc 1 1855 0 discriminator 2
 3796 0026 7B68     		ldr	r3, [r7, #4]
 3797 0028 1B68     		ldr	r3, [r3]
 3798 002a 7A68     		ldr	r2, [r7, #4]
 3799 002c 1268     		ldr	r2, [r2]
 3800 002e D268     		ldr	r2, [r2, #12]
 3801 0030 22F00202 		bic	r2, r2, #2
 3802 0034 DA60     		str	r2, [r3, #12]
1856:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1857:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3803              		.loc 1 1857 0 discriminator 2
 3804 0036 7B68     		ldr	r3, [r7, #4]
 3805 0038 2022     		movs	r2, #32
 3806 003a 83F83920 		strb	r2, [r3, #57]
1858:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1859:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1860:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3807              		.loc 1 1860 0 discriminator 2
 3808 003e 7B68     		ldr	r3, [r7, #4]
 3809 0040 0022     		movs	r2, #0
 3810 0042 83F83820 		strb	r2, [r3, #56]
1861:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1862:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3811              		.loc 1 1862 0 discriminator 2
 3812 0046 0023     		movs	r3, #0
 3813              	.L174:
1863:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3814              		.loc 1 1863 0
 3815 0048 1846     		mov	r0, r3
 3816 004a 0C37     		adds	r7, r7, #12
 3817              	.LCFI184:
 3818              		.cfi_def_cfa_offset 4
 3819 004c BD46     		mov	sp, r7
 3820              	.LCFI185:
 3821              		.cfi_def_cfa_register 13
 3822              		@ sp needed
 3823 004e 5DF8047B 		ldr	r7, [sp], #4
 3824              	.LCFI186:
 3825              		.cfi_restore 7
 3826              		.cfi_def_cfa_offset 0
 3827 0052 7047     		bx	lr
 3828              		.cfi_endproc
 3829              	.LFE157:
 3831              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3832              		.align	1
 3833              		.global	HAL_HalfDuplex_EnableTransmitter
 3834              		.syntax unified
 3835              		.thumb
 3836              		.thumb_func
 3837              		.fpu fpv4-sp-d16
 3839              	HAL_HalfDuplex_EnableTransmitter:
 3840              	.LFB158:
1864:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1865:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
ARM GAS  /tmp/ccLJIDLw.s 			page 100


1866:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART transmitter and disables the UART receiver.
1867:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1868:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1869:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1870:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1871:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
1872:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3841              		.loc 1 1872 0
 3842              		.cfi_startproc
 3843              		@ args = 0, pretend = 0, frame = 16
 3844              		@ frame_needed = 1, uses_anonymous_args = 0
 3845              		@ link register save eliminated.
 3846 0000 80B4     		push	{r7}
 3847              	.LCFI187:
 3848              		.cfi_def_cfa_offset 4
 3849              		.cfi_offset 7, -4
 3850 0002 85B0     		sub	sp, sp, #20
 3851              	.LCFI188:
 3852              		.cfi_def_cfa_offset 24
 3853 0004 00AF     		add	r7, sp, #0
 3854              	.LCFI189:
 3855              		.cfi_def_cfa_register 7
 3856 0006 7860     		str	r0, [r7, #4]
1873:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3857              		.loc 1 1873 0
 3858 0008 0023     		movs	r3, #0
 3859 000a FB60     		str	r3, [r7, #12]
1874:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1875:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1876:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3860              		.loc 1 1876 0
 3861 000c 7B68     		ldr	r3, [r7, #4]
 3862 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3863 0012 012B     		cmp	r3, #1
 3864 0014 01D1     		bne	.L176
 3865              		.loc 1 1876 0 is_stmt 0 discriminator 1
 3866 0016 0223     		movs	r3, #2
 3867 0018 20E0     		b	.L177
 3868              	.L176:
 3869              		.loc 1 1876 0 discriminator 2
 3870 001a 7B68     		ldr	r3, [r7, #4]
 3871 001c 0122     		movs	r2, #1
 3872 001e 83F83820 		strb	r2, [r3, #56]
1877:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1878:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3873              		.loc 1 1878 0 is_stmt 1 discriminator 2
 3874 0022 7B68     		ldr	r3, [r7, #4]
 3875 0024 2422     		movs	r2, #36
 3876 0026 83F83920 		strb	r2, [r3, #57]
1879:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1880:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1881:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3877              		.loc 1 1881 0 discriminator 2
 3878 002a 7B68     		ldr	r3, [r7, #4]
 3879 002c 1B68     		ldr	r3, [r3]
 3880 002e DB68     		ldr	r3, [r3, #12]
 3881 0030 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 101


1882:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1883:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
1884:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3882              		.loc 1 1884 0 discriminator 2
 3883 0032 FB68     		ldr	r3, [r7, #12]
 3884 0034 23F00C03 		bic	r3, r3, #12
 3885 0038 FB60     		str	r3, [r7, #12]
1885:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1886:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1887:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_TE;
 3886              		.loc 1 1887 0 discriminator 2
 3887 003a FB68     		ldr	r3, [r7, #12]
 3888 003c 43F00803 		orr	r3, r3, #8
 3889 0040 FB60     		str	r3, [r7, #12]
1888:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1889:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
1890:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3890              		.loc 1 1890 0 discriminator 2
 3891 0042 7B68     		ldr	r3, [r7, #4]
 3892 0044 1B68     		ldr	r3, [r3]
 3893 0046 FA68     		ldr	r2, [r7, #12]
 3894 0048 DA60     		str	r2, [r3, #12]
1891:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  
1892:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3895              		.loc 1 1892 0 discriminator 2
 3896 004a 7B68     		ldr	r3, [r7, #4]
 3897 004c 2022     		movs	r2, #32
 3898 004e 83F83920 		strb	r2, [r3, #57]
1893:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1894:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1895:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3899              		.loc 1 1895 0 discriminator 2
 3900 0052 7B68     		ldr	r3, [r7, #4]
 3901 0054 0022     		movs	r2, #0
 3902 0056 83F83820 		strb	r2, [r3, #56]
1896:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1897:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3903              		.loc 1 1897 0 discriminator 2
 3904 005a 0023     		movs	r3, #0
 3905              	.L177:
1898:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3906              		.loc 1 1898 0
 3907 005c 1846     		mov	r0, r3
 3908 005e 1437     		adds	r7, r7, #20
 3909              	.LCFI190:
 3910              		.cfi_def_cfa_offset 4
 3911 0060 BD46     		mov	sp, r7
 3912              	.LCFI191:
 3913              		.cfi_def_cfa_register 13
 3914              		@ sp needed
 3915 0062 5DF8047B 		ldr	r7, [sp], #4
 3916              	.LCFI192:
 3917              		.cfi_restore 7
 3918              		.cfi_def_cfa_offset 0
 3919 0066 7047     		bx	lr
 3920              		.cfi_endproc
 3921              	.LFE158:
ARM GAS  /tmp/ccLJIDLw.s 			page 102


 3923              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3924              		.align	1
 3925              		.global	HAL_HalfDuplex_EnableReceiver
 3926              		.syntax unified
 3927              		.thumb
 3928              		.thumb_func
 3929              		.fpu fpv4-sp-d16
 3931              	HAL_HalfDuplex_EnableReceiver:
 3932              	.LFB159:
1899:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1900:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1901:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Enables the UART receiver and disables the UART transmitter.
1902:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1903:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1904:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
1905:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1906:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1907:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 3933              		.loc 1 1907 0
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 16
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937              		@ link register save eliminated.
 3938 0000 80B4     		push	{r7}
 3939              	.LCFI193:
 3940              		.cfi_def_cfa_offset 4
 3941              		.cfi_offset 7, -4
 3942 0002 85B0     		sub	sp, sp, #20
 3943              	.LCFI194:
 3944              		.cfi_def_cfa_offset 24
 3945 0004 00AF     		add	r7, sp, #0
 3946              	.LCFI195:
 3947              		.cfi_def_cfa_register 7
 3948 0006 7860     		str	r0, [r7, #4]
1908:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 3949              		.loc 1 1908 0
 3950 0008 0023     		movs	r3, #0
 3951 000a FB60     		str	r3, [r7, #12]
1909:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1910:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Locked */
1911:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_LOCK(huart);
 3952              		.loc 1 1911 0
 3953 000c 7B68     		ldr	r3, [r7, #4]
 3954 000e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3955 0012 012B     		cmp	r3, #1
 3956 0014 01D1     		bne	.L179
 3957              		.loc 1 1911 0 is_stmt 0 discriminator 1
 3958 0016 0223     		movs	r3, #2
 3959 0018 20E0     		b	.L180
 3960              	.L179:
 3961              		.loc 1 1911 0 discriminator 2
 3962 001a 7B68     		ldr	r3, [r7, #4]
 3963 001c 0122     		movs	r2, #1
 3964 001e 83F83820 		strb	r2, [r3, #56]
1912:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1913:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3965              		.loc 1 1913 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccLJIDLw.s 			page 103


 3966 0022 7B68     		ldr	r3, [r7, #4]
 3967 0024 2422     		movs	r2, #36
 3968 0026 83F83920 		strb	r2, [r3, #57]
1914:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1915:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
1916:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 3969              		.loc 1 1916 0 discriminator 2
 3970 002a 7B68     		ldr	r3, [r7, #4]
 3971 002c 1B68     		ldr	r3, [r3]
 3972 002e DB68     		ldr	r3, [r3, #12]
 3973 0030 FB60     		str	r3, [r7, #12]
1917:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1918:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear TE and RE bits */
1919:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 3974              		.loc 1 1919 0 discriminator 2
 3975 0032 FB68     		ldr	r3, [r7, #12]
 3976 0034 23F00C03 		bic	r3, r3, #12
 3977 0038 FB60     		str	r3, [r7, #12]
1920:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1921:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1922:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)USART_CR1_RE;
 3978              		.loc 1 1922 0 discriminator 2
 3979 003a FB68     		ldr	r3, [r7, #12]
 3980 003c 43F00403 		orr	r3, r3, #4
 3981 0040 FB60     		str	r3, [r7, #12]
1923:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1924:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
1925:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 3982              		.loc 1 1925 0 discriminator 2
 3983 0042 7B68     		ldr	r3, [r7, #4]
 3984 0044 1B68     		ldr	r3, [r3]
 3985 0046 FA68     		ldr	r2, [r7, #12]
 3986 0048 DA60     		str	r2, [r3, #12]
1926:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1927:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3987              		.loc 1 1927 0 discriminator 2
 3988 004a 7B68     		ldr	r3, [r7, #4]
 3989 004c 2022     		movs	r2, #32
 3990 004e 83F83920 		strb	r2, [r3, #57]
1928:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1929:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Process Unlocked */
1930:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3991              		.loc 1 1930 0 discriminator 2
 3992 0052 7B68     		ldr	r3, [r7, #4]
 3993 0054 0022     		movs	r2, #0
 3994 0056 83F83820 		strb	r2, [r3, #56]
1931:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1932:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK; 
 3995              		.loc 1 1932 0 discriminator 2
 3996 005a 0023     		movs	r3, #0
 3997              	.L180:
1933:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 3998              		.loc 1 1933 0
 3999 005c 1846     		mov	r0, r3
 4000 005e 1437     		adds	r7, r7, #20
 4001              	.LCFI196:
 4002              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccLJIDLw.s 			page 104


 4003 0060 BD46     		mov	sp, r7
 4004              	.LCFI197:
 4005              		.cfi_def_cfa_register 13
 4006              		@ sp needed
 4007 0062 5DF8047B 		ldr	r7, [sp], #4
 4008              	.LCFI198:
 4009              		.cfi_restore 7
 4010              		.cfi_def_cfa_offset 0
 4011 0066 7047     		bx	lr
 4012              		.cfi_endproc
 4013              	.LFE159:
 4015              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4016              		.align	1
 4017              		.global	HAL_UART_GetState
 4018              		.syntax unified
 4019              		.thumb
 4020              		.thumb_func
 4021              		.fpu fpv4-sp-d16
 4023              	HAL_UART_GetState:
 4024              	.LFB160:
1934:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1935:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1936:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1937:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1938:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1939:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Errors functions 
1940:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *  @brief   UART State and Errors functions 
1941:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *
1942:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @verbatim   
1943:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================
1944:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                  ##### Peripheral State and Errors functions #####
1945:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   ==============================================================================  
1946:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****  [..]
1947:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    This subsection provides a set of functions allowing to return the State of 
1948:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    UART communication process, return Peripheral Errors occurred during communication 
1949:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    process
1950:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetState() API can be helpful to check in run-time the state of the UART peripheral
1951:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****    (+) HAL_UART_GetError() check in run-time errors that could be occurred during communication. 
1952:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1953:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** @endverbatim
1954:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @{
1955:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1956:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1957:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1958:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Returns the UART state.
1959:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
1960:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
1961:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL state
1962:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1963:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
1964:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4025              		.loc 1 1964 0
 4026              		.cfi_startproc
 4027              		@ args = 0, pretend = 0, frame = 16
 4028              		@ frame_needed = 1, uses_anonymous_args = 0
 4029              		@ link register save eliminated.
 4030 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccLJIDLw.s 			page 105


 4031              	.LCFI199:
 4032              		.cfi_def_cfa_offset 4
 4033              		.cfi_offset 7, -4
 4034 0002 85B0     		sub	sp, sp, #20
 4035              	.LCFI200:
 4036              		.cfi_def_cfa_offset 24
 4037 0004 00AF     		add	r7, sp, #0
 4038              	.LCFI201:
 4039              		.cfi_def_cfa_register 7
 4040 0006 7860     		str	r0, [r7, #4]
1965:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 4041              		.loc 1 1965 0
 4042 0008 0023     		movs	r3, #0
 4043 000a FB60     		str	r3, [r7, #12]
 4044 000c 0023     		movs	r3, #0
 4045 000e BB60     		str	r3, [r7, #8]
1966:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp1 = huart->gState;
 4046              		.loc 1 1966 0
 4047 0010 7B68     		ldr	r3, [r7, #4]
 4048 0012 93F83930 		ldrb	r3, [r3, #57]
 4049 0016 DBB2     		uxtb	r3, r3
 4050 0018 FB60     		str	r3, [r7, #12]
1967:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   temp2 = huart->RxState;
 4051              		.loc 1 1967 0
 4052 001a 7B68     		ldr	r3, [r7, #4]
 4053 001c 93F83A30 		ldrb	r3, [r3, #58]
 4054 0020 DBB2     		uxtb	r3, r3
 4055 0022 BB60     		str	r3, [r7, #8]
1968:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
1969:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4056              		.loc 1 1969 0
 4057 0024 FB68     		ldr	r3, [r7, #12]
 4058 0026 DAB2     		uxtb	r2, r3
 4059 0028 BB68     		ldr	r3, [r7, #8]
 4060 002a DBB2     		uxtb	r3, r3
 4061 002c 1343     		orrs	r3, r3, r2
 4062 002e DBB2     		uxtb	r3, r3
1970:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4063              		.loc 1 1970 0
 4064 0030 1846     		mov	r0, r3
 4065 0032 1437     		adds	r7, r7, #20
 4066              	.LCFI202:
 4067              		.cfi_def_cfa_offset 4
 4068 0034 BD46     		mov	sp, r7
 4069              	.LCFI203:
 4070              		.cfi_def_cfa_register 13
 4071              		@ sp needed
 4072 0036 5DF8047B 		ldr	r7, [sp], #4
 4073              	.LCFI204:
 4074              		.cfi_restore 7
 4075              		.cfi_def_cfa_offset 0
 4076 003a 7047     		bx	lr
 4077              		.cfi_endproc
 4078              	.LFE160:
 4080              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4081              		.align	1
 4082              		.global	HAL_UART_GetError
ARM GAS  /tmp/ccLJIDLw.s 			page 106


 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	HAL_UART_GetError:
 4089              	.LFB161:
1971:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1972:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1973:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Return the UART error code
1974:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart  pointer to a UART_HandleTypeDef structure that contains
1975:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *              the configuration information for the specified UART.
1976:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval UART Error Code
1977:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1978:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
1979:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4090              		.loc 1 1979 0
 4091              		.cfi_startproc
 4092              		@ args = 0, pretend = 0, frame = 8
 4093              		@ frame_needed = 1, uses_anonymous_args = 0
 4094              		@ link register save eliminated.
 4095 0000 80B4     		push	{r7}
 4096              	.LCFI205:
 4097              		.cfi_def_cfa_offset 4
 4098              		.cfi_offset 7, -4
 4099 0002 83B0     		sub	sp, sp, #12
 4100              	.LCFI206:
 4101              		.cfi_def_cfa_offset 16
 4102 0004 00AF     		add	r7, sp, #0
 4103              	.LCFI207:
 4104              		.cfi_def_cfa_register 7
 4105 0006 7860     		str	r0, [r7, #4]
1980:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return huart->ErrorCode;
 4106              		.loc 1 1980 0
 4107 0008 7B68     		ldr	r3, [r7, #4]
 4108 000a DB6B     		ldr	r3, [r3, #60]
1981:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4109              		.loc 1 1981 0
 4110 000c 1846     		mov	r0, r3
 4111 000e 0C37     		adds	r7, r7, #12
 4112              	.LCFI208:
 4113              		.cfi_def_cfa_offset 4
 4114 0010 BD46     		mov	sp, r7
 4115              	.LCFI209:
 4116              		.cfi_def_cfa_register 13
 4117              		@ sp needed
 4118 0012 5DF8047B 		ldr	r7, [sp], #4
 4119              	.LCFI210:
 4120              		.cfi_restore 7
 4121              		.cfi_def_cfa_offset 0
 4122 0016 7047     		bx	lr
 4123              		.cfi_endproc
 4124              	.LFE161:
 4126              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 4127              		.align	1
 4128              		.syntax unified
 4129              		.thumb
 4130              		.thumb_func
ARM GAS  /tmp/ccLJIDLw.s 			page 107


 4131              		.fpu fpv4-sp-d16
 4133              	UART_DMATransmitCplt:
 4134              	.LFB162:
1982:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1983:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1984:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @}
1985:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1986:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
1987:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
1988:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART transmit process complete callback. 
1989:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
1990:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
1991:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
1992:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1993:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4135              		.loc 1 1993 0
 4136              		.cfi_startproc
 4137              		@ args = 0, pretend = 0, frame = 16
 4138              		@ frame_needed = 1, uses_anonymous_args = 0
 4139 0000 80B5     		push	{r7, lr}
 4140              	.LCFI211:
 4141              		.cfi_def_cfa_offset 8
 4142              		.cfi_offset 7, -8
 4143              		.cfi_offset 14, -4
 4144 0002 84B0     		sub	sp, sp, #16
 4145              	.LCFI212:
 4146              		.cfi_def_cfa_offset 24
 4147 0004 00AF     		add	r7, sp, #0
 4148              	.LCFI213:
 4149              		.cfi_def_cfa_register 7
 4150 0006 7860     		str	r0, [r7, #4]
1994:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4151              		.loc 1 1994 0
 4152 0008 7B68     		ldr	r3, [r7, #4]
 4153 000a 9B6B     		ldr	r3, [r3, #56]
 4154 000c FB60     		str	r3, [r7, #12]
1995:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
1996:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 4155              		.loc 1 1996 0
 4156 000e 7B68     		ldr	r3, [r7, #4]
 4157 0010 1B68     		ldr	r3, [r3]
 4158 0012 1B68     		ldr	r3, [r3]
 4159 0014 03F48073 		and	r3, r3, #256
 4160 0018 002B     		cmp	r3, #0
 4161 001a 13D1     		bne	.L186
1997:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
1998:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4162              		.loc 1 1998 0
 4163 001c FB68     		ldr	r3, [r7, #12]
 4164 001e 0022     		movs	r2, #0
 4165 0020 DA84     		strh	r2, [r3, #38]	@ movhi
1999:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2000:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
2001:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
2002:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 4166              		.loc 1 2002 0
 4167 0022 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 108


 4168 0024 1B68     		ldr	r3, [r3]
 4169 0026 FA68     		ldr	r2, [r7, #12]
 4170 0028 1268     		ldr	r2, [r2]
 4171 002a 5269     		ldr	r2, [r2, #20]
 4172 002c 22F08002 		bic	r2, r2, #128
 4173 0030 5A61     		str	r2, [r3, #20]
2003:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2004:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2005:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 4174              		.loc 1 2005 0
 4175 0032 FB68     		ldr	r3, [r7, #12]
 4176 0034 1B68     		ldr	r3, [r3]
 4177 0036 FA68     		ldr	r2, [r7, #12]
 4178 0038 1268     		ldr	r2, [r2]
 4179 003a D268     		ldr	r2, [r2, #12]
 4180 003c 42F04002 		orr	r2, r2, #64
 4181 0040 DA60     		str	r2, [r3, #12]
2006:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2007:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2008:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Circular mode */
2009:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2010:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
2012:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2013:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4182              		.loc 1 2013 0
 4183 0042 02E0     		b	.L188
 4184              	.L186:
2011:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
 4185              		.loc 1 2011 0
 4186 0044 F868     		ldr	r0, [r7, #12]
 4187 0046 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 4188              	.L188:
 4189              		.loc 1 2013 0
 4190 004a 00BF     		nop
 4191 004c 1037     		adds	r7, r7, #16
 4192              	.LCFI214:
 4193              		.cfi_def_cfa_offset 8
 4194 004e BD46     		mov	sp, r7
 4195              	.LCFI215:
 4196              		.cfi_def_cfa_register 13
 4197              		@ sp needed
 4198 0050 80BD     		pop	{r7, pc}
 4199              		.cfi_endproc
 4200              	.LFE162:
 4202              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 4203              		.align	1
 4204              		.syntax unified
 4205              		.thumb
 4206              		.thumb_func
 4207              		.fpu fpv4-sp-d16
 4209              	UART_DMATxHalfCplt:
 4210              	.LFB163:
2014:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2015:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2016:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback 
2017:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
ARM GAS  /tmp/ccLJIDLw.s 			page 109


2018:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2019:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2020:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2021:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2022:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4211              		.loc 1 2022 0
 4212              		.cfi_startproc
 4213              		@ args = 0, pretend = 0, frame = 16
 4214              		@ frame_needed = 1, uses_anonymous_args = 0
 4215 0000 80B5     		push	{r7, lr}
 4216              	.LCFI216:
 4217              		.cfi_def_cfa_offset 8
 4218              		.cfi_offset 7, -8
 4219              		.cfi_offset 14, -4
 4220 0002 84B0     		sub	sp, sp, #16
 4221              	.LCFI217:
 4222              		.cfi_def_cfa_offset 24
 4223 0004 00AF     		add	r7, sp, #0
 4224              	.LCFI218:
 4225              		.cfi_def_cfa_register 7
 4226 0006 7860     		str	r0, [r7, #4]
2023:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4227              		.loc 1 2023 0
 4228 0008 7B68     		ldr	r3, [r7, #4]
 4229 000a 9B6B     		ldr	r3, [r3, #56]
 4230 000c FB60     		str	r3, [r7, #12]
2024:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2025:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 4231              		.loc 1 2025 0
 4232 000e F868     		ldr	r0, [r7, #12]
 4233 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
2026:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4234              		.loc 1 2026 0
 4235 0014 00BF     		nop
 4236 0016 1037     		adds	r7, r7, #16
 4237              	.LCFI219:
 4238              		.cfi_def_cfa_offset 8
 4239 0018 BD46     		mov	sp, r7
 4240              	.LCFI220:
 4241              		.cfi_def_cfa_register 13
 4242              		@ sp needed
 4243 001a 80BD     		pop	{r7, pc}
 4244              		.cfi_endproc
 4245              	.LFE163:
 4247              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 4248              		.align	1
 4249              		.syntax unified
 4250              		.thumb
 4251              		.thumb_func
 4252              		.fpu fpv4-sp-d16
 4254              	UART_DMAReceiveCplt:
 4255              	.LFB164:
2027:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2028:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2029:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART receive process complete callback. 
2030:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
2031:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccLJIDLw.s 			page 110


2032:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2033:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2034:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4256              		.loc 1 2034 0
 4257              		.cfi_startproc
 4258              		@ args = 0, pretend = 0, frame = 16
 4259              		@ frame_needed = 1, uses_anonymous_args = 0
 4260 0000 80B5     		push	{r7, lr}
 4261              	.LCFI221:
 4262              		.cfi_def_cfa_offset 8
 4263              		.cfi_offset 7, -8
 4264              		.cfi_offset 14, -4
 4265 0002 84B0     		sub	sp, sp, #16
 4266              	.LCFI222:
 4267              		.cfi_def_cfa_offset 24
 4268 0004 00AF     		add	r7, sp, #0
 4269              	.LCFI223:
 4270              		.cfi_def_cfa_register 7
 4271 0006 7860     		str	r0, [r7, #4]
2035:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4272              		.loc 1 2035 0
 4273 0008 7B68     		ldr	r3, [r7, #4]
 4274 000a 9B6B     		ldr	r3, [r3, #56]
 4275 000c FB60     		str	r3, [r7, #12]
2036:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* DMA Normal mode*/
2037:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 4276              		.loc 1 2037 0
 4277 000e 7B68     		ldr	r3, [r7, #4]
 4278 0010 1B68     		ldr	r3, [r3]
 4279 0012 1B68     		ldr	r3, [r3]
 4280 0014 03F48073 		and	r3, r3, #256
 4281 0018 002B     		cmp	r3, #0
 4282 001a 1ED1     		bne	.L191
2038:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2039:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0U;
 4283              		.loc 1 2039 0
 4284 001c FB68     		ldr	r3, [r7, #12]
 4285 001e 0022     		movs	r2, #0
 4286 0020 DA85     		strh	r2, [r3, #46]	@ movhi
2040:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2041:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2042:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 4287              		.loc 1 2042 0
 4288 0022 FB68     		ldr	r3, [r7, #12]
 4289 0024 1B68     		ldr	r3, [r3]
 4290 0026 FA68     		ldr	r2, [r7, #12]
 4291 0028 1268     		ldr	r2, [r2]
 4292 002a D268     		ldr	r2, [r2, #12]
 4293 002c 22F48072 		bic	r2, r2, #256
 4294 0030 DA60     		str	r2, [r3, #12]
2043:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4295              		.loc 1 2043 0
 4296 0032 FB68     		ldr	r3, [r7, #12]
 4297 0034 1B68     		ldr	r3, [r3]
 4298 0036 FA68     		ldr	r2, [r7, #12]
 4299 0038 1268     		ldr	r2, [r2]
 4300 003a 5269     		ldr	r2, [r2, #20]
ARM GAS  /tmp/ccLJIDLw.s 			page 111


 4301 003c 22F00102 		bic	r2, r2, #1
 4302 0040 5A61     		str	r2, [r3, #20]
2044:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
2045:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
2046:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****        in the UART CR3 register */
2047:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 4303              		.loc 1 2047 0
 4304 0042 FB68     		ldr	r3, [r7, #12]
 4305 0044 1B68     		ldr	r3, [r3]
 4306 0046 FA68     		ldr	r2, [r7, #12]
 4307 0048 1268     		ldr	r2, [r2]
 4308 004a 5269     		ldr	r2, [r2, #20]
 4309 004c 22F04002 		bic	r2, r2, #64
 4310 0050 5A61     		str	r2, [r3, #20]
2048:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 	
2049:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2050:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 4311              		.loc 1 2050 0
 4312 0052 FB68     		ldr	r3, [r7, #12]
 4313 0054 2022     		movs	r2, #32
 4314 0056 83F83A20 		strb	r2, [r3, #58]
 4315              	.L191:
2051:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2052:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 4316              		.loc 1 2052 0
 4317 005a F868     		ldr	r0, [r7, #12]
 4318 005c FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2053:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4319              		.loc 1 2053 0
 4320 0060 00BF     		nop
 4321 0062 1037     		adds	r7, r7, #16
 4322              	.LCFI224:
 4323              		.cfi_def_cfa_offset 8
 4324 0064 BD46     		mov	sp, r7
 4325              	.LCFI225:
 4326              		.cfi_def_cfa_register 13
 4327              		@ sp needed
 4328 0066 80BD     		pop	{r7, pc}
 4329              		.cfi_endproc
 4330              	.LFE164:
 4332              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 4333              		.align	1
 4334              		.syntax unified
 4335              		.thumb
 4336              		.thumb_func
 4337              		.fpu fpv4-sp-d16
 4339              	UART_DMARxHalfCplt:
 4340              	.LFB165:
2054:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2055:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2056:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback 
2057:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
2058:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified DMA module.
2059:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2060:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2061:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2062:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
ARM GAS  /tmp/ccLJIDLw.s 			page 112


 4341              		.loc 1 2062 0
 4342              		.cfi_startproc
 4343              		@ args = 0, pretend = 0, frame = 16
 4344              		@ frame_needed = 1, uses_anonymous_args = 0
 4345 0000 80B5     		push	{r7, lr}
 4346              	.LCFI226:
 4347              		.cfi_def_cfa_offset 8
 4348              		.cfi_offset 7, -8
 4349              		.cfi_offset 14, -4
 4350 0002 84B0     		sub	sp, sp, #16
 4351              	.LCFI227:
 4352              		.cfi_def_cfa_offset 24
 4353 0004 00AF     		add	r7, sp, #0
 4354              	.LCFI228:
 4355              		.cfi_def_cfa_register 7
 4356 0006 7860     		str	r0, [r7, #4]
2063:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 4357              		.loc 1 2063 0
 4358 0008 7B68     		ldr	r3, [r7, #4]
 4359 000a 9B6B     		ldr	r3, [r3, #56]
 4360 000c FB60     		str	r3, [r7, #12]
2064:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2065:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart); 
 4361              		.loc 1 2065 0
 4362 000e F868     		ldr	r0, [r7, #12]
 4363 0010 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
2066:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4364              		.loc 1 2066 0
 4365 0014 00BF     		nop
 4366 0016 1037     		adds	r7, r7, #16
 4367              	.LCFI229:
 4368              		.cfi_def_cfa_offset 8
 4369 0018 BD46     		mov	sp, r7
 4370              	.LCFI230:
 4371              		.cfi_def_cfa_register 13
 4372              		@ sp needed
 4373 001a 80BD     		pop	{r7, pc}
 4374              		.cfi_endproc
 4375              	.LFE165:
 4377              		.section	.text.UART_DMAError,"ax",%progbits
 4378              		.align	1
 4379              		.syntax unified
 4380              		.thumb
 4381              		.thumb_func
 4382              		.fpu fpv4-sp-d16
 4384              	UART_DMAError:
 4385              	.LFB166:
2067:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2068:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2069:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication error callback.
2070:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle
2071:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2072:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2073:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2074:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4386              		.loc 1 2074 0
 4387              		.cfi_startproc
ARM GAS  /tmp/ccLJIDLw.s 			page 113


 4388              		@ args = 0, pretend = 0, frame = 16
 4389              		@ frame_needed = 1, uses_anonymous_args = 0
 4390 0000 80B5     		push	{r7, lr}
 4391              	.LCFI231:
 4392              		.cfi_def_cfa_offset 8
 4393              		.cfi_offset 7, -8
 4394              		.cfi_offset 14, -4
 4395 0002 84B0     		sub	sp, sp, #16
 4396              	.LCFI232:
 4397              		.cfi_def_cfa_offset 24
 4398 0004 00AF     		add	r7, sp, #0
 4399              	.LCFI233:
 4400              		.cfi_def_cfa_register 7
 4401 0006 7860     		str	r0, [r7, #4]
2075:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t dmarequest = 0x00U;
 4402              		.loc 1 2075 0
 4403 0008 0023     		movs	r3, #0
 4404 000a FB60     		str	r3, [r7, #12]
2076:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4405              		.loc 1 2076 0
 4406 000c 7B68     		ldr	r3, [r7, #4]
 4407 000e 9B6B     		ldr	r3, [r3, #56]
 4408 0010 BB60     		str	r3, [r7, #8]
2077:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2078:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2079:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 4409              		.loc 1 2079 0
 4410 0012 BB68     		ldr	r3, [r7, #8]
 4411 0014 1B68     		ldr	r3, [r3]
 4412 0016 5B69     		ldr	r3, [r3, #20]
 4413 0018 03F08003 		and	r3, r3, #128
 4414 001c 002B     		cmp	r3, #0
 4415 001e 14BF     		ite	ne
 4416 0020 0123     		movne	r3, #1
 4417 0022 0023     		moveq	r3, #0
 4418 0024 DBB2     		uxtb	r3, r3
 4419 0026 FB60     		str	r3, [r7, #12]
2080:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 4420              		.loc 1 2080 0
 4421 0028 BB68     		ldr	r3, [r7, #8]
 4422 002a 93F83930 		ldrb	r3, [r3, #57]
 4423 002e DBB2     		uxtb	r3, r3
 4424 0030 212B     		cmp	r3, #33
 4425 0032 08D1     		bne	.L194
 4426              		.loc 1 2080 0 is_stmt 0 discriminator 1
 4427 0034 FB68     		ldr	r3, [r7, #12]
 4428 0036 002B     		cmp	r3, #0
 4429 0038 05D0     		beq	.L194
2081:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2082:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->TxXferCount = 0U;
 4430              		.loc 1 2082 0 is_stmt 1
 4431 003a BB68     		ldr	r3, [r7, #8]
 4432 003c 0022     		movs	r2, #0
 4433 003e DA84     		strh	r2, [r3, #38]	@ movhi
2083:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 4434              		.loc 1 2083 0
 4435 0040 B868     		ldr	r0, [r7, #8]
ARM GAS  /tmp/ccLJIDLw.s 			page 114


 4436 0042 FFF7FEFF 		bl	UART_EndTxTransfer
 4437              	.L194:
2084:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2085:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2086:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2087:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 4438              		.loc 1 2087 0
 4439 0046 BB68     		ldr	r3, [r7, #8]
 4440 0048 1B68     		ldr	r3, [r3]
 4441 004a 5B69     		ldr	r3, [r3, #20]
 4442 004c 03F04003 		and	r3, r3, #64
 4443 0050 002B     		cmp	r3, #0
 4444 0052 14BF     		ite	ne
 4445 0054 0123     		movne	r3, #1
 4446 0056 0023     		moveq	r3, #0
 4447 0058 DBB2     		uxtb	r3, r3
 4448 005a FB60     		str	r3, [r7, #12]
2088:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 4449              		.loc 1 2088 0
 4450 005c BB68     		ldr	r3, [r7, #8]
 4451 005e 93F83A30 		ldrb	r3, [r3, #58]
 4452 0062 DBB2     		uxtb	r3, r3
 4453 0064 222B     		cmp	r3, #34
 4454 0066 08D1     		bne	.L195
 4455              		.loc 1 2088 0 is_stmt 0 discriminator 1
 4456 0068 FB68     		ldr	r3, [r7, #12]
 4457 006a 002B     		cmp	r3, #0
 4458 006c 05D0     		beq	.L195
2089:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2090:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     huart->RxXferCount = 0U;
 4459              		.loc 1 2090 0 is_stmt 1
 4460 006e BB68     		ldr	r3, [r7, #8]
 4461 0070 0022     		movs	r2, #0
 4462 0072 DA85     		strh	r2, [r3, #46]	@ movhi
2091:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 4463              		.loc 1 2091 0
 4464 0074 B868     		ldr	r0, [r7, #8]
 4465 0076 FFF7FEFF 		bl	UART_EndRxTransfer
 4466              	.L195:
2092:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2093:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2094:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 4467              		.loc 1 2094 0
 4468 007a BB68     		ldr	r3, [r7, #8]
 4469 007c DB6B     		ldr	r3, [r3, #60]
 4470 007e 43F01002 		orr	r2, r3, #16
 4471 0082 BB68     		ldr	r3, [r7, #8]
 4472 0084 DA63     		str	r2, [r3, #60]
2095:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4473              		.loc 1 2095 0
 4474 0086 B868     		ldr	r0, [r7, #8]
 4475 0088 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2096:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4476              		.loc 1 2096 0
 4477 008c 00BF     		nop
 4478 008e 1037     		adds	r7, r7, #16
 4479              	.LCFI234:
ARM GAS  /tmp/ccLJIDLw.s 			page 115


 4480              		.cfi_def_cfa_offset 8
 4481 0090 BD46     		mov	sp, r7
 4482              	.LCFI235:
 4483              		.cfi_def_cfa_register 13
 4484              		@ sp needed
 4485 0092 80BD     		pop	{r7, pc}
 4486              		.cfi_endproc
 4487              	.LFE166:
 4489              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4490              		.align	1
 4491              		.syntax unified
 4492              		.thumb
 4493              		.thumb_func
 4494              		.fpu fpv4-sp-d16
 4496              	UART_WaitOnFlagUntilTimeout:
 4497              	.LFB167:
2097:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2098:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2099:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  This function handles UART Communication Timeout.
2100:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2101:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2102:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Flag specifies the UART flag to check.
2103:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Status The new Flag status (SET or RESET).
2104:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Tickstart Tick start value
2105:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  Timeout Timeout duration
2106:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2107:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2108:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, Flag
2109:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4498              		.loc 1 2109 0
 4499              		.cfi_startproc
 4500              		@ args = 4, pretend = 0, frame = 16
 4501              		@ frame_needed = 1, uses_anonymous_args = 0
 4502 0000 80B5     		push	{r7, lr}
 4503              	.LCFI236:
 4504              		.cfi_def_cfa_offset 8
 4505              		.cfi_offset 7, -8
 4506              		.cfi_offset 14, -4
 4507 0002 84B0     		sub	sp, sp, #16
 4508              	.LCFI237:
 4509              		.cfi_def_cfa_offset 24
 4510 0004 00AF     		add	r7, sp, #0
 4511              	.LCFI238:
 4512              		.cfi_def_cfa_register 7
 4513 0006 F860     		str	r0, [r7, #12]
 4514 0008 B960     		str	r1, [r7, #8]
 4515 000a 3B60     		str	r3, [r7]
 4516 000c 1346     		mov	r3, r2
 4517 000e FB71     		strb	r3, [r7, #7]
2110:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Wait until flag is set */
2111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 4518              		.loc 1 2111 0
 4519 0010 2CE0     		b	.L197
 4520              	.L200:
2112:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2113:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /* Check for the Timeout */
2114:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(Timeout != HAL_MAX_DELAY)
ARM GAS  /tmp/ccLJIDLw.s 			page 116


 4521              		.loc 1 2114 0
 4522 0012 BB69     		ldr	r3, [r7, #24]
 4523 0014 B3F1FF3F 		cmp	r3, #-1
 4524 0018 28D0     		beq	.L197
2115:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2116:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 4525              		.loc 1 2116 0
 4526 001a BB69     		ldr	r3, [r7, #24]
 4527 001c 002B     		cmp	r3, #0
 4528 001e 07D0     		beq	.L198
 4529              		.loc 1 2116 0 is_stmt 0 discriminator 1
 4530 0020 FFF7FEFF 		bl	HAL_GetTick
 4531 0024 0246     		mov	r2, r0
 4532 0026 3B68     		ldr	r3, [r7]
 4533 0028 D21A     		subs	r2, r2, r3
 4534 002a BB69     		ldr	r3, [r7, #24]
 4535 002c 9A42     		cmp	r2, r3
 4536 002e 1DD9     		bls	.L197
 4537              	.L198:
2117:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2118:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2119:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4538              		.loc 1 2119 0 is_stmt 1
 4539 0030 FB68     		ldr	r3, [r7, #12]
 4540 0032 1B68     		ldr	r3, [r3]
 4541 0034 FA68     		ldr	r2, [r7, #12]
 4542 0036 1268     		ldr	r2, [r2]
 4543 0038 D268     		ldr	r2, [r2, #12]
 4544 003a 22F4D072 		bic	r2, r2, #416
 4545 003e DA60     		str	r2, [r3, #12]
2120:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4546              		.loc 1 2120 0
 4547 0040 FB68     		ldr	r3, [r7, #12]
 4548 0042 1B68     		ldr	r3, [r3]
 4549 0044 FA68     		ldr	r2, [r7, #12]
 4550 0046 1268     		ldr	r2, [r2]
 4551 0048 5269     		ldr	r2, [r2, #20]
 4552 004a 22F00102 		bic	r2, r2, #1
 4553 004e 5A61     		str	r2, [r3, #20]
2121:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2122:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 4554              		.loc 1 2122 0
 4555 0050 FB68     		ldr	r3, [r7, #12]
 4556 0052 2022     		movs	r2, #32
 4557 0054 83F83920 		strb	r2, [r3, #57]
2123:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4558              		.loc 1 2123 0
 4559 0058 FB68     		ldr	r3, [r7, #12]
 4560 005a 2022     		movs	r2, #32
 4561 005c 83F83A20 		strb	r2, [r3, #58]
2124:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2125:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         /* Process Unlocked */
2126:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 4562              		.loc 1 2126 0
 4563 0060 FB68     		ldr	r3, [r7, #12]
 4564 0062 0022     		movs	r2, #0
 4565 0064 83F83820 		strb	r2, [r3, #56]
ARM GAS  /tmp/ccLJIDLw.s 			page 117


2127:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         
2128:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         return HAL_TIMEOUT;
 4566              		.loc 1 2128 0
 4567 0068 0323     		movs	r3, #3
 4568 006a 0FE0     		b	.L199
 4569              	.L197:
2111:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
 4570              		.loc 1 2111 0
 4571 006c FB68     		ldr	r3, [r7, #12]
 4572 006e 1B68     		ldr	r3, [r3]
 4573 0070 1A68     		ldr	r2, [r3]
 4574 0072 BB68     		ldr	r3, [r7, #8]
 4575 0074 1A40     		ands	r2, r2, r3
 4576 0076 BB68     		ldr	r3, [r7, #8]
 4577 0078 9A42     		cmp	r2, r3
 4578 007a 0CBF     		ite	eq
 4579 007c 0123     		moveq	r3, #1
 4580 007e 0023     		movne	r3, #0
 4581 0080 DBB2     		uxtb	r3, r3
 4582 0082 1A46     		mov	r2, r3
 4583 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4584 0086 9A42     		cmp	r2, r3
 4585 0088 C3D0     		beq	.L200
2129:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2130:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2131:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2132:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2133:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 4586              		.loc 1 2133 0
 4587 008a 0023     		movs	r3, #0
 4588              	.L199:
2134:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4589              		.loc 1 2134 0
 4590 008c 1846     		mov	r0, r3
 4591 008e 1037     		adds	r7, r7, #16
 4592              	.LCFI239:
 4593              		.cfi_def_cfa_offset 8
 4594 0090 BD46     		mov	sp, r7
 4595              	.LCFI240:
 4596              		.cfi_def_cfa_register 13
 4597              		@ sp needed
 4598 0092 80BD     		pop	{r7, pc}
 4599              		.cfi_endproc
 4600              	.LFE167:
 4602              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 4603              		.align	1
 4604              		.syntax unified
 4605              		.thumb
 4606              		.thumb_func
 4607              		.fpu fpv4-sp-d16
 4609              	UART_EndTxTransfer:
 4610              	.LFB168:
2135:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2136:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2137:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2138:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2139:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccLJIDLw.s 			page 118


2140:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2141:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2142:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4611              		.loc 1 2142 0
 4612              		.cfi_startproc
 4613              		@ args = 0, pretend = 0, frame = 8
 4614              		@ frame_needed = 1, uses_anonymous_args = 0
 4615              		@ link register save eliminated.
 4616 0000 80B4     		push	{r7}
 4617              	.LCFI241:
 4618              		.cfi_def_cfa_offset 4
 4619              		.cfi_offset 7, -4
 4620 0002 83B0     		sub	sp, sp, #12
 4621              	.LCFI242:
 4622              		.cfi_def_cfa_offset 16
 4623 0004 00AF     		add	r7, sp, #0
 4624              	.LCFI243:
 4625              		.cfi_def_cfa_register 7
 4626 0006 7860     		str	r0, [r7, #4]
2143:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2144:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 4627              		.loc 1 2144 0
 4628 0008 7B68     		ldr	r3, [r7, #4]
 4629 000a 1B68     		ldr	r3, [r3]
 4630 000c 7A68     		ldr	r2, [r7, #4]
 4631 000e 1268     		ldr	r2, [r2]
 4632 0010 D268     		ldr	r2, [r2, #12]
 4633 0012 22F0C002 		bic	r2, r2, #192
 4634 0016 DA60     		str	r2, [r3, #12]
2145:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2146:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2147:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4635              		.loc 1 2147 0
 4636 0018 7B68     		ldr	r3, [r7, #4]
 4637 001a 2022     		movs	r2, #32
 4638 001c 83F83920 		strb	r2, [r3, #57]
2148:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4639              		.loc 1 2148 0
 4640 0020 00BF     		nop
 4641 0022 0C37     		adds	r7, r7, #12
 4642              	.LCFI244:
 4643              		.cfi_def_cfa_offset 4
 4644 0024 BD46     		mov	sp, r7
 4645              	.LCFI245:
 4646              		.cfi_def_cfa_register 13
 4647              		@ sp needed
 4648 0026 5DF8047B 		ldr	r7, [sp], #4
 4649              	.LCFI246:
 4650              		.cfi_restore 7
 4651              		.cfi_def_cfa_offset 0
 4652 002a 7047     		bx	lr
 4653              		.cfi_endproc
 4654              	.LFE168:
 4656              		.section	.text.UART_EndRxTransfer,"ax",%progbits
 4657              		.align	1
 4658              		.syntax unified
 4659              		.thumb
ARM GAS  /tmp/ccLJIDLw.s 			page 119


 4660              		.thumb_func
 4661              		.fpu fpv4-sp-d16
 4663              	UART_EndRxTransfer:
 4664              	.LFB169:
2149:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2150:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2151:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2152:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart UART handle.
2153:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2154:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2155:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2156:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4665              		.loc 1 2156 0
 4666              		.cfi_startproc
 4667              		@ args = 0, pretend = 0, frame = 8
 4668              		@ frame_needed = 1, uses_anonymous_args = 0
 4669              		@ link register save eliminated.
 4670 0000 80B4     		push	{r7}
 4671              	.LCFI247:
 4672              		.cfi_def_cfa_offset 4
 4673              		.cfi_offset 7, -4
 4674 0002 83B0     		sub	sp, sp, #12
 4675              	.LCFI248:
 4676              		.cfi_def_cfa_offset 16
 4677 0004 00AF     		add	r7, sp, #0
 4678              	.LCFI249:
 4679              		.cfi_def_cfa_register 7
 4680 0006 7860     		str	r0, [r7, #4]
2157:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2158:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 4681              		.loc 1 2158 0
 4682 0008 7B68     		ldr	r3, [r7, #4]
 4683 000a 1B68     		ldr	r3, [r3]
 4684 000c 7A68     		ldr	r2, [r7, #4]
 4685 000e 1268     		ldr	r2, [r2]
 4686 0010 D268     		ldr	r2, [r2, #12]
 4687 0012 22F49072 		bic	r2, r2, #288
 4688 0016 DA60     		str	r2, [r3, #12]
2159:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4689              		.loc 1 2159 0
 4690 0018 7B68     		ldr	r3, [r7, #4]
 4691 001a 1B68     		ldr	r3, [r3]
 4692 001c 7A68     		ldr	r2, [r7, #4]
 4693 001e 1268     		ldr	r2, [r2]
 4694 0020 5269     		ldr	r2, [r2, #20]
 4695 0022 22F00102 		bic	r2, r2, #1
 4696 0026 5A61     		str	r2, [r3, #20]
2160:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2161:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2162:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4697              		.loc 1 2162 0
 4698 0028 7B68     		ldr	r3, [r7, #4]
 4699 002a 2022     		movs	r2, #32
 4700 002c 83F83A20 		strb	r2, [r3, #58]
2163:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4701              		.loc 1 2163 0
 4702 0030 00BF     		nop
ARM GAS  /tmp/ccLJIDLw.s 			page 120


 4703 0032 0C37     		adds	r7, r7, #12
 4704              	.LCFI250:
 4705              		.cfi_def_cfa_offset 4
 4706 0034 BD46     		mov	sp, r7
 4707              	.LCFI251:
 4708              		.cfi_def_cfa_register 13
 4709              		@ sp needed
 4710 0036 5DF8047B 		ldr	r7, [sp], #4
 4711              	.LCFI252:
 4712              		.cfi_restore 7
 4713              		.cfi_def_cfa_offset 0
 4714 003a 7047     		bx	lr
 4715              		.cfi_endproc
 4716              	.LFE169:
 4718              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 4719              		.align	1
 4720              		.syntax unified
 4721              		.thumb
 4722              		.thumb_func
 4723              		.fpu fpv4-sp-d16
 4725              	UART_DMAAbortOnError:
 4726              	.LFB170:
2164:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2165:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2166:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2167:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2168:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2169:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2170:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2171:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2172:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4727              		.loc 1 2172 0
 4728              		.cfi_startproc
 4729              		@ args = 0, pretend = 0, frame = 16
 4730              		@ frame_needed = 1, uses_anonymous_args = 0
 4731 0000 80B5     		push	{r7, lr}
 4732              	.LCFI253:
 4733              		.cfi_def_cfa_offset 8
 4734              		.cfi_offset 7, -8
 4735              		.cfi_offset 14, -4
 4736 0002 84B0     		sub	sp, sp, #16
 4737              	.LCFI254:
 4738              		.cfi_def_cfa_offset 24
 4739 0004 00AF     		add	r7, sp, #0
 4740              	.LCFI255:
 4741              		.cfi_def_cfa_register 7
 4742 0006 7860     		str	r0, [r7, #4]
2173:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4743              		.loc 1 2173 0
 4744 0008 7B68     		ldr	r3, [r7, #4]
 4745 000a 9B6B     		ldr	r3, [r3, #56]
 4746 000c FB60     		str	r3, [r7, #12]
2174:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0U;
 4747              		.loc 1 2174 0
 4748 000e FB68     		ldr	r3, [r7, #12]
 4749 0010 0022     		movs	r2, #0
 4750 0012 DA85     		strh	r2, [r3, #46]	@ movhi
ARM GAS  /tmp/ccLJIDLw.s 			page 121


2175:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0U;
 4751              		.loc 1 2175 0
 4752 0014 FB68     		ldr	r3, [r7, #12]
 4753 0016 0022     		movs	r2, #0
 4754 0018 DA84     		strh	r2, [r3, #38]	@ movhi
2176:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2177:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 4755              		.loc 1 2177 0
 4756 001a F868     		ldr	r0, [r7, #12]
 4757 001c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2178:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4758              		.loc 1 2178 0
 4759 0020 00BF     		nop
 4760 0022 1037     		adds	r7, r7, #16
 4761              	.LCFI256:
 4762              		.cfi_def_cfa_offset 8
 4763 0024 BD46     		mov	sp, r7
 4764              	.LCFI257:
 4765              		.cfi_def_cfa_register 13
 4766              		@ sp needed
 4767 0026 80BD     		pop	{r7, pc}
 4768              		.cfi_endproc
 4769              	.LFE170:
 4771              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 4772              		.align	1
 4773              		.syntax unified
 4774              		.thumb
 4775              		.thumb_func
 4776              		.fpu fpv4-sp-d16
 4778              	UART_DMATxAbortCallback:
 4779              	.LFB171:
2179:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2180:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2181:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2182:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2183:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2184:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2185:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2186:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2187:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2188:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2189:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4780              		.loc 1 2189 0
 4781              		.cfi_startproc
 4782              		@ args = 0, pretend = 0, frame = 16
 4783              		@ frame_needed = 1, uses_anonymous_args = 0
 4784 0000 80B5     		push	{r7, lr}
 4785              	.LCFI258:
 4786              		.cfi_def_cfa_offset 8
 4787              		.cfi_offset 7, -8
 4788              		.cfi_offset 14, -4
 4789 0002 84B0     		sub	sp, sp, #16
 4790              	.LCFI259:
 4791              		.cfi_def_cfa_offset 24
 4792 0004 00AF     		add	r7, sp, #0
 4793              	.LCFI260:
 4794              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccLJIDLw.s 			page 122


 4795 0006 7860     		str	r0, [r7, #4]
2190:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4796              		.loc 1 2190 0
 4797 0008 7B68     		ldr	r3, [r7, #4]
 4798 000a 9B6B     		ldr	r3, [r3, #56]
 4799 000c FB60     		str	r3, [r7, #12]
2191:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2192:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 4800              		.loc 1 2192 0
 4801 000e FB68     		ldr	r3, [r7, #12]
 4802 0010 1B6B     		ldr	r3, [r3, #48]
 4803 0012 0022     		movs	r2, #0
 4804 0014 1A65     		str	r2, [r3, #80]
2193:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2194:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2195:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 4805              		.loc 1 2195 0
 4806 0016 FB68     		ldr	r3, [r7, #12]
 4807 0018 5B6B     		ldr	r3, [r3, #52]
 4808 001a 002B     		cmp	r3, #0
 4809 001c 04D0     		beq	.L205
2196:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2197:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmarx->XferAbortCallback != NULL)
 4810              		.loc 1 2197 0
 4811 001e FB68     		ldr	r3, [r7, #12]
 4812 0020 5B6B     		ldr	r3, [r3, #52]
 4813 0022 1B6D     		ldr	r3, [r3, #80]
 4814 0024 002B     		cmp	r3, #0
 4815 0026 14D1     		bne	.L207
 4816              	.L205:
2198:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
2200:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2201:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2202:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2203:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2204:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4817              		.loc 1 2204 0
 4818 0028 FB68     		ldr	r3, [r7, #12]
 4819 002a 0022     		movs	r2, #0
 4820 002c DA84     		strh	r2, [r3, #38]	@ movhi
2205:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4821              		.loc 1 2205 0
 4822 002e FB68     		ldr	r3, [r7, #12]
 4823 0030 0022     		movs	r2, #0
 4824 0032 DA85     		strh	r2, [r3, #46]	@ movhi
2206:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2207:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
2208:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4825              		.loc 1 2208 0
 4826 0034 FB68     		ldr	r3, [r7, #12]
 4827 0036 0022     		movs	r2, #0
 4828 0038 DA63     		str	r2, [r3, #60]
2209:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2210:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2211:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4829              		.loc 1 2211 0
ARM GAS  /tmp/ccLJIDLw.s 			page 123


 4830 003a FB68     		ldr	r3, [r7, #12]
 4831 003c 2022     		movs	r2, #32
 4832 003e 83F83920 		strb	r2, [r3, #57]
2212:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4833              		.loc 1 2212 0
 4834 0042 FB68     		ldr	r3, [r7, #12]
 4835 0044 2022     		movs	r2, #32
 4836 0046 83F83A20 		strb	r2, [r3, #58]
2213:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2214:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2215:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4837              		.loc 1 2215 0
 4838 004a F868     		ldr	r0, [r7, #12]
 4839 004c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4840 0050 00E0     		b	.L204
 4841              	.L207:
2199:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 4842              		.loc 1 2199 0
 4843 0052 00BF     		nop
 4844              	.L204:
2216:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4845              		.loc 1 2216 0
 4846 0054 1037     		adds	r7, r7, #16
 4847              	.LCFI261:
 4848              		.cfi_def_cfa_offset 8
 4849 0056 BD46     		mov	sp, r7
 4850              	.LCFI262:
 4851              		.cfi_def_cfa_register 13
 4852              		@ sp needed
 4853 0058 80BD     		pop	{r7, pc}
 4854              		.cfi_endproc
 4855              	.LFE171:
 4857              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 4858              		.align	1
 4859              		.syntax unified
 4860              		.thumb
 4861              		.thumb_func
 4862              		.fpu fpv4-sp-d16
 4864              	UART_DMARxAbortCallback:
 4865              	.LFB172:
2217:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2218:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2219:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2220:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2221:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2222:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2223:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2224:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2225:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2226:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2227:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4866              		.loc 1 2227 0
 4867              		.cfi_startproc
 4868              		@ args = 0, pretend = 0, frame = 16
 4869              		@ frame_needed = 1, uses_anonymous_args = 0
 4870 0000 80B5     		push	{r7, lr}
 4871              	.LCFI263:
ARM GAS  /tmp/ccLJIDLw.s 			page 124


 4872              		.cfi_def_cfa_offset 8
 4873              		.cfi_offset 7, -8
 4874              		.cfi_offset 14, -4
 4875 0002 84B0     		sub	sp, sp, #16
 4876              	.LCFI264:
 4877              		.cfi_def_cfa_offset 24
 4878 0004 00AF     		add	r7, sp, #0
 4879              	.LCFI265:
 4880              		.cfi_def_cfa_register 7
 4881 0006 7860     		str	r0, [r7, #4]
2228:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4882              		.loc 1 2228 0
 4883 0008 7B68     		ldr	r3, [r7, #4]
 4884 000a 9B6B     		ldr	r3, [r3, #56]
 4885 000c FB60     		str	r3, [r7, #12]
2229:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2230:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 4886              		.loc 1 2230 0
 4887 000e FB68     		ldr	r3, [r7, #12]
 4888 0010 5B6B     		ldr	r3, [r3, #52]
 4889 0012 0022     		movs	r2, #0
 4890 0014 1A65     		str	r2, [r3, #80]
2231:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2232:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2233:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 4891              		.loc 1 2233 0
 4892 0016 FB68     		ldr	r3, [r7, #12]
 4893 0018 1B6B     		ldr	r3, [r3, #48]
 4894 001a 002B     		cmp	r3, #0
 4895 001c 04D0     		beq	.L209
2234:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2235:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->hdmatx->XferAbortCallback != NULL)
 4896              		.loc 1 2235 0
 4897 001e FB68     		ldr	r3, [r7, #12]
 4898 0020 1B6B     		ldr	r3, [r3, #48]
 4899 0022 1B6D     		ldr	r3, [r3, #80]
 4900 0024 002B     		cmp	r3, #0
 4901 0026 14D1     		bne	.L211
 4902              	.L209:
2236:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return;
2238:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2239:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2240:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2241:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2242:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4903              		.loc 1 2242 0
 4904 0028 FB68     		ldr	r3, [r7, #12]
 4905 002a 0022     		movs	r2, #0
 4906 002c DA84     		strh	r2, [r3, #38]	@ movhi
2243:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 4907              		.loc 1 2243 0
 4908 002e FB68     		ldr	r3, [r7, #12]
 4909 0030 0022     		movs	r2, #0
 4910 0032 DA85     		strh	r2, [r3, #46]	@ movhi
2244:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2245:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Reset ErrorCode */
ARM GAS  /tmp/ccLJIDLw.s 			page 125


2246:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4911              		.loc 1 2246 0
 4912 0034 FB68     		ldr	r3, [r7, #12]
 4913 0036 0022     		movs	r2, #0
 4914 0038 DA63     		str	r2, [r3, #60]
2247:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2248:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2249:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4915              		.loc 1 2249 0
 4916 003a FB68     		ldr	r3, [r7, #12]
 4917 003c 2022     		movs	r2, #32
 4918 003e 83F83920 		strb	r2, [r3, #57]
2250:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4919              		.loc 1 2250 0
 4920 0042 FB68     		ldr	r3, [r7, #12]
 4921 0044 2022     		movs	r2, #32
 4922 0046 83F83A20 		strb	r2, [r3, #58]
2251:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2252:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2253:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 4923              		.loc 1 2253 0
 4924 004a F868     		ldr	r0, [r7, #12]
 4925 004c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 4926 0050 00E0     		b	.L208
 4927              	.L211:
2237:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 4928              		.loc 1 2237 0
 4929 0052 00BF     		nop
 4930              	.L208:
2254:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4931              		.loc 1 2254 0
 4932 0054 1037     		adds	r7, r7, #16
 4933              	.LCFI266:
 4934              		.cfi_def_cfa_offset 8
 4935 0056 BD46     		mov	sp, r7
 4936              	.LCFI267:
 4937              		.cfi_def_cfa_register 13
 4938              		@ sp needed
 4939 0058 80BD     		pop	{r7, pc}
 4940              		.cfi_endproc
 4941              	.LFE172:
 4943              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 4944              		.align	1
 4945              		.syntax unified
 4946              		.thumb
 4947              		.thumb_func
 4948              		.fpu fpv4-sp-d16
 4950              	UART_DMATxOnlyAbortCallback:
 4951              	.LFB173:
2255:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2256:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2257:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2258:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2259:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2260:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2261:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2262:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccLJIDLw.s 			page 126


2263:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2264:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2265:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 4952              		.loc 1 2265 0
 4953              		.cfi_startproc
 4954              		@ args = 0, pretend = 0, frame = 16
 4955              		@ frame_needed = 1, uses_anonymous_args = 0
 4956 0000 80B5     		push	{r7, lr}
 4957              	.LCFI268:
 4958              		.cfi_def_cfa_offset 8
 4959              		.cfi_offset 7, -8
 4960              		.cfi_offset 14, -4
 4961 0002 84B0     		sub	sp, sp, #16
 4962              	.LCFI269:
 4963              		.cfi_def_cfa_offset 24
 4964 0004 00AF     		add	r7, sp, #0
 4965              	.LCFI270:
 4966              		.cfi_def_cfa_register 7
 4967 0006 7860     		str	r0, [r7, #4]
2266:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4968              		.loc 1 2266 0
 4969 0008 7B68     		ldr	r3, [r7, #4]
 4970 000a 9B6B     		ldr	r3, [r3, #56]
 4971 000c FB60     		str	r3, [r7, #12]
2267:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2268:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->TxXferCount = 0x00U;
 4972              		.loc 1 2268 0
 4973 000e FB68     		ldr	r3, [r7, #12]
 4974 0010 0022     		movs	r2, #0
 4975 0012 DA84     		strh	r2, [r3, #38]	@ movhi
2269:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2270:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2271:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4976              		.loc 1 2271 0
 4977 0014 FB68     		ldr	r3, [r7, #12]
 4978 0016 2022     		movs	r2, #32
 4979 0018 83F83920 		strb	r2, [r3, #57]
2272:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2273:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2274:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 4980              		.loc 1 2274 0
 4981 001c F868     		ldr	r0, [r7, #12]
 4982 001e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
2275:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 4983              		.loc 1 2275 0
 4984 0022 00BF     		nop
 4985 0024 1037     		adds	r7, r7, #16
 4986              	.LCFI271:
 4987              		.cfi_def_cfa_offset 8
 4988 0026 BD46     		mov	sp, r7
 4989              	.LCFI272:
 4990              		.cfi_def_cfa_register 13
 4991              		@ sp needed
 4992 0028 80BD     		pop	{r7, pc}
 4993              		.cfi_endproc
 4994              	.LFE173:
 4996              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
ARM GAS  /tmp/ccLJIDLw.s 			page 127


 4997              		.align	1
 4998              		.syntax unified
 4999              		.thumb
 5000              		.thumb_func
 5001              		.fpu fpv4-sp-d16
 5003              	UART_DMARxOnlyAbortCallback:
 5004              	.LFB174:
2276:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2277:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2278:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2279:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2280:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2281:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2282:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  hdma DMA handle.
2283:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2284:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2285:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2286:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5005              		.loc 1 2286 0
 5006              		.cfi_startproc
 5007              		@ args = 0, pretend = 0, frame = 16
 5008              		@ frame_needed = 1, uses_anonymous_args = 0
 5009 0000 80B5     		push	{r7, lr}
 5010              	.LCFI273:
 5011              		.cfi_def_cfa_offset 8
 5012              		.cfi_offset 7, -8
 5013              		.cfi_offset 14, -4
 5014 0002 84B0     		sub	sp, sp, #16
 5015              	.LCFI274:
 5016              		.cfi_def_cfa_offset 24
 5017 0004 00AF     		add	r7, sp, #0
 5018              	.LCFI275:
 5019              		.cfi_def_cfa_register 7
 5020 0006 7860     		str	r0, [r7, #4]
2287:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 5021              		.loc 1 2287 0
 5022 0008 7B68     		ldr	r3, [r7, #4]
 5023 000a 9B6B     		ldr	r3, [r3, #56]
 5024 000c FB60     		str	r3, [r7, #12]
2288:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2289:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxXferCount = 0x00U;
 5025              		.loc 1 2289 0
 5026 000e FB68     		ldr	r3, [r7, #12]
 5027 0010 0022     		movs	r2, #0
 5028 0012 DA85     		strh	r2, [r3, #46]	@ movhi
2290:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2291:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2292:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5029              		.loc 1 2292 0
 5030 0014 FB68     		ldr	r3, [r7, #12]
 5031 0016 2022     		movs	r2, #32
 5032 0018 83F83A20 		strb	r2, [r3, #58]
2293:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2294:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Call user Abort complete callback */
2295:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 5033              		.loc 1 2295 0
 5034 001c F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccLJIDLw.s 			page 128


 5035 001e FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
2296:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5036              		.loc 1 2296 0
 5037 0022 00BF     		nop
 5038 0024 1037     		adds	r7, r7, #16
 5039              	.LCFI276:
 5040              		.cfi_def_cfa_offset 8
 5041 0026 BD46     		mov	sp, r7
 5042              	.LCFI277:
 5043              		.cfi_def_cfa_register 13
 5044              		@ sp needed
 5045 0028 80BD     		pop	{r7, pc}
 5046              		.cfi_endproc
 5047              	.LFE174:
 5049              		.section	.text.UART_Transmit_IT,"ax",%progbits
 5050              		.align	1
 5051              		.syntax unified
 5052              		.thumb
 5053              		.thumb_func
 5054              		.fpu fpv4-sp-d16
 5056              	UART_Transmit_IT:
 5057              	.LFB175:
2297:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2298:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2299:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Sends an amount of data in non blocking mode.
2300:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2301:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2302:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2303:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2304:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2305:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5058              		.loc 1 2305 0
 5059              		.cfi_startproc
 5060              		@ args = 0, pretend = 0, frame = 16
 5061              		@ frame_needed = 1, uses_anonymous_args = 0
 5062              		@ link register save eliminated.
 5063 0000 80B4     		push	{r7}
 5064              	.LCFI278:
 5065              		.cfi_def_cfa_offset 4
 5066              		.cfi_offset 7, -4
 5067 0002 85B0     		sub	sp, sp, #20
 5068              	.LCFI279:
 5069              		.cfi_def_cfa_offset 24
 5070 0004 00AF     		add	r7, sp, #0
 5071              	.LCFI280:
 5072              		.cfi_def_cfa_register 7
 5073 0006 7860     		str	r0, [r7, #4]
2306:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
2307:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2308:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
2309:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 5074              		.loc 1 2309 0
 5075 0008 7B68     		ldr	r3, [r7, #4]
 5076 000a 93F83930 		ldrb	r3, [r3, #57]
 5077 000e DBB2     		uxtb	r3, r3
 5078 0010 212B     		cmp	r3, #33
 5079 0012 43D1     		bne	.L215
ARM GAS  /tmp/ccLJIDLw.s 			page 129


2310:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2311:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 5080              		.loc 1 2311 0
 5081 0014 7B68     		ldr	r3, [r7, #4]
 5082 0016 9B68     		ldr	r3, [r3, #8]
 5083 0018 B3F5805F 		cmp	r3, #4096
 5084 001c 19D1     		bne	.L216
2312:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2313:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       tmp = (uint16_t*) huart->pTxBuffPtr;
 5085              		.loc 1 2313 0
 5086 001e 7B68     		ldr	r3, [r7, #4]
 5087 0020 1B6A     		ldr	r3, [r3, #32]
 5088 0022 FB60     		str	r3, [r7, #12]
2314:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 5089              		.loc 1 2314 0
 5090 0024 7B68     		ldr	r3, [r7, #4]
 5091 0026 1B68     		ldr	r3, [r3]
 5092 0028 FA68     		ldr	r2, [r7, #12]
 5093 002a 1288     		ldrh	r2, [r2]
 5094 002c C2F30802 		ubfx	r2, r2, #0, #9
 5095 0030 5A60     		str	r2, [r3, #4]
2315:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5096              		.loc 1 2315 0
 5097 0032 7B68     		ldr	r3, [r7, #4]
 5098 0034 1B69     		ldr	r3, [r3, #16]
 5099 0036 002B     		cmp	r3, #0
 5100 0038 05D1     		bne	.L217
2316:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2317:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 5101              		.loc 1 2317 0
 5102 003a 7B68     		ldr	r3, [r7, #4]
 5103 003c 1B6A     		ldr	r3, [r3, #32]
 5104 003e 9A1C     		adds	r2, r3, #2
 5105 0040 7B68     		ldr	r3, [r7, #4]
 5106 0042 1A62     		str	r2, [r3, #32]
 5107 0044 0EE0     		b	.L219
 5108              	.L217:
2318:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2319:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2320:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2321:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pTxBuffPtr += 1U;
 5109              		.loc 1 2321 0
 5110 0046 7B68     		ldr	r3, [r7, #4]
 5111 0048 1B6A     		ldr	r3, [r3, #32]
 5112 004a 5A1C     		adds	r2, r3, #1
 5113 004c 7B68     		ldr	r3, [r7, #4]
 5114 004e 1A62     		str	r2, [r3, #32]
 5115 0050 08E0     		b	.L219
 5116              	.L216:
2322:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2323:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     } 
2324:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2325:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2326:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 5117              		.loc 1 2326 0
 5118 0052 7B68     		ldr	r3, [r7, #4]
 5119 0054 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccLJIDLw.s 			page 130


 5120 0056 7B68     		ldr	r3, [r7, #4]
 5121 0058 1B6A     		ldr	r3, [r3, #32]
 5122 005a 581C     		adds	r0, r3, #1
 5123 005c 7968     		ldr	r1, [r7, #4]
 5124 005e 0862     		str	r0, [r1, #32]
 5125 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5126 0062 5360     		str	r3, [r2, #4]
 5127              	.L219:
2327:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2328:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2329:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(--huart->TxXferCount == 0U)
 5128              		.loc 1 2329 0
 5129 0064 7B68     		ldr	r3, [r7, #4]
 5130 0066 DB8C     		ldrh	r3, [r3, #38]	@ movhi
 5131 0068 9BB2     		uxth	r3, r3
 5132 006a 013B     		subs	r3, r3, #1
 5133 006c 9BB2     		uxth	r3, r3
 5134 006e 7A68     		ldr	r2, [r7, #4]
 5135 0070 1946     		mov	r1, r3	@ movhi
 5136 0072 D184     		strh	r1, [r2, #38]	@ movhi
 5137 0074 002B     		cmp	r3, #0
 5138 0076 0FD1     		bne	.L220
2330:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2331:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Transmit Complete Interrupt */
2332:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 5139              		.loc 1 2332 0
 5140 0078 7B68     		ldr	r3, [r7, #4]
 5141 007a 1B68     		ldr	r3, [r3]
 5142 007c 7A68     		ldr	r2, [r7, #4]
 5143 007e 1268     		ldr	r2, [r2]
 5144 0080 D268     		ldr	r2, [r2, #12]
 5145 0082 22F08002 		bic	r2, r2, #128
 5146 0086 DA60     		str	r2, [r3, #12]
2333:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2334:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */    
2335:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5147              		.loc 1 2335 0
 5148 0088 7B68     		ldr	r3, [r7, #4]
 5149 008a 1B68     		ldr	r3, [r3]
 5150 008c 7A68     		ldr	r2, [r7, #4]
 5151 008e 1268     		ldr	r2, [r2]
 5152 0090 D268     		ldr	r2, [r2, #12]
 5153 0092 42F04002 		orr	r2, r2, #64
 5154 0096 DA60     		str	r2, [r3, #12]
 5155              	.L220:
2336:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2337:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 5156              		.loc 1 2337 0
 5157 0098 0023     		movs	r3, #0
 5158 009a 00E0     		b	.L221
 5159              	.L215:
2338:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2339:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2340:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2341:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 5160              		.loc 1 2341 0
 5161 009c 0223     		movs	r3, #2
ARM GAS  /tmp/ccLJIDLw.s 			page 131


 5162              	.L221:
2342:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2343:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5163              		.loc 1 2343 0
 5164 009e 1846     		mov	r0, r3
 5165 00a0 1437     		adds	r7, r7, #20
 5166              	.LCFI281:
 5167              		.cfi_def_cfa_offset 4
 5168 00a2 BD46     		mov	sp, r7
 5169              	.LCFI282:
 5170              		.cfi_def_cfa_register 13
 5171              		@ sp needed
 5172 00a4 5DF8047B 		ldr	r7, [sp], #4
 5173              	.LCFI283:
 5174              		.cfi_restore 7
 5175              		.cfi_def_cfa_offset 0
 5176 00a8 7047     		bx	lr
 5177              		.cfi_endproc
 5178              	.LFE175:
 5180              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 5181              		.align	1
 5182              		.syntax unified
 5183              		.thumb
 5184              		.thumb_func
 5185              		.fpu fpv4-sp-d16
 5187              	UART_EndTransmit_IT:
 5188              	.LFB176:
2344:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2345:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2346:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Wraps up transmission in non blocking mode.
2347:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2348:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2349:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2350:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2351:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2352:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5189              		.loc 1 2352 0
 5190              		.cfi_startproc
 5191              		@ args = 0, pretend = 0, frame = 8
 5192              		@ frame_needed = 1, uses_anonymous_args = 0
 5193 0000 80B5     		push	{r7, lr}
 5194              	.LCFI284:
 5195              		.cfi_def_cfa_offset 8
 5196              		.cfi_offset 7, -8
 5197              		.cfi_offset 14, -4
 5198 0002 82B0     		sub	sp, sp, #8
 5199              	.LCFI285:
 5200              		.cfi_def_cfa_offset 16
 5201 0004 00AF     		add	r7, sp, #0
 5202              	.LCFI286:
 5203              		.cfi_def_cfa_register 7
 5204 0006 7860     		str	r0, [r7, #4]
2353:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */    
2354:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5205              		.loc 1 2354 0
 5206 0008 7B68     		ldr	r3, [r7, #4]
 5207 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccLJIDLw.s 			page 132


 5208 000c 7A68     		ldr	r2, [r7, #4]
 5209 000e 1268     		ldr	r2, [r2]
 5210 0010 D268     		ldr	r2, [r2, #12]
 5211 0012 22F04002 		bic	r2, r2, #64
 5212 0016 DA60     		str	r2, [r3, #12]
2355:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2356:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2357:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5213              		.loc 1 2357 0
 5214 0018 7B68     		ldr	r3, [r7, #4]
 5215 001a 2022     		movs	r2, #32
 5216 001c 83F83920 		strb	r2, [r3, #57]
2358:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     
2359:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 5217              		.loc 1 2359 0
 5218 0020 7868     		ldr	r0, [r7, #4]
 5219 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
2360:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2361:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   return HAL_OK;
 5220              		.loc 1 2361 0
 5221 0026 0023     		movs	r3, #0
2362:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5222              		.loc 1 2362 0
 5223 0028 1846     		mov	r0, r3
 5224 002a 0837     		adds	r7, r7, #8
 5225              	.LCFI287:
 5226              		.cfi_def_cfa_offset 8
 5227 002c BD46     		mov	sp, r7
 5228              	.LCFI288:
 5229              		.cfi_def_cfa_register 13
 5230              		@ sp needed
 5231 002e 80BD     		pop	{r7, pc}
 5232              		.cfi_endproc
 5233              	.LFE176:
 5235              		.section	.text.UART_Receive_IT,"ax",%progbits
 5236              		.align	1
 5237              		.syntax unified
 5238              		.thumb
 5239              		.thumb_func
 5240              		.fpu fpv4-sp-d16
 5242              	UART_Receive_IT:
 5243              	.LFB177:
2363:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2364:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2365:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Receives an amount of data in non blocking mode 
2366:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2367:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2368:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval HAL status
2369:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2370:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2371:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5244              		.loc 1 2371 0
 5245              		.cfi_startproc
 5246              		@ args = 0, pretend = 0, frame = 16
 5247              		@ frame_needed = 1, uses_anonymous_args = 0
 5248 0000 80B5     		push	{r7, lr}
 5249              	.LCFI289:
ARM GAS  /tmp/ccLJIDLw.s 			page 133


 5250              		.cfi_def_cfa_offset 8
 5251              		.cfi_offset 7, -8
 5252              		.cfi_offset 14, -4
 5253 0002 84B0     		sub	sp, sp, #16
 5254              	.LCFI290:
 5255              		.cfi_def_cfa_offset 24
 5256 0004 00AF     		add	r7, sp, #0
 5257              	.LCFI291:
 5258              		.cfi_def_cfa_register 7
 5259 0006 7860     		str	r0, [r7, #4]
2372:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint16_t* tmp;
2373:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2374:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2375:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 5260              		.loc 1 2375 0
 5261 0008 7B68     		ldr	r3, [r7, #4]
 5262 000a 93F83A30 		ldrb	r3, [r3, #58]
 5263 000e DBB2     		uxtb	r3, r3
 5264 0010 222B     		cmp	r3, #34
 5265 0012 69D1     		bne	.L225
2376:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2377:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 5266              		.loc 1 2377 0
 5267 0014 7B68     		ldr	r3, [r7, #4]
 5268 0016 9B68     		ldr	r3, [r3, #8]
 5269 0018 B3F5805F 		cmp	r3, #4096
 5270 001c 23D1     		bne	.L226
2378:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2379:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr;
 5271              		.loc 1 2379 0
 5272 001e 7B68     		ldr	r3, [r7, #4]
 5273 0020 9B6A     		ldr	r3, [r3, #40]
 5274 0022 FB60     		str	r3, [r7, #12]
2380:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5275              		.loc 1 2380 0
 5276 0024 7B68     		ldr	r3, [r7, #4]
 5277 0026 1B69     		ldr	r3, [r3, #16]
 5278 0028 002B     		cmp	r3, #0
 5279 002a 0ED1     		bne	.L227
2381:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2382:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 5280              		.loc 1 2382 0
 5281 002c 7B68     		ldr	r3, [r7, #4]
 5282 002e 1B68     		ldr	r3, [r3]
 5283 0030 5B68     		ldr	r3, [r3, #4]
 5284 0032 9BB2     		uxth	r3, r3
 5285 0034 C3F30803 		ubfx	r3, r3, #0, #9
 5286 0038 9AB2     		uxth	r2, r3
 5287 003a FB68     		ldr	r3, [r7, #12]
 5288 003c 1A80     		strh	r2, [r3]	@ movhi
2383:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pRxBuffPtr += 2U;
 5289              		.loc 1 2383 0
 5290 003e 7B68     		ldr	r3, [r7, #4]
 5291 0040 9B6A     		ldr	r3, [r3, #40]
 5292 0042 9A1C     		adds	r2, r3, #2
 5293 0044 7B68     		ldr	r3, [r7, #4]
 5294 0046 9A62     		str	r2, [r3, #40]
ARM GAS  /tmp/ccLJIDLw.s 			page 134


 5295 0048 29E0     		b	.L229
 5296              	.L227:
2384:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2385:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2386:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2387:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 5297              		.loc 1 2387 0
 5298 004a 7B68     		ldr	r3, [r7, #4]
 5299 004c 1B68     		ldr	r3, [r3]
 5300 004e 5B68     		ldr	r3, [r3, #4]
 5301 0050 9BB2     		uxth	r3, r3
 5302 0052 DBB2     		uxtb	r3, r3
 5303 0054 9AB2     		uxth	r2, r3
 5304 0056 FB68     		ldr	r3, [r7, #12]
 5305 0058 1A80     		strh	r2, [r3]	@ movhi
2388:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         huart->pRxBuffPtr += 1U;
 5306              		.loc 1 2388 0
 5307 005a 7B68     		ldr	r3, [r7, #4]
 5308 005c 9B6A     		ldr	r3, [r3, #40]
 5309 005e 5A1C     		adds	r2, r3, #1
 5310 0060 7B68     		ldr	r3, [r7, #4]
 5311 0062 9A62     		str	r2, [r3, #40]
 5312 0064 1BE0     		b	.L229
 5313              	.L226:
2389:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2390:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2391:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2392:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2393:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       if(huart->Init.Parity == UART_PARITY_NONE)
 5314              		.loc 1 2393 0
 5315 0066 7B68     		ldr	r3, [r7, #4]
 5316 0068 1B69     		ldr	r3, [r3, #16]
 5317 006a 002B     		cmp	r3, #0
 5318 006c 0AD1     		bne	.L230
2394:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2395:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 5319              		.loc 1 2395 0
 5320 006e 7B68     		ldr	r3, [r7, #4]
 5321 0070 9B6A     		ldr	r3, [r3, #40]
 5322 0072 591C     		adds	r1, r3, #1
 5323 0074 7A68     		ldr	r2, [r7, #4]
 5324 0076 9162     		str	r1, [r2, #40]
 5325 0078 7A68     		ldr	r2, [r7, #4]
 5326 007a 1268     		ldr	r2, [r2]
 5327 007c 5268     		ldr	r2, [r2, #4]
 5328 007e D2B2     		uxtb	r2, r2
 5329 0080 1A70     		strb	r2, [r3]
 5330 0082 0CE0     		b	.L229
 5331              	.L230:
2396:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2397:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       else
2398:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       {
2399:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****         *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 5332              		.loc 1 2399 0
 5333 0084 7B68     		ldr	r3, [r7, #4]
 5334 0086 9B6A     		ldr	r3, [r3, #40]
 5335 0088 591C     		adds	r1, r3, #1
ARM GAS  /tmp/ccLJIDLw.s 			page 135


 5336 008a 7A68     		ldr	r2, [r7, #4]
 5337 008c 9162     		str	r1, [r2, #40]
 5338 008e 7A68     		ldr	r2, [r7, #4]
 5339 0090 1268     		ldr	r2, [r2]
 5340 0092 5268     		ldr	r2, [r2, #4]
 5341 0094 D2B2     		uxtb	r2, r2
 5342 0096 02F07F02 		and	r2, r2, #127
 5343 009a D2B2     		uxtb	r2, r2
 5344 009c 1A70     		strb	r2, [r3]
 5345              	.L229:
2400:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       }
2401:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2402:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2403:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(--huart->RxXferCount == 0U)
 5346              		.loc 1 2403 0
 5347 009e 7B68     		ldr	r3, [r7, #4]
 5348 00a0 DB8D     		ldrh	r3, [r3, #46]	@ movhi
 5349 00a2 9BB2     		uxth	r3, r3
 5350 00a4 013B     		subs	r3, r3, #1
 5351 00a6 9BB2     		uxth	r3, r3
 5352 00a8 7A68     		ldr	r2, [r7, #4]
 5353 00aa 1946     		mov	r1, r3	@ movhi
 5354 00ac D185     		strh	r1, [r2, #46]	@ movhi
 5355 00ae 002B     		cmp	r3, #0
 5356 00b0 18D1     		bne	.L231
2404:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2405:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
2406:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 5357              		.loc 1 2406 0
 5358 00b2 7B68     		ldr	r3, [r7, #4]
 5359 00b4 1B68     		ldr	r3, [r3]
 5360 00b6 7A68     		ldr	r2, [r7, #4]
 5361 00b8 1268     		ldr	r2, [r2]
 5362 00ba D268     		ldr	r2, [r2, #12]
 5363 00bc 22F49072 		bic	r2, r2, #288
 5364 00c0 DA60     		str	r2, [r3, #12]
2407:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2408:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2409:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5365              		.loc 1 2409 0
 5366 00c2 7B68     		ldr	r3, [r7, #4]
 5367 00c4 1B68     		ldr	r3, [r3]
 5368 00c6 7A68     		ldr	r2, [r7, #4]
 5369 00c8 1268     		ldr	r2, [r2]
 5370 00ca 5269     		ldr	r2, [r2, #20]
 5371 00cc 22F00102 		bic	r2, r2, #1
 5372 00d0 5A61     		str	r2, [r3, #20]
2410:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2411:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2412:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 5373              		.loc 1 2412 0
 5374 00d2 7B68     		ldr	r3, [r7, #4]
 5375 00d4 2022     		movs	r2, #32
 5376 00d6 83F83A20 		strb	r2, [r3, #58]
2413:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      
2414:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 5377              		.loc 1 2414 0
ARM GAS  /tmp/ccLJIDLw.s 			page 136


 5378 00da 7868     		ldr	r0, [r7, #4]
 5379 00dc FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2415:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2416:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       return HAL_OK;
 5380              		.loc 1 2416 0
 5381 00e0 0023     		movs	r3, #0
 5382 00e2 02E0     		b	.L232
 5383              	.L231:
2417:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2418:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_OK;
 5384              		.loc 1 2418 0
 5385 00e4 0023     		movs	r3, #0
 5386 00e6 00E0     		b	.L232
 5387              	.L225:
2419:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2420:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2421:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2422:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     return HAL_BUSY;
 5388              		.loc 1 2422 0
 5389 00e8 0223     		movs	r3, #2
 5390              	.L232:
2423:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2424:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5391              		.loc 1 2424 0
 5392 00ea 1846     		mov	r0, r3
 5393 00ec 1037     		adds	r7, r7, #16
 5394              	.LCFI292:
 5395              		.cfi_def_cfa_offset 8
 5396 00ee BD46     		mov	sp, r7
 5397              	.LCFI293:
 5398              		.cfi_def_cfa_register 13
 5399              		@ sp needed
 5400 00f0 80BD     		pop	{r7, pc}
 5401              		.cfi_endproc
 5402              	.LFE177:
 5404              		.section	.text.UART_SetConfig,"ax",%progbits
 5405              		.align	1
 5406              		.syntax unified
 5407              		.thumb
 5408              		.thumb_func
 5409              		.fpu fpv4-sp-d16
 5411              	UART_SetConfig:
 5412              	.LFB178:
2425:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2426:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** /**
2427:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @brief  Configures the UART peripheral. 
2428:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2429:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   *                the configuration information for the specified UART module.
2430:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   * @retval None
2431:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   */
2432:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** static void UART_SetConfig(UART_HandleTypeDef *huart)
2433:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** {
 5413              		.loc 1 2433 0
 5414              		.cfi_startproc
 5415              		@ args = 0, pretend = 0, frame = 16
 5416              		@ frame_needed = 1, uses_anonymous_args = 0
 5417 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccLJIDLw.s 			page 137


 5418              	.LCFI294:
 5419              		.cfi_def_cfa_offset 20
 5420              		.cfi_offset 4, -20
 5421              		.cfi_offset 5, -16
 5422              		.cfi_offset 6, -12
 5423              		.cfi_offset 7, -8
 5424              		.cfi_offset 14, -4
 5425 0002 85B0     		sub	sp, sp, #20
 5426              	.LCFI295:
 5427              		.cfi_def_cfa_offset 40
 5428 0004 00AF     		add	r7, sp, #0
 5429              	.LCFI296:
 5430              		.cfi_def_cfa_register 7
 5431 0006 7860     		str	r0, [r7, #4]
2434:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   uint32_t tmpreg = 0x00U;
 5432              		.loc 1 2434 0
 5433 0008 0023     		movs	r3, #0
 5434 000a FB60     		str	r3, [r7, #12]
2435:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2436:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the parameters */
2437:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2438:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2439:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2440:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2441:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2442:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2443:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR2;
 5435              		.loc 1 2443 0
 5436 000c 7B68     		ldr	r3, [r7, #4]
 5437 000e 1B68     		ldr	r3, [r3]
 5438 0010 1B69     		ldr	r3, [r3, #16]
 5439 0012 FB60     		str	r3, [r7, #12]
2444:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2445:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear STOP[13:12] bits */
2446:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 5440              		.loc 1 2446 0
 5441 0014 FB68     		ldr	r3, [r7, #12]
 5442 0016 23F44053 		bic	r3, r3, #12288
 5443 001a FB60     		str	r3, [r7, #12]
2447:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2448:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
2449:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.StopBits;
 5444              		.loc 1 2449 0
 5445 001c 7B68     		ldr	r3, [r7, #4]
 5446 001e DB68     		ldr	r3, [r3, #12]
 5447 0020 FA68     		ldr	r2, [r7, #12]
 5448 0022 1343     		orrs	r3, r3, r2
 5449 0024 FB60     		str	r3, [r7, #12]
2450:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2451:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR2 */
2452:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 5450              		.loc 1 2452 0
 5451 0026 7B68     		ldr	r3, [r7, #4]
 5452 0028 1B68     		ldr	r3, [r3]
 5453 002a FA68     		ldr	r2, [r7, #12]
 5454 002c 1A61     		str	r2, [r3, #16]
2453:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
ARM GAS  /tmp/ccLJIDLw.s 			page 138


2454:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2455:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR1;
 5455              		.loc 1 2455 0
 5456 002e 7B68     		ldr	r3, [r7, #4]
 5457 0030 1B68     		ldr	r3, [r3]
 5458 0032 DB68     		ldr	r3, [r3, #12]
 5459 0034 FB60     		str	r3, [r7, #12]
2456:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2457:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear M, PCE, PS, TE and RE bits */
2458:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 5460              		.loc 1 2458 0
 5461 0036 FB68     		ldr	r3, [r7, #12]
 5462 0038 23F41643 		bic	r3, r3, #38400
 5463 003c 23F00C03 		bic	r3, r3, #12
 5464 0040 FB60     		str	r3, [r7, #12]
2459:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****                                    USART_CR1_RE | USART_CR1_OVER8));
2460:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** 
2461:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART Word Length, Parity and mode: 
2462:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set the M bits according to huart->Init.WordLength value 
2463:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set PCE and PS bits according to huart->Init.Parity value
2464:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set TE and RE bits according to huart->Init.Mode value
2465:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****      Set OVER8 bit according to huart->Init.OverSampling value */
2466:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.
 5465              		.loc 1 2466 0
 5466 0042 7B68     		ldr	r3, [r7, #4]
 5467 0044 9A68     		ldr	r2, [r3, #8]
 5468 0046 7B68     		ldr	r3, [r7, #4]
 5469 0048 1B69     		ldr	r3, [r3, #16]
 5470 004a 1A43     		orrs	r2, r2, r3
 5471 004c 7B68     		ldr	r3, [r7, #4]
 5472 004e 5B69     		ldr	r3, [r3, #20]
 5473 0050 1A43     		orrs	r2, r2, r3
 5474 0052 7B68     		ldr	r3, [r7, #4]
 5475 0054 DB69     		ldr	r3, [r3, #28]
 5476 0056 1343     		orrs	r3, r3, r2
 5477 0058 FA68     		ldr	r2, [r7, #12]
 5478 005a 1343     		orrs	r3, r3, r2
 5479 005c FB60     		str	r3, [r7, #12]
2467:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2468:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR1 */
2469:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 5480              		.loc 1 2469 0
 5481 005e 7B68     		ldr	r3, [r7, #4]
 5482 0060 1B68     		ldr	r3, [r3]
 5483 0062 FA68     		ldr	r2, [r7, #12]
 5484 0064 DA60     		str	r2, [r3, #12]
2470:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2471:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/  
2472:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg = huart->Instance->CR3;
 5485              		.loc 1 2472 0
 5486 0066 7B68     		ldr	r3, [r7, #4]
 5487 0068 1B68     		ldr	r3, [r3]
 5488 006a 5B69     		ldr	r3, [r3, #20]
 5489 006c FB60     		str	r3, [r7, #12]
2473:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2474:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Clear CTSE and RTSE bits */
2475:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
ARM GAS  /tmp/ccLJIDLw.s 			page 139


 5490              		.loc 1 2475 0
 5491 006e FB68     		ldr	r3, [r7, #12]
 5492 0070 23F44073 		bic	r3, r3, #768
 5493 0074 FB60     		str	r3, [r7, #12]
2476:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2477:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
2478:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   tmpreg |= huart->Init.HwFlowCtl;
 5494              		.loc 1 2478 0
 5495 0076 7B68     		ldr	r3, [r7, #4]
 5496 0078 9B69     		ldr	r3, [r3, #24]
 5497 007a FA68     		ldr	r2, [r7, #12]
 5498 007c 1343     		orrs	r3, r3, r2
 5499 007e FB60     		str	r3, [r7, #12]
2479:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2480:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Write to USART CR3 */
2481:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 5500              		.loc 1 2481 0
 5501 0080 7B68     		ldr	r3, [r7, #4]
 5502 0082 1B68     		ldr	r3, [r3]
 5503 0084 FA68     		ldr	r2, [r7, #12]
 5504 0086 5A61     		str	r2, [r3, #20]
2482:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   
2483:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   /* Check the Over Sampling */
2484:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 5505              		.loc 1 2484 0
 5506 0088 7B68     		ldr	r3, [r7, #4]
 5507 008a DB69     		ldr	r3, [r3, #28]
 5508 008c B3F5004F 		cmp	r3, #32768
 5509 0090 40F0E480 		bne	.L234
2485:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2486:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2487:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if defined(USART6) 
2488:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
 5510              		.loc 1 2488 0
 5511 0094 7B68     		ldr	r3, [r7, #4]
 5512 0096 1B68     		ldr	r3, [r3]
 5513 0098 AB4A     		ldr	r2, .L242
 5514 009a 9342     		cmp	r3, r2
 5515 009c 04D0     		beq	.L235
 5516              		.loc 1 2488 0 is_stmt 0 discriminator 1
 5517 009e 7B68     		ldr	r3, [r7, #4]
 5518 00a0 1B68     		ldr	r3, [r3]
 5519 00a2 AA4A     		ldr	r2, .L242+4
 5520 00a4 9342     		cmp	r3, r2
 5521 00a6 6CD1     		bne	.L236
 5522              	.L235:
2489:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2490:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 5523              		.loc 1 2490 0 is_stmt 1
 5524 00a8 7B68     		ldr	r3, [r7, #4]
 5525 00aa 1C68     		ldr	r4, [r3]
 5526 00ac FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5527 00b0 0246     		mov	r2, r0
 5528 00b2 1346     		mov	r3, r2
 5529 00b4 9B00     		lsls	r3, r3, #2
 5530 00b6 1344     		add	r3, r3, r2
 5531 00b8 9A00     		lsls	r2, r3, #2
ARM GAS  /tmp/ccLJIDLw.s 			page 140


 5532 00ba 1A44     		add	r2, r2, r3
 5533 00bc 7B68     		ldr	r3, [r7, #4]
 5534 00be 5B68     		ldr	r3, [r3, #4]
 5535 00c0 5B00     		lsls	r3, r3, #1
 5536 00c2 B2FBF3F3 		udiv	r3, r2, r3
 5537 00c6 A24A     		ldr	r2, .L242+8
 5538 00c8 A2FB0323 		umull	r2, r3, r2, r3
 5539 00cc 5B09     		lsrs	r3, r3, #5
 5540 00ce 1D01     		lsls	r5, r3, #4
 5541 00d0 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5542 00d4 0246     		mov	r2, r0
 5543 00d6 1346     		mov	r3, r2
 5544 00d8 9B00     		lsls	r3, r3, #2
 5545 00da 1344     		add	r3, r3, r2
 5546 00dc 9A00     		lsls	r2, r3, #2
 5547 00de 1A44     		add	r2, r2, r3
 5548 00e0 7B68     		ldr	r3, [r7, #4]
 5549 00e2 5B68     		ldr	r3, [r3, #4]
 5550 00e4 5B00     		lsls	r3, r3, #1
 5551 00e6 B2FBF3F6 		udiv	r6, r2, r3
 5552 00ea FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5553 00ee 0246     		mov	r2, r0
 5554 00f0 1346     		mov	r3, r2
 5555 00f2 9B00     		lsls	r3, r3, #2
 5556 00f4 1344     		add	r3, r3, r2
 5557 00f6 9A00     		lsls	r2, r3, #2
 5558 00f8 1A44     		add	r2, r2, r3
 5559 00fa 7B68     		ldr	r3, [r7, #4]
 5560 00fc 5B68     		ldr	r3, [r3, #4]
 5561 00fe 5B00     		lsls	r3, r3, #1
 5562 0100 B2FBF3F3 		udiv	r3, r2, r3
 5563 0104 924A     		ldr	r2, .L242+8
 5564 0106 A2FB0323 		umull	r2, r3, r2, r3
 5565 010a 5B09     		lsrs	r3, r3, #5
 5566 010c 6422     		movs	r2, #100
 5567 010e 02FB03F3 		mul	r3, r2, r3
 5568 0112 F31A     		subs	r3, r6, r3
 5569 0114 DB00     		lsls	r3, r3, #3
 5570 0116 3233     		adds	r3, r3, #50
 5571 0118 8D4A     		ldr	r2, .L242+8
 5572 011a A2FB0323 		umull	r2, r3, r2, r3
 5573 011e 5B09     		lsrs	r3, r3, #5
 5574 0120 5B00     		lsls	r3, r3, #1
 5575 0122 03F4F873 		and	r3, r3, #496
 5576 0126 1D44     		add	r5, r5, r3
 5577 0128 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5578 012c 0246     		mov	r2, r0
 5579 012e 1346     		mov	r3, r2
 5580 0130 9B00     		lsls	r3, r3, #2
 5581 0132 1344     		add	r3, r3, r2
 5582 0134 9A00     		lsls	r2, r3, #2
 5583 0136 1A44     		add	r2, r2, r3
 5584 0138 7B68     		ldr	r3, [r7, #4]
 5585 013a 5B68     		ldr	r3, [r3, #4]
 5586 013c 5B00     		lsls	r3, r3, #1
 5587 013e B2FBF3F6 		udiv	r6, r2, r3
 5588 0142 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
ARM GAS  /tmp/ccLJIDLw.s 			page 141


 5589 0146 0246     		mov	r2, r0
 5590 0148 1346     		mov	r3, r2
 5591 014a 9B00     		lsls	r3, r3, #2
 5592 014c 1344     		add	r3, r3, r2
 5593 014e 9A00     		lsls	r2, r3, #2
 5594 0150 1A44     		add	r2, r2, r3
 5595 0152 7B68     		ldr	r3, [r7, #4]
 5596 0154 5B68     		ldr	r3, [r3, #4]
 5597 0156 5B00     		lsls	r3, r3, #1
 5598 0158 B2FBF3F3 		udiv	r3, r2, r3
 5599 015c 7C4A     		ldr	r2, .L242+8
 5600 015e A2FB0323 		umull	r2, r3, r2, r3
 5601 0162 5B09     		lsrs	r3, r3, #5
 5602 0164 6422     		movs	r2, #100
 5603 0166 02FB03F3 		mul	r3, r2, r3
 5604 016a F31A     		subs	r3, r6, r3
 5605 016c DB00     		lsls	r3, r3, #3
 5606 016e 3233     		adds	r3, r3, #50
 5607 0170 774A     		ldr	r2, .L242+8
 5608 0172 A2FB0323 		umull	r2, r3, r2, r3
 5609 0176 5B09     		lsrs	r3, r3, #5
 5610 0178 03F00703 		and	r3, r3, #7
 5611 017c 2B44     		add	r3, r3, r5
 5612 017e A360     		str	r3, [r4, #8]
 5613 0180 54E1     		b	.L238
 5614              	.L236:
2491:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2492:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2493:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Instance == USART1)
2494:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2495:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2496:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }	
2497:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USART6 */
2498:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2499:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2500:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 5615              		.loc 1 2500 0
 5616 0182 7B68     		ldr	r3, [r7, #4]
 5617 0184 1C68     		ldr	r4, [r3]
 5618 0186 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5619 018a 0246     		mov	r2, r0
 5620 018c 1346     		mov	r3, r2
 5621 018e 9B00     		lsls	r3, r3, #2
 5622 0190 1344     		add	r3, r3, r2
 5623 0192 9A00     		lsls	r2, r3, #2
 5624 0194 1A44     		add	r2, r2, r3
 5625 0196 7B68     		ldr	r3, [r7, #4]
 5626 0198 5B68     		ldr	r3, [r3, #4]
 5627 019a 5B00     		lsls	r3, r3, #1
 5628 019c B2FBF3F3 		udiv	r3, r2, r3
 5629 01a0 6B4A     		ldr	r2, .L242+8
 5630 01a2 A2FB0323 		umull	r2, r3, r2, r3
 5631 01a6 5B09     		lsrs	r3, r3, #5
 5632 01a8 1D01     		lsls	r5, r3, #4
 5633 01aa FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5634 01ae 0246     		mov	r2, r0
 5635 01b0 1346     		mov	r3, r2
ARM GAS  /tmp/ccLJIDLw.s 			page 142


 5636 01b2 9B00     		lsls	r3, r3, #2
 5637 01b4 1344     		add	r3, r3, r2
 5638 01b6 9A00     		lsls	r2, r3, #2
 5639 01b8 1A44     		add	r2, r2, r3
 5640 01ba 7B68     		ldr	r3, [r7, #4]
 5641 01bc 5B68     		ldr	r3, [r3, #4]
 5642 01be 5B00     		lsls	r3, r3, #1
 5643 01c0 B2FBF3F6 		udiv	r6, r2, r3
 5644 01c4 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5645 01c8 0246     		mov	r2, r0
 5646 01ca 1346     		mov	r3, r2
 5647 01cc 9B00     		lsls	r3, r3, #2
 5648 01ce 1344     		add	r3, r3, r2
 5649 01d0 9A00     		lsls	r2, r3, #2
 5650 01d2 1A44     		add	r2, r2, r3
 5651 01d4 7B68     		ldr	r3, [r7, #4]
 5652 01d6 5B68     		ldr	r3, [r3, #4]
 5653 01d8 5B00     		lsls	r3, r3, #1
 5654 01da B2FBF3F3 		udiv	r3, r2, r3
 5655 01de 5C4A     		ldr	r2, .L242+8
 5656 01e0 A2FB0323 		umull	r2, r3, r2, r3
 5657 01e4 5B09     		lsrs	r3, r3, #5
 5658 01e6 6422     		movs	r2, #100
 5659 01e8 02FB03F3 		mul	r3, r2, r3
 5660 01ec F31A     		subs	r3, r6, r3
 5661 01ee DB00     		lsls	r3, r3, #3
 5662 01f0 3233     		adds	r3, r3, #50
 5663 01f2 574A     		ldr	r2, .L242+8
 5664 01f4 A2FB0323 		umull	r2, r3, r2, r3
 5665 01f8 5B09     		lsrs	r3, r3, #5
 5666 01fa 5B00     		lsls	r3, r3, #1
 5667 01fc 03F4F873 		and	r3, r3, #496
 5668 0200 1D44     		add	r5, r5, r3
 5669 0202 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5670 0206 0246     		mov	r2, r0
 5671 0208 1346     		mov	r3, r2
 5672 020a 9B00     		lsls	r3, r3, #2
 5673 020c 1344     		add	r3, r3, r2
 5674 020e 9A00     		lsls	r2, r3, #2
 5675 0210 1A44     		add	r2, r2, r3
 5676 0212 7B68     		ldr	r3, [r7, #4]
 5677 0214 5B68     		ldr	r3, [r3, #4]
 5678 0216 5B00     		lsls	r3, r3, #1
 5679 0218 B2FBF3F6 		udiv	r6, r2, r3
 5680 021c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5681 0220 0246     		mov	r2, r0
 5682 0222 1346     		mov	r3, r2
 5683 0224 9B00     		lsls	r3, r3, #2
 5684 0226 1344     		add	r3, r3, r2
 5685 0228 9A00     		lsls	r2, r3, #2
 5686 022a 1A44     		add	r2, r2, r3
 5687 022c 7B68     		ldr	r3, [r7, #4]
 5688 022e 5B68     		ldr	r3, [r3, #4]
 5689 0230 5B00     		lsls	r3, r3, #1
 5690 0232 B2FBF3F3 		udiv	r3, r2, r3
 5691 0236 464A     		ldr	r2, .L242+8
 5692 0238 A2FB0323 		umull	r2, r3, r2, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 143


 5693 023c 5B09     		lsrs	r3, r3, #5
 5694 023e 6422     		movs	r2, #100
 5695 0240 02FB03F3 		mul	r3, r2, r3
 5696 0244 F31A     		subs	r3, r6, r3
 5697 0246 DB00     		lsls	r3, r3, #3
 5698 0248 3233     		adds	r3, r3, #50
 5699 024a 414A     		ldr	r2, .L242+8
 5700 024c A2FB0323 		umull	r2, r3, r2, r3
 5701 0250 5B09     		lsrs	r3, r3, #5
 5702 0252 03F00703 		and	r3, r3, #7
 5703 0256 2B44     		add	r3, r3, r5
 5704 0258 A360     		str	r3, [r4, #8]
2501:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2502:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2503:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   else
2504:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   {
2505:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     /*-------------------------- USART BRR Configuration ---------------------*/
2506:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #if defined(USART6) 
2507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if((huart->Instance == USART1) || (huart->Instance == USART6))
2508:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2510:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2511:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #else
2512:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     if(huart->Instance == USART1)
2513:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2514:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
2515:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }	
2516:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** #endif /* USART6 */
2517:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     else
2518:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
2519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****       huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
2520:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
2521:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****   }
2522:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c **** }
 5705              		.loc 1 2522 0
 5706 025a E7E0     		b	.L241
 5707              	.L234:
2507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 5708              		.loc 1 2507 0
 5709 025c 7B68     		ldr	r3, [r7, #4]
 5710 025e 1B68     		ldr	r3, [r3]
 5711 0260 394A     		ldr	r2, .L242
 5712 0262 9342     		cmp	r3, r2
 5713 0264 04D0     		beq	.L239
2507:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     {
 5714              		.loc 1 2507 0 is_stmt 0 discriminator 1
 5715 0266 7B68     		ldr	r3, [r7, #4]
 5716 0268 1B68     		ldr	r3, [r3]
 5717 026a 384A     		ldr	r2, .L242+4
 5718 026c 9342     		cmp	r3, r2
 5719 026e 71D1     		bne	.L240
 5720              	.L239:
2509:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 5721              		.loc 1 2509 0 is_stmt 1
 5722 0270 7B68     		ldr	r3, [r7, #4]
 5723 0272 1C68     		ldr	r4, [r3]
 5724 0274 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
ARM GAS  /tmp/ccLJIDLw.s 			page 144


 5725 0278 0246     		mov	r2, r0
 5726 027a 1346     		mov	r3, r2
 5727 027c 9B00     		lsls	r3, r3, #2
 5728 027e 1344     		add	r3, r3, r2
 5729 0280 9A00     		lsls	r2, r3, #2
 5730 0282 1A44     		add	r2, r2, r3
 5731 0284 7B68     		ldr	r3, [r7, #4]
 5732 0286 5B68     		ldr	r3, [r3, #4]
 5733 0288 9B00     		lsls	r3, r3, #2
 5734 028a B2FBF3F3 		udiv	r3, r2, r3
 5735 028e 304A     		ldr	r2, .L242+8
 5736 0290 A2FB0323 		umull	r2, r3, r2, r3
 5737 0294 5B09     		lsrs	r3, r3, #5
 5738 0296 1D01     		lsls	r5, r3, #4
 5739 0298 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5740 029c 0246     		mov	r2, r0
 5741 029e 1346     		mov	r3, r2
 5742 02a0 9B00     		lsls	r3, r3, #2
 5743 02a2 1344     		add	r3, r3, r2
 5744 02a4 9A00     		lsls	r2, r3, #2
 5745 02a6 1A44     		add	r2, r2, r3
 5746 02a8 7B68     		ldr	r3, [r7, #4]
 5747 02aa 5B68     		ldr	r3, [r3, #4]
 5748 02ac 9B00     		lsls	r3, r3, #2
 5749 02ae B2FBF3F6 		udiv	r6, r2, r3
 5750 02b2 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5751 02b6 0246     		mov	r2, r0
 5752 02b8 1346     		mov	r3, r2
 5753 02ba 9B00     		lsls	r3, r3, #2
 5754 02bc 1344     		add	r3, r3, r2
 5755 02be 9A00     		lsls	r2, r3, #2
 5756 02c0 1A44     		add	r2, r2, r3
 5757 02c2 7B68     		ldr	r3, [r7, #4]
 5758 02c4 5B68     		ldr	r3, [r3, #4]
 5759 02c6 9B00     		lsls	r3, r3, #2
 5760 02c8 B2FBF3F3 		udiv	r3, r2, r3
 5761 02cc 204A     		ldr	r2, .L242+8
 5762 02ce A2FB0323 		umull	r2, r3, r2, r3
 5763 02d2 5B09     		lsrs	r3, r3, #5
 5764 02d4 6422     		movs	r2, #100
 5765 02d6 02FB03F3 		mul	r3, r2, r3
 5766 02da F31A     		subs	r3, r6, r3
 5767 02dc 1B01     		lsls	r3, r3, #4
 5768 02de 3233     		adds	r3, r3, #50
 5769 02e0 1B4A     		ldr	r2, .L242+8
 5770 02e2 A2FB0323 		umull	r2, r3, r2, r3
 5771 02e6 5B09     		lsrs	r3, r3, #5
 5772 02e8 03F0F003 		and	r3, r3, #240
 5773 02ec 1D44     		add	r5, r5, r3
 5774 02ee FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5775 02f2 0246     		mov	r2, r0
 5776 02f4 1346     		mov	r3, r2
 5777 02f6 9B00     		lsls	r3, r3, #2
 5778 02f8 1344     		add	r3, r3, r2
 5779 02fa 9A00     		lsls	r2, r3, #2
 5780 02fc 1A44     		add	r2, r2, r3
 5781 02fe 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccLJIDLw.s 			page 145


 5782 0300 5B68     		ldr	r3, [r3, #4]
 5783 0302 9B00     		lsls	r3, r3, #2
 5784 0304 B2FBF3F6 		udiv	r6, r2, r3
 5785 0308 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5786 030c 0246     		mov	r2, r0
 5787 030e 1346     		mov	r3, r2
 5788 0310 9B00     		lsls	r3, r3, #2
 5789 0312 1344     		add	r3, r3, r2
 5790 0314 9A00     		lsls	r2, r3, #2
 5791 0316 1A44     		add	r2, r2, r3
 5792 0318 7B68     		ldr	r3, [r7, #4]
 5793 031a 5B68     		ldr	r3, [r3, #4]
 5794 031c 9B00     		lsls	r3, r3, #2
 5795 031e B2FBF3F3 		udiv	r3, r2, r3
 5796 0322 0B4A     		ldr	r2, .L242+8
 5797 0324 A2FB0323 		umull	r2, r3, r2, r3
 5798 0328 5B09     		lsrs	r3, r3, #5
 5799 032a 6422     		movs	r2, #100
 5800 032c 02FB03F3 		mul	r3, r2, r3
 5801 0330 F31A     		subs	r3, r6, r3
 5802 0332 1B01     		lsls	r3, r3, #4
 5803 0334 3233     		adds	r3, r3, #50
 5804 0336 064A     		ldr	r2, .L242+8
 5805 0338 A2FB0323 		umull	r2, r3, r2, r3
 5806 033c 5B09     		lsrs	r3, r3, #5
 5807 033e 03F00F03 		and	r3, r3, #15
 5808 0342 2B44     		add	r3, r3, r5
 5809 0344 A360     		str	r3, [r4, #8]
 5810 0346 71E0     		b	.L238
 5811              	.L243:
 5812              		.align	2
 5813              	.L242:
 5814 0348 00100140 		.word	1073811456
 5815 034c 00140140 		.word	1073812480
 5816 0350 1F85EB51 		.word	1374389535
 5817              	.L240:
2519:Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c ****     }
 5818              		.loc 1 2519 0
 5819 0354 7B68     		ldr	r3, [r7, #4]
 5820 0356 1C68     		ldr	r4, [r3]
 5821 0358 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5822 035c 0246     		mov	r2, r0
 5823 035e 1346     		mov	r3, r2
 5824 0360 9B00     		lsls	r3, r3, #2
 5825 0362 1344     		add	r3, r3, r2
 5826 0364 9A00     		lsls	r2, r3, #2
 5827 0366 1A44     		add	r2, r2, r3
 5828 0368 7B68     		ldr	r3, [r7, #4]
 5829 036a 5B68     		ldr	r3, [r3, #4]
 5830 036c 9B00     		lsls	r3, r3, #2
 5831 036e B2FBF3F3 		udiv	r3, r2, r3
 5832 0372 304A     		ldr	r2, .L244
 5833 0374 A2FB0323 		umull	r2, r3, r2, r3
 5834 0378 5B09     		lsrs	r3, r3, #5
 5835 037a 1D01     		lsls	r5, r3, #4
 5836 037c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5837 0380 0246     		mov	r2, r0
ARM GAS  /tmp/ccLJIDLw.s 			page 146


 5838 0382 1346     		mov	r3, r2
 5839 0384 9B00     		lsls	r3, r3, #2
 5840 0386 1344     		add	r3, r3, r2
 5841 0388 9A00     		lsls	r2, r3, #2
 5842 038a 1A44     		add	r2, r2, r3
 5843 038c 7B68     		ldr	r3, [r7, #4]
 5844 038e 5B68     		ldr	r3, [r3, #4]
 5845 0390 9B00     		lsls	r3, r3, #2
 5846 0392 B2FBF3F6 		udiv	r6, r2, r3
 5847 0396 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5848 039a 0246     		mov	r2, r0
 5849 039c 1346     		mov	r3, r2
 5850 039e 9B00     		lsls	r3, r3, #2
 5851 03a0 1344     		add	r3, r3, r2
 5852 03a2 9A00     		lsls	r2, r3, #2
 5853 03a4 1A44     		add	r2, r2, r3
 5854 03a6 7B68     		ldr	r3, [r7, #4]
 5855 03a8 5B68     		ldr	r3, [r3, #4]
 5856 03aa 9B00     		lsls	r3, r3, #2
 5857 03ac B2FBF3F3 		udiv	r3, r2, r3
 5858 03b0 204A     		ldr	r2, .L244
 5859 03b2 A2FB0323 		umull	r2, r3, r2, r3
 5860 03b6 5B09     		lsrs	r3, r3, #5
 5861 03b8 6422     		movs	r2, #100
 5862 03ba 02FB03F3 		mul	r3, r2, r3
 5863 03be F31A     		subs	r3, r6, r3
 5864 03c0 1B01     		lsls	r3, r3, #4
 5865 03c2 3233     		adds	r3, r3, #50
 5866 03c4 1B4A     		ldr	r2, .L244
 5867 03c6 A2FB0323 		umull	r2, r3, r2, r3
 5868 03ca 5B09     		lsrs	r3, r3, #5
 5869 03cc 03F0F003 		and	r3, r3, #240
 5870 03d0 1D44     		add	r5, r5, r3
 5871 03d2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5872 03d6 0246     		mov	r2, r0
 5873 03d8 1346     		mov	r3, r2
 5874 03da 9B00     		lsls	r3, r3, #2
 5875 03dc 1344     		add	r3, r3, r2
 5876 03de 9A00     		lsls	r2, r3, #2
 5877 03e0 1A44     		add	r2, r2, r3
 5878 03e2 7B68     		ldr	r3, [r7, #4]
 5879 03e4 5B68     		ldr	r3, [r3, #4]
 5880 03e6 9B00     		lsls	r3, r3, #2
 5881 03e8 B2FBF3F6 		udiv	r6, r2, r3
 5882 03ec FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5883 03f0 0246     		mov	r2, r0
 5884 03f2 1346     		mov	r3, r2
 5885 03f4 9B00     		lsls	r3, r3, #2
 5886 03f6 1344     		add	r3, r3, r2
 5887 03f8 9A00     		lsls	r2, r3, #2
 5888 03fa 1A44     		add	r2, r2, r3
 5889 03fc 7B68     		ldr	r3, [r7, #4]
 5890 03fe 5B68     		ldr	r3, [r3, #4]
 5891 0400 9B00     		lsls	r3, r3, #2
 5892 0402 B2FBF3F3 		udiv	r3, r2, r3
 5893 0406 0B4A     		ldr	r2, .L244
 5894 0408 A2FB0323 		umull	r2, r3, r2, r3
ARM GAS  /tmp/ccLJIDLw.s 			page 147


 5895 040c 5B09     		lsrs	r3, r3, #5
 5896 040e 6422     		movs	r2, #100
 5897 0410 02FB03F3 		mul	r3, r2, r3
 5898 0414 F31A     		subs	r3, r6, r3
 5899 0416 1B01     		lsls	r3, r3, #4
 5900 0418 3233     		adds	r3, r3, #50
 5901 041a 064A     		ldr	r2, .L244
 5902 041c A2FB0323 		umull	r2, r3, r2, r3
 5903 0420 5B09     		lsrs	r3, r3, #5
 5904 0422 03F00F03 		and	r3, r3, #15
 5905 0426 2B44     		add	r3, r3, r5
 5906 0428 A360     		str	r3, [r4, #8]
 5907              		.loc 1 2522 0
 5908 042a FFE7     		b	.L241
 5909              	.L238:
 5910              	.L241:
 5911 042c 00BF     		nop
 5912 042e 1437     		adds	r7, r7, #20
 5913              	.LCFI297:
 5914              		.cfi_def_cfa_offset 20
 5915 0430 BD46     		mov	sp, r7
 5916              	.LCFI298:
 5917              		.cfi_def_cfa_register 13
 5918              		@ sp needed
 5919 0432 F0BD     		pop	{r4, r5, r6, r7, pc}
 5920              	.L245:
 5921              		.align	2
 5922              	.L244:
 5923 0434 1F85EB51 		.word	1374389535
 5924              		.cfi_endproc
 5925              	.LFE178:
 5927              		.text
 5928              	.Letext0:
 5929              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 5930              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 5931              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 5932              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 5933              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 5934              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 5935              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 5936              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 5937              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 5938              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 5939              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 5940              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 5941              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
ARM GAS  /tmp/ccLJIDLw.s 			page 148


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_uart.c
     /tmp/ccLJIDLw.s:18     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccLJIDLw.s:25     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccLJIDLw.s:630    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccLJIDLw.s:5411   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccLJIDLw.s:134    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccLJIDLw.s:141    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccLJIDLw.s:257    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccLJIDLw.s:264    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccLJIDLw.s:398    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccLJIDLw.s:405    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccLJIDLw.s:550    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccLJIDLw.s:557    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccLJIDLw.s:673    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccLJIDLw.s:623    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccLJIDLw.s:666    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccLJIDLw.s:709    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccLJIDLw.s:716    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccLJIDLw.s:4496   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccLJIDLw.s:924    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccLJIDLw.s:931    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccLJIDLw.s:1154   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:1161   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccLJIDLw.s:1271   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:1278   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccLJIDLw.s:1396   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccLJIDLw.s:1403   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccLJIDLw.s:1547   .text.HAL_UART_Transmit_DMA:00000000000000cc $d
     /tmp/ccLJIDLw.s:4133   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccLJIDLw.s:4209   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccLJIDLw.s:4384   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccLJIDLw.s:1554   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccLJIDLw.s:1561   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccLJIDLw.s:1726   .text.HAL_UART_Receive_DMA:00000000000000f4 $d
     /tmp/ccLJIDLw.s:4254   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccLJIDLw.s:4339   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccLJIDLw.s:1733   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccLJIDLw.s:1740   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccLJIDLw.s:1875   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccLJIDLw.s:1882   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccLJIDLw.s:1998   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccLJIDLw.s:2005   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccLJIDLw.s:4609   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccLJIDLw.s:4663   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccLJIDLw.s:2130   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccLJIDLw.s:2137   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccLJIDLw.s:2269   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccLJIDLw.s:2276   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccLJIDLw.s:2357   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccLJIDLw.s:2364   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccLJIDLw.s:2453   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:2460   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccLJIDLw.s:3473   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccLJIDLw.s:2671   .text.HAL_UART_Abort_IT:0000000000000140 $d
     /tmp/ccLJIDLw.s:4778   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccLJIDLw.s:4864   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
ARM GAS  /tmp/ccLJIDLw.s 			page 149


     /tmp/ccLJIDLw.s:2677   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:2684   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccLJIDLw.s:3516   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccLJIDLw.s:2794   .text.HAL_UART_AbortTransmit_IT:000000000000009c $d
     /tmp/ccLJIDLw.s:4950   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccLJIDLw.s:2799   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:2806   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccLJIDLw.s:3559   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccLJIDLw.s:2924   .text.HAL_UART_AbortReceive_IT:00000000000000ac $d
     /tmp/ccLJIDLw.s:5003   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccLJIDLw.s:2929   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccLJIDLw.s:2936   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccLJIDLw.s:5242   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/ccLJIDLw.s:3430   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccLJIDLw.s:5056   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/ccLJIDLw.s:5187   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccLJIDLw.s:3246   .text.HAL_UART_IRQHandler:00000000000001f4 $d
     /tmp/ccLJIDLw.s:4725   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccLJIDLw.s:3251   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3258   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccLJIDLw.s:3294   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3301   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccLJIDLw.s:3337   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3344   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccLJIDLw.s:3380   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3387   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccLJIDLw.s:3423   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3466   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3509   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3552   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:3595   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccLJIDLw.s:3602   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccLJIDLw.s:3674   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccLJIDLw.s:3681   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccLJIDLw.s:3753   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 $t
     /tmp/ccLJIDLw.s:3760   .text.HAL_MultiProcessor_ExitMuteMode:0000000000000000 HAL_MultiProcessor_ExitMuteMode
     /tmp/ccLJIDLw.s:3832   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccLJIDLw.s:3839   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccLJIDLw.s:3924   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccLJIDLw.s:3931   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccLJIDLw.s:4016   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccLJIDLw.s:4023   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccLJIDLw.s:4081   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccLJIDLw.s:4088   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccLJIDLw.s:4127   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccLJIDLw.s:4203   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccLJIDLw.s:4248   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccLJIDLw.s:4333   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccLJIDLw.s:4378   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccLJIDLw.s:4490   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccLJIDLw.s:4603   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccLJIDLw.s:4657   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccLJIDLw.s:4719   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccLJIDLw.s:4772   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:4858   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:4944   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccLJIDLw.s:4997   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
ARM GAS  /tmp/ccLJIDLw.s 			page 150


     /tmp/ccLJIDLw.s:5050   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:5181   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:5236   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/ccLJIDLw.s:5405   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccLJIDLw.s:5814   .text.UART_SetConfig:0000000000000348 $d
     /tmp/ccLJIDLw.s:5819   .text.UART_SetConfig:0000000000000354 $t
     /tmp/ccLJIDLw.s:5923   .text.UART_SetConfig:0000000000000434 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq

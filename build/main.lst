ARM GAS  /tmp/ccn8Cl3y.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	huart1,64,4
  18              		.comm	defaultTaskHandle,4,4
  19              		.comm	DataToSend,3,4
  20              		.global	MessageCounter
  21              		.section	.bss.MessageCounter,"aw",%nobits
  24              	MessageCounter:
  25 0000 00       		.space	1
  26              		.global	MessageLength
  27              		.section	.bss.MessageLength,"aw",%nobits
  28              		.align	1
  31              	MessageLength:
  32 0000 0000     		.space	2
  33              		.section	.rodata
  34              		.align	2
  35              	.LC3:
  36 0000 74657374 		.ascii	"test\000"
  36      00
  37 0005 000000   		.align	2
  38              	.LC0:
  39 0008 64656661 		.ascii	"defaultTask\000"
  39      756C7454 
  39      61736B00 
  40              		.align	2
  41              	.LC2:
  42 0014 08000000 		.word	.LC0
  43 0018 00000000 		.word	StartDefaultTask
  44 001c 0000     		.short	0
  45 001e 0000     		.space	2
  46 0020 00000000 		.word	0
  47 0024 80000000 		.word	128
  48              		.section	.text.main,"ax",%progbits
  49              		.align	1
  50              		.global	main
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	main:
  57              	.LFB129:
  58              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
ARM GAS  /tmp/ccn8Cl3y.s 			page 2


   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  50:Src/main.c    **** #include "main.h"
  51:Src/main.c    **** #include "stm32f4xx_hal.h"
  52:Src/main.c    **** #include "cmsis_os.h"
  53:Src/main.c    **** #include "usb_device.h"
  54:Src/main.c    **** #include "usbd_cdc_if.h"
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE BEGIN Includes */
  57:Src/main.c    **** //#include "usbd_cdc_if.h" // Plik bedacy interfejsem uzytkownika do kontrolera USB
  58:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/ccn8Cl3y.s 			page 3


  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  61:Src/main.c    **** UART_HandleTypeDef huart1;
  62:Src/main.c    **** 
  63:Src/main.c    **** osThreadId defaultTaskHandle;
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE BEGIN PV */
  66:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PV */
  69:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  70:Src/main.c    **** uint8_t DataToSend[3]; // jeden znak midi
  71:Src/main.c    **** uint8_t MessageCounter = 0; // Licznik wyslanych wiadomosci
  72:Src/main.c    **** uint16_t MessageLength = 0; // Zawiera dlugosc wysylanej wiadomosci
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** static void MX_GPIO_Init(void);
  76:Src/main.c    **** static void MX_USART1_UART_Init(void);
  77:Src/main.c    **** void StartDefaultTask(void const * argument);
  78:Src/main.c    **** static void print_chr(char);
  79:Src/main.c    **** ssize_t _write_r(struct _reent*, int, const void*, size_t);
  80:Src/main.c    **** int8_t CDC_Receive_FS (uint8_t*, uint32_t*);
  81:Src/main.c    **** char readkey(void);
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE BEGIN PFP */
  84:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE END PFP */
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE BEGIN 0 */
  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE END 0 */
  91:Src/main.c    **** 
  92:Src/main.c    **** int main(void)
  93:Src/main.c    **** {
  59              		.loc 1 93 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 24
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 B0B5     		push	{r4, r5, r7, lr}
  64              	.LCFI0:
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 4, -16
  67              		.cfi_offset 5, -12
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 86B0     		sub	sp, sp, #24
  71              	.LCFI1:
  72              		.cfi_def_cfa_offset 40
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI2:
  75              		.cfi_def_cfa_register 7
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END 1 */
  98:Src/main.c    **** 
ARM GAS  /tmp/ccn8Cl3y.s 			page 4


  99:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 102:Src/main.c    ****   HAL_Init();
  76              		.loc 1 102 0
  77 0006 FFF7FEFF 		bl	HAL_Init
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE BEGIN Init */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE END Init */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* Configure the system clock */
 109:Src/main.c    ****   SystemClock_Config();
  78              		.loc 1 109 0
  79 000a FFF7FEFF 		bl	SystemClock_Config
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END SysInit */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* Initialize all configured peripherals */
 116:Src/main.c    ****   MX_GPIO_Init();
  80              		.loc 1 116 0
  81 000e FFF7FEFF 		bl	MX_GPIO_Init
 117:Src/main.c    ****   MX_USART1_UART_Init();
  82              		.loc 1 117 0
  83 0012 FFF7FEFF 		bl	MX_USART1_UART_Init
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN 2 */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE END 2 */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 124:Src/main.c    ****   /* add mutexes, ... */
 125:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 128:Src/main.c    ****   /* add semaphores, ... */
 129:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 132:Src/main.c    ****   /* start timers, add new ones, ... */
 133:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* Create the thread(s) */
 136:Src/main.c    ****   /* definition and creation of defaultTask */
 137:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  84              		.loc 1 137 0
  85 0016 0C4B     		ldr	r3, .L3
  86 0018 3C1D     		adds	r4, r7, #4
  87 001a 1D46     		mov	r5, r3
  88 001c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
  89 001e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
  90 0020 2B68     		ldr	r3, [r5]
  91 0022 2360     		str	r3, [r4]
 138:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  92              		.loc 1 138 0
ARM GAS  /tmp/ccn8Cl3y.s 			page 5


  93 0024 3B1D     		adds	r3, r7, #4
  94 0026 0021     		movs	r1, #0
  95 0028 1846     		mov	r0, r3
  96 002a FFF7FEFF 		bl	osThreadCreate
  97 002e 0246     		mov	r2, r0
  98 0030 064B     		ldr	r3, .L3+4
  99 0032 1A60     		str	r2, [r3]
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 141:Src/main.c    ****   /* add threads, ... */
 142:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 145:Src/main.c    ****   /* add queues, ... */
 146:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 147:Src/main.c    ****  
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* Start scheduler */
 150:Src/main.c    ****   osKernelStart();
 100              		.loc 1 150 0
 101 0034 FFF7FEFF 		bl	osKernelStart
 102              	.L2:
 151:Src/main.c    ****   
 152:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* Infinite loop */
 155:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 156:Src/main.c    ****   while (1)
 157:Src/main.c    ****   {
 158:Src/main.c    ****   /* USER CODE END WHILE */
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* USER CODE BEGIN 3 */
 161:Src/main.c    **** 
 162:Src/main.c    ****     printf("test\n");
 103              		.loc 1 162 0 discriminator 1
 104 0038 0548     		ldr	r0, .L3+8
 105 003a FFF7FEFF 		bl	puts
 163:Src/main.c    ****     osDelay(100);
 106              		.loc 1 163 0 discriminator 1
 107 003e 6420     		movs	r0, #100
 108 0040 FFF7FEFF 		bl	osDelay
 162:Src/main.c    ****     osDelay(100);
 109              		.loc 1 162 0 discriminator 1
 110 0044 F8E7     		b	.L2
 111              	.L4:
 112 0046 00BF     		.align	2
 113              	.L3:
 114 0048 14000000 		.word	.LC2
 115 004c 00000000 		.word	defaultTaskHandle
 116 0050 00000000 		.word	.LC3
 117              		.cfi_endproc
 118              	.LFE129:
 120              		.section	.rodata
 121              		.align	2
 122              	.LC4:
 123 0028 5372632F 		.ascii	"Src/main.c\000"
 123      6D61696E 
ARM GAS  /tmp/ccn8Cl3y.s 			page 6


 123      2E6300
 124              		.section	.text.SystemClock_Config,"ax",%progbits
 125              		.align	1
 126              		.global	SystemClock_Config
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu fpv4-sp-d16
 132              	SystemClock_Config:
 133              	.LFB130:
 164:Src/main.c    ****   }
 165:Src/main.c    ****   /* USER CODE END 3 */
 166:Src/main.c    **** 
 167:Src/main.c    **** }
 168:Src/main.c    **** 
 169:Src/main.c    **** /** System Clock Configuration
 170:Src/main.c    **** */
 171:Src/main.c    **** void SystemClock_Config(void)
 172:Src/main.c    **** {
 134              		.loc 1 172 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 80
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 0000 80B5     		push	{r7, lr}
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 0002 94B0     		sub	sp, sp, #80
 144              	.LCFI4:
 145              		.cfi_def_cfa_offset 88
 146 0004 00AF     		add	r7, sp, #0
 147              	.LCFI5:
 148              		.cfi_def_cfa_register 7
 149              	.LBB2:
 173:Src/main.c    **** 
 174:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 175:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 176:Src/main.c    **** 
 177:Src/main.c    ****     /**Configure the main internal regulator output voltage 
 178:Src/main.c    ****     */
 179:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 150              		.loc 1 179 0
 151 0006 0023     		movs	r3, #0
 152 0008 BB60     		str	r3, [r7, #8]
 153 000a 344A     		ldr	r2, .L8
 154 000c 334B     		ldr	r3, .L8
 155 000e 1B6C     		ldr	r3, [r3, #64]
 156 0010 43F08053 		orr	r3, r3, #268435456
 157 0014 1364     		str	r3, [r2, #64]
 158 0016 314B     		ldr	r3, .L8
 159 0018 1B6C     		ldr	r3, [r3, #64]
 160 001a 03F08053 		and	r3, r3, #268435456
 161 001e BB60     		str	r3, [r7, #8]
 162 0020 BB68     		ldr	r3, [r7, #8]
 163              	.LBE2:
 164              	.LBB3:
ARM GAS  /tmp/ccn8Cl3y.s 			page 7


 180:Src/main.c    **** 
 181:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 165              		.loc 1 181 0
 166 0022 0023     		movs	r3, #0
 167 0024 7B60     		str	r3, [r7, #4]
 168 0026 2E4A     		ldr	r2, .L8+4
 169 0028 2D4B     		ldr	r3, .L8+4
 170 002a 1B68     		ldr	r3, [r3]
 171 002c 23F44043 		bic	r3, r3, #49152
 172 0030 43F48043 		orr	r3, r3, #16384
 173 0034 1360     		str	r3, [r2]
 174 0036 2A4B     		ldr	r3, .L8+4
 175 0038 1B68     		ldr	r3, [r3]
 176 003a 03F44043 		and	r3, r3, #49152
 177 003e 7B60     		str	r3, [r7, #4]
 178 0040 7B68     		ldr	r3, [r7, #4]
 179              	.LBE3:
 182:Src/main.c    **** 
 183:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 184:Src/main.c    ****     */
 185:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 180              		.loc 1 185 0
 181 0042 0123     		movs	r3, #1
 182 0044 3B62     		str	r3, [r7, #32]
 186:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 183              		.loc 1 186 0
 184 0046 4FF48033 		mov	r3, #65536
 185 004a 7B62     		str	r3, [r7, #36]
 187:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 186              		.loc 1 187 0
 187 004c 0223     		movs	r3, #2
 188 004e BB63     		str	r3, [r7, #56]
 188:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 189              		.loc 1 188 0
 190 0050 4FF48003 		mov	r3, #4194304
 191 0054 FB63     		str	r3, [r7, #60]
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 192              		.loc 1 189 0
 193 0056 0423     		movs	r3, #4
 194 0058 3B64     		str	r3, [r7, #64]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 195              		.loc 1 190 0
 196 005a 4823     		movs	r3, #72
 197 005c 7B64     		str	r3, [r7, #68]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 198              		.loc 1 191 0
 199 005e 0223     		movs	r3, #2
 200 0060 BB64     		str	r3, [r7, #72]
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 201              		.loc 1 192 0
 202 0062 0323     		movs	r3, #3
 203 0064 FB64     		str	r3, [r7, #76]
 193:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 204              		.loc 1 193 0
 205 0066 07F12003 		add	r3, r7, #32
 206 006a 1846     		mov	r0, r3
 207 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccn8Cl3y.s 			page 8


 208 0070 0346     		mov	r3, r0
 209 0072 002B     		cmp	r3, #0
 210 0074 03D0     		beq	.L6
 194:Src/main.c    ****   {
 195:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 211              		.loc 1 195 0
 212 0076 C321     		movs	r1, #195
 213 0078 1A48     		ldr	r0, .L8+8
 214 007a FFF7FEFF 		bl	_Error_Handler
 215              	.L6:
 196:Src/main.c    ****   }
 197:Src/main.c    **** 
 198:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 199:Src/main.c    ****     */
 200:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 216              		.loc 1 200 0
 217 007e 0F23     		movs	r3, #15
 218 0080 FB60     		str	r3, [r7, #12]
 201:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 202:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 219              		.loc 1 202 0
 220 0082 0223     		movs	r3, #2
 221 0084 3B61     		str	r3, [r7, #16]
 203:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 222              		.loc 1 203 0
 223 0086 0023     		movs	r3, #0
 224 0088 7B61     		str	r3, [r7, #20]
 204:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 225              		.loc 1 204 0
 226 008a 4FF48053 		mov	r3, #4096
 227 008e BB61     		str	r3, [r7, #24]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 228              		.loc 1 205 0
 229 0090 0023     		movs	r3, #0
 230 0092 FB61     		str	r3, [r7, #28]
 206:Src/main.c    **** 
 207:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 231              		.loc 1 207 0
 232 0094 07F10C03 		add	r3, r7, #12
 233 0098 0221     		movs	r1, #2
 234 009a 1846     		mov	r0, r3
 235 009c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 236 00a0 0346     		mov	r3, r0
 237 00a2 002B     		cmp	r3, #0
 238 00a4 03D0     		beq	.L7
 208:Src/main.c    ****   {
 209:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 239              		.loc 1 209 0
 240 00a6 D121     		movs	r1, #209
 241 00a8 0E48     		ldr	r0, .L8+8
 242 00aa FFF7FEFF 		bl	_Error_Handler
 243              	.L7:
 210:Src/main.c    ****   }
 211:Src/main.c    **** 
 212:Src/main.c    ****     /**Configure the Systick interrupt time 
 213:Src/main.c    ****     */
 214:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
ARM GAS  /tmp/ccn8Cl3y.s 			page 9


 244              		.loc 1 214 0
 245 00ae FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 246 00b2 0246     		mov	r2, r0
 247 00b4 0C4B     		ldr	r3, .L8+12
 248 00b6 A3FB0223 		umull	r2, r3, r3, r2
 249 00ba 9B09     		lsrs	r3, r3, #6
 250 00bc 1846     		mov	r0, r3
 251 00be FFF7FEFF 		bl	HAL_SYSTICK_Config
 215:Src/main.c    **** 
 216:Src/main.c    ****     /**Configure the Systick 
 217:Src/main.c    ****     */
 218:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 252              		.loc 1 218 0
 253 00c2 0420     		movs	r0, #4
 254 00c4 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 221:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 255              		.loc 1 221 0
 256 00c8 0022     		movs	r2, #0
 257 00ca 0F21     		movs	r1, #15
 258 00cc 4FF0FF30 		mov	r0, #-1
 259 00d0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 222:Src/main.c    **** }
 260              		.loc 1 222 0
 261 00d4 00BF     		nop
 262 00d6 5037     		adds	r7, r7, #80
 263              	.LCFI6:
 264              		.cfi_def_cfa_offset 8
 265 00d8 BD46     		mov	sp, r7
 266              	.LCFI7:
 267              		.cfi_def_cfa_register 13
 268              		@ sp needed
 269 00da 80BD     		pop	{r7, pc}
 270              	.L9:
 271              		.align	2
 272              	.L8:
 273 00dc 00380240 		.word	1073887232
 274 00e0 00700040 		.word	1073770496
 275 00e4 28000000 		.word	.LC4
 276 00e8 D34D6210 		.word	274877907
 277              		.cfi_endproc
 278              	.LFE130:
 280              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 281              		.align	1
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	MX_USART1_UART_Init:
 288              	.LFB131:
 223:Src/main.c    **** 
 224:Src/main.c    **** /* USART1 init function */
 225:Src/main.c    **** static void MX_USART1_UART_Init(void)
 226:Src/main.c    **** {
 289              		.loc 1 226 0
 290              		.cfi_startproc
ARM GAS  /tmp/ccn8Cl3y.s 			page 10


 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293 0000 80B5     		push	{r7, lr}
 294              	.LCFI8:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 7, -8
 297              		.cfi_offset 14, -4
 298 0002 00AF     		add	r7, sp, #0
 299              	.LCFI9:
 300              		.cfi_def_cfa_register 7
 227:Src/main.c    **** 
 228:Src/main.c    ****   huart1.Instance = USART1;
 301              		.loc 1 228 0
 302 0004 124B     		ldr	r3, .L13
 303 0006 134A     		ldr	r2, .L13+4
 304 0008 1A60     		str	r2, [r3]
 229:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 305              		.loc 1 229 0
 306 000a 114B     		ldr	r3, .L13
 307 000c 4FF4E132 		mov	r2, #115200
 308 0010 5A60     		str	r2, [r3, #4]
 230:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 309              		.loc 1 230 0
 310 0012 0F4B     		ldr	r3, .L13
 311 0014 0022     		movs	r2, #0
 312 0016 9A60     		str	r2, [r3, #8]
 231:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 313              		.loc 1 231 0
 314 0018 0D4B     		ldr	r3, .L13
 315 001a 0022     		movs	r2, #0
 316 001c DA60     		str	r2, [r3, #12]
 232:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 317              		.loc 1 232 0
 318 001e 0C4B     		ldr	r3, .L13
 319 0020 0022     		movs	r2, #0
 320 0022 1A61     		str	r2, [r3, #16]
 233:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 321              		.loc 1 233 0
 322 0024 0A4B     		ldr	r3, .L13
 323 0026 0C22     		movs	r2, #12
 324 0028 5A61     		str	r2, [r3, #20]
 234:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 325              		.loc 1 234 0
 326 002a 094B     		ldr	r3, .L13
 327 002c 0022     		movs	r2, #0
 328 002e 9A61     		str	r2, [r3, #24]
 235:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 329              		.loc 1 235 0
 330 0030 074B     		ldr	r3, .L13
 331 0032 0022     		movs	r2, #0
 332 0034 DA61     		str	r2, [r3, #28]
 236:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 333              		.loc 1 236 0
 334 0036 0648     		ldr	r0, .L13
 335 0038 FFF7FEFF 		bl	HAL_UART_Init
 336 003c 0346     		mov	r3, r0
 337 003e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccn8Cl3y.s 			page 11


 338 0040 03D0     		beq	.L12
 237:Src/main.c    ****   {
 238:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 339              		.loc 1 238 0
 340 0042 EE21     		movs	r1, #238
 341 0044 0448     		ldr	r0, .L13+8
 342 0046 FFF7FEFF 		bl	_Error_Handler
 343              	.L12:
 239:Src/main.c    ****   }
 240:Src/main.c    **** 
 241:Src/main.c    **** }
 344              		.loc 1 241 0
 345 004a 00BF     		nop
 346 004c 80BD     		pop	{r7, pc}
 347              	.L14:
 348 004e 00BF     		.align	2
 349              	.L13:
 350 0050 00000000 		.word	huart1
 351 0054 00100140 		.word	1073811456
 352 0058 28000000 		.word	.LC4
 353              		.cfi_endproc
 354              	.LFE131:
 356              		.section	.text.MX_GPIO_Init,"ax",%progbits
 357              		.align	1
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu fpv4-sp-d16
 363              	MX_GPIO_Init:
 364              	.LFB132:
 242:Src/main.c    **** 
 243:Src/main.c    **** /** Configure pins as 
 244:Src/main.c    ****         * Analog 
 245:Src/main.c    ****         * Input 
 246:Src/main.c    ****         * Output
 247:Src/main.c    ****         * EVENT_OUT
 248:Src/main.c    ****         * EXTI
 249:Src/main.c    ****      PF0   ------> FMC_A0
 250:Src/main.c    ****      PF1   ------> FMC_A1
 251:Src/main.c    ****      PF2   ------> FMC_A2
 252:Src/main.c    ****      PF3   ------> FMC_A3
 253:Src/main.c    ****      PF4   ------> FMC_A4
 254:Src/main.c    ****      PF5   ------> FMC_A5
 255:Src/main.c    ****      PF7   ------> SPI5_SCK
 256:Src/main.c    ****      PF8   ------> SPI5_MISO
 257:Src/main.c    ****      PF9   ------> SPI5_MOSI
 258:Src/main.c    ****      PF10   ------> LTDC_DE
 259:Src/main.c    ****      PC0   ------> FMC_SDNWE
 260:Src/main.c    ****      PA3   ------> LTDC_B5
 261:Src/main.c    ****      PA4   ------> LTDC_VSYNC
 262:Src/main.c    ****      PA6   ------> LTDC_G2
 263:Src/main.c    ****      PB0   ------> LTDC_R3
 264:Src/main.c    ****      PB1   ------> LTDC_R6
 265:Src/main.c    ****      PF11   ------> FMC_SDNRAS
 266:Src/main.c    ****      PF12   ------> FMC_A6
 267:Src/main.c    ****      PF13   ------> FMC_A7
 268:Src/main.c    ****      PF14   ------> FMC_A8
ARM GAS  /tmp/ccn8Cl3y.s 			page 12


 269:Src/main.c    ****      PF15   ------> FMC_A9
 270:Src/main.c    ****      PG0   ------> FMC_A10
 271:Src/main.c    ****      PG1   ------> FMC_A11
 272:Src/main.c    ****      PE7   ------> FMC_D4_DA4
 273:Src/main.c    ****      PE8   ------> FMC_D5_DA5
 274:Src/main.c    ****      PE9   ------> FMC_D6_DA6
 275:Src/main.c    ****      PE10   ------> FMC_D7_DA7
 276:Src/main.c    ****      PE11   ------> FMC_D8_DA8
 277:Src/main.c    ****      PE12   ------> FMC_D9_DA9
 278:Src/main.c    ****      PE13   ------> FMC_D10_DA10
 279:Src/main.c    ****      PE14   ------> FMC_D11_DA11
 280:Src/main.c    ****      PE15   ------> FMC_D12_DA12
 281:Src/main.c    ****      PB10   ------> LTDC_G4
 282:Src/main.c    ****      PB11   ------> LTDC_G5
 283:Src/main.c    ****      PD8   ------> FMC_D13_DA13
 284:Src/main.c    ****      PD9   ------> FMC_D14_DA14
 285:Src/main.c    ****      PD10   ------> FMC_D15_DA15
 286:Src/main.c    ****      PD14   ------> FMC_D0_DA0
 287:Src/main.c    ****      PD15   ------> FMC_D1_DA1
 288:Src/main.c    ****      PG4   ------> FMC_A14_BA0
 289:Src/main.c    ****      PG5   ------> FMC_A15_BA1
 290:Src/main.c    ****      PG6   ------> LTDC_R7
 291:Src/main.c    ****      PG7   ------> LTDC_CLK
 292:Src/main.c    ****      PG8   ------> FMC_SDCLK
 293:Src/main.c    ****      PC6   ------> LTDC_HSYNC
 294:Src/main.c    ****      PC7   ------> LTDC_G6
 295:Src/main.c    ****      PC9   ------> I2C3_SDA
 296:Src/main.c    ****      PA8   ------> I2C3_SCL
 297:Src/main.c    ****      PA11   ------> LTDC_R4
 298:Src/main.c    ****      PA12   ------> LTDC_R5
 299:Src/main.c    ****      PC10   ------> LTDC_R2
 300:Src/main.c    ****      PD0   ------> FMC_D2_DA2
 301:Src/main.c    ****      PD1   ------> FMC_D3_DA3
 302:Src/main.c    ****      PD3   ------> LTDC_G7
 303:Src/main.c    ****      PD6   ------> LTDC_B2
 304:Src/main.c    ****      PG10   ------> LTDC_G3
 305:Src/main.c    ****      PG11   ------> LTDC_B3
 306:Src/main.c    ****      PG12   ------> LTDC_B4
 307:Src/main.c    ****      PG15   ------> FMC_SDNCAS
 308:Src/main.c    ****      PB5   ------> FMC_SDCKE1
 309:Src/main.c    ****      PB6   ------> FMC_SDNE1
 310:Src/main.c    ****      PB8   ------> LTDC_B6
 311:Src/main.c    ****      PB9   ------> LTDC_B7
 312:Src/main.c    ****      PE0   ------> FMC_NBL0
 313:Src/main.c    ****      PE1   ------> FMC_NBL1
 314:Src/main.c    **** */
 315:Src/main.c    **** static void MX_GPIO_Init(void)
 316:Src/main.c    **** {
 365              		.loc 1 316 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 56
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0000 80B5     		push	{r7, lr}
 370              	.LCFI10:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
ARM GAS  /tmp/ccn8Cl3y.s 			page 13


 374 0002 8EB0     		sub	sp, sp, #56
 375              	.LCFI11:
 376              		.cfi_def_cfa_offset 64
 377 0004 00AF     		add	r7, sp, #0
 378              	.LCFI12:
 379              		.cfi_def_cfa_register 7
 380              	.LBB4:
 317:Src/main.c    **** 
 318:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* GPIO Ports Clock Enable */
 321:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 381              		.loc 1 321 0
 382 0006 0023     		movs	r3, #0
 383 0008 3B62     		str	r3, [r7, #32]
 384 000a B14A     		ldr	r2, .L16
 385 000c B04B     		ldr	r3, .L16
 386 000e 1B6B     		ldr	r3, [r3, #48]
 387 0010 43F00403 		orr	r3, r3, #4
 388 0014 1363     		str	r3, [r2, #48]
 389 0016 AE4B     		ldr	r3, .L16
 390 0018 1B6B     		ldr	r3, [r3, #48]
 391 001a 03F00403 		and	r3, r3, #4
 392 001e 3B62     		str	r3, [r7, #32]
 393 0020 3B6A     		ldr	r3, [r7, #32]
 394              	.LBE4:
 395              	.LBB5:
 322:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 396              		.loc 1 322 0
 397 0022 0023     		movs	r3, #0
 398 0024 FB61     		str	r3, [r7, #28]
 399 0026 AA4A     		ldr	r2, .L16
 400 0028 A94B     		ldr	r3, .L16
 401 002a 1B6B     		ldr	r3, [r3, #48]
 402 002c 43F02003 		orr	r3, r3, #32
 403 0030 1363     		str	r3, [r2, #48]
 404 0032 A74B     		ldr	r3, .L16
 405 0034 1B6B     		ldr	r3, [r3, #48]
 406 0036 03F02003 		and	r3, r3, #32
 407 003a FB61     		str	r3, [r7, #28]
 408 003c FB69     		ldr	r3, [r7, #28]
 409              	.LBE5:
 410              	.LBB6:
 323:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
 411              		.loc 1 323 0
 412 003e 0023     		movs	r3, #0
 413 0040 BB61     		str	r3, [r7, #24]
 414 0042 A34A     		ldr	r2, .L16
 415 0044 A24B     		ldr	r3, .L16
 416 0046 1B6B     		ldr	r3, [r3, #48]
 417 0048 43F08003 		orr	r3, r3, #128
 418 004c 1363     		str	r3, [r2, #48]
 419 004e A04B     		ldr	r3, .L16
 420 0050 1B6B     		ldr	r3, [r3, #48]
 421 0052 03F08003 		and	r3, r3, #128
 422 0056 BB61     		str	r3, [r7, #24]
 423 0058 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccn8Cl3y.s 			page 14


 424              	.LBE6:
 425              	.LBB7:
 324:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 426              		.loc 1 324 0
 427 005a 0023     		movs	r3, #0
 428 005c 7B61     		str	r3, [r7, #20]
 429 005e 9C4A     		ldr	r2, .L16
 430 0060 9B4B     		ldr	r3, .L16
 431 0062 1B6B     		ldr	r3, [r3, #48]
 432 0064 43F00103 		orr	r3, r3, #1
 433 0068 1363     		str	r3, [r2, #48]
 434 006a 994B     		ldr	r3, .L16
 435 006c 1B6B     		ldr	r3, [r3, #48]
 436 006e 03F00103 		and	r3, r3, #1
 437 0072 7B61     		str	r3, [r7, #20]
 438 0074 7B69     		ldr	r3, [r7, #20]
 439              	.LBE7:
 440              	.LBB8:
 325:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 441              		.loc 1 325 0
 442 0076 0023     		movs	r3, #0
 443 0078 3B61     		str	r3, [r7, #16]
 444 007a 954A     		ldr	r2, .L16
 445 007c 944B     		ldr	r3, .L16
 446 007e 1B6B     		ldr	r3, [r3, #48]
 447 0080 43F00203 		orr	r3, r3, #2
 448 0084 1363     		str	r3, [r2, #48]
 449 0086 924B     		ldr	r3, .L16
 450 0088 1B6B     		ldr	r3, [r3, #48]
 451 008a 03F00203 		and	r3, r3, #2
 452 008e 3B61     		str	r3, [r7, #16]
 453 0090 3B69     		ldr	r3, [r7, #16]
 454              	.LBE8:
 455              	.LBB9:
 326:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 456              		.loc 1 326 0
 457 0092 0023     		movs	r3, #0
 458 0094 FB60     		str	r3, [r7, #12]
 459 0096 8E4A     		ldr	r2, .L16
 460 0098 8D4B     		ldr	r3, .L16
 461 009a 1B6B     		ldr	r3, [r3, #48]
 462 009c 43F04003 		orr	r3, r3, #64
 463 00a0 1363     		str	r3, [r2, #48]
 464 00a2 8B4B     		ldr	r3, .L16
 465 00a4 1B6B     		ldr	r3, [r3, #48]
 466 00a6 03F04003 		and	r3, r3, #64
 467 00aa FB60     		str	r3, [r7, #12]
 468 00ac FB68     		ldr	r3, [r7, #12]
 469              	.LBE9:
 470              	.LBB10:
 327:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 471              		.loc 1 327 0
 472 00ae 0023     		movs	r3, #0
 473 00b0 BB60     		str	r3, [r7, #8]
 474 00b2 874A     		ldr	r2, .L16
 475 00b4 864B     		ldr	r3, .L16
 476 00b6 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccn8Cl3y.s 			page 15


 477 00b8 43F01003 		orr	r3, r3, #16
 478 00bc 1363     		str	r3, [r2, #48]
 479 00be 844B     		ldr	r3, .L16
 480 00c0 1B6B     		ldr	r3, [r3, #48]
 481 00c2 03F01003 		and	r3, r3, #16
 482 00c6 BB60     		str	r3, [r7, #8]
 483 00c8 BB68     		ldr	r3, [r7, #8]
 484              	.LBE10:
 485              	.LBB11:
 328:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 486              		.loc 1 328 0
 487 00ca 0023     		movs	r3, #0
 488 00cc 7B60     		str	r3, [r7, #4]
 489 00ce 804A     		ldr	r2, .L16
 490 00d0 7F4B     		ldr	r3, .L16
 491 00d2 1B6B     		ldr	r3, [r3, #48]
 492 00d4 43F00803 		orr	r3, r3, #8
 493 00d8 1363     		str	r3, [r2, #48]
 494 00da 7D4B     		ldr	r3, .L16
 495 00dc 1B6B     		ldr	r3, [r3, #48]
 496 00de 03F00803 		and	r3, r3, #8
 497 00e2 7B60     		str	r3, [r7, #4]
 498 00e4 7B68     		ldr	r3, [r7, #4]
 499              	.LBE11:
 329:Src/main.c    **** 
 330:Src/main.c    ****   /*Configure GPIO pin Output Level */
 331:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 500              		.loc 1 331 0
 501 00e6 0022     		movs	r2, #0
 502 00e8 1621     		movs	r1, #22
 503 00ea 7A48     		ldr	r0, .L16+4
 504 00ec FFF7FEFF 		bl	HAL_GPIO_WritePin
 332:Src/main.c    **** 
 333:Src/main.c    ****   /*Configure GPIO pin Output Level */
 334:Src/main.c    ****   HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 505              		.loc 1 334 0
 506 00f0 0022     		movs	r2, #0
 507 00f2 8021     		movs	r1, #128
 508 00f4 7848     		ldr	r0, .L16+8
 509 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 335:Src/main.c    **** 
 336:Src/main.c    ****   /*Configure GPIO pin Output Level */
 337:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 510              		.loc 1 337 0
 511 00fa 0022     		movs	r2, #0
 512 00fc 4FF44051 		mov	r1, #12288
 513 0100 7648     		ldr	r0, .L16+12
 514 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 338:Src/main.c    **** 
 339:Src/main.c    ****   /*Configure GPIO pin Output Level */
 340:Src/main.c    ****   HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 515              		.loc 1 340 0
 516 0106 0022     		movs	r2, #0
 517 0108 4FF4C041 		mov	r1, #24576
 518 010c 7448     		ldr	r0, .L16+16
 519 010e FFF7FEFF 		bl	HAL_GPIO_WritePin
 341:Src/main.c    **** 
ARM GAS  /tmp/ccn8Cl3y.s 			page 16


 342:Src/main.c    ****   /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin 
 343:Src/main.c    ****                            A4_Pin A5_Pin SDNRAS_Pin A6_Pin 
 344:Src/main.c    ****                            A7_Pin A8_Pin A9_Pin */
 345:Src/main.c    ****   GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 520              		.loc 1 345 0
 521 0112 4FF63F03 		movw	r3, #63551
 522 0116 7B62     		str	r3, [r7, #36]
 346:Src/main.c    ****                           |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
 347:Src/main.c    ****                           |A7_Pin|A8_Pin|A9_Pin;
 348:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 523              		.loc 1 348 0
 524 0118 0223     		movs	r3, #2
 525 011a BB62     		str	r3, [r7, #40]
 349:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 526              		.loc 1 349 0
 527 011c 0023     		movs	r3, #0
 528 011e FB62     		str	r3, [r7, #44]
 350:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 529              		.loc 1 350 0
 530 0120 0323     		movs	r3, #3
 531 0122 3B63     		str	r3, [r7, #48]
 351:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 532              		.loc 1 351 0
 533 0124 0C23     		movs	r3, #12
 534 0126 7B63     		str	r3, [r7, #52]
 352:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 535              		.loc 1 352 0
 536 0128 07F12403 		add	r3, r7, #36
 537 012c 1946     		mov	r1, r3
 538 012e 6D48     		ldr	r0, .L16+20
 539 0130 FFF7FEFF 		bl	HAL_GPIO_Init
 353:Src/main.c    **** 
 354:Src/main.c    ****   /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
 355:Src/main.c    ****   GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 540              		.loc 1 355 0
 541 0134 4FF46073 		mov	r3, #896
 542 0138 7B62     		str	r3, [r7, #36]
 356:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 543              		.loc 1 356 0
 544 013a 0223     		movs	r3, #2
 545 013c BB62     		str	r3, [r7, #40]
 357:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 546              		.loc 1 357 0
 547 013e 0023     		movs	r3, #0
 548 0140 FB62     		str	r3, [r7, #44]
 358:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 549              		.loc 1 358 0
 550 0142 0023     		movs	r3, #0
 551 0144 3B63     		str	r3, [r7, #48]
 359:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 552              		.loc 1 359 0
 553 0146 0523     		movs	r3, #5
 554 0148 7B63     		str	r3, [r7, #52]
 360:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 555              		.loc 1 360 0
 556 014a 07F12403 		add	r3, r7, #36
 557 014e 1946     		mov	r1, r3
ARM GAS  /tmp/ccn8Cl3y.s 			page 17


 558 0150 6448     		ldr	r0, .L16+20
 559 0152 FFF7FEFF 		bl	HAL_GPIO_Init
 361:Src/main.c    **** 
 362:Src/main.c    ****   /*Configure GPIO pin : ENABLE_Pin */
 363:Src/main.c    ****   GPIO_InitStruct.Pin = ENABLE_Pin;
 560              		.loc 1 363 0
 561 0156 4FF48063 		mov	r3, #1024
 562 015a 7B62     		str	r3, [r7, #36]
 364:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 563              		.loc 1 364 0
 564 015c 0223     		movs	r3, #2
 565 015e BB62     		str	r3, [r7, #40]
 365:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 566              		.loc 1 365 0
 567 0160 0023     		movs	r3, #0
 568 0162 FB62     		str	r3, [r7, #44]
 366:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 569              		.loc 1 366 0
 570 0164 0023     		movs	r3, #0
 571 0166 3B63     		str	r3, [r7, #48]
 367:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 572              		.loc 1 367 0
 573 0168 0E23     		movs	r3, #14
 574 016a 7B63     		str	r3, [r7, #52]
 368:Src/main.c    ****   HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 575              		.loc 1 368 0
 576 016c 07F12403 		add	r3, r7, #36
 577 0170 1946     		mov	r1, r3
 578 0172 5C48     		ldr	r0, .L16+20
 579 0174 FFF7FEFF 		bl	HAL_GPIO_Init
 369:Src/main.c    **** 
 370:Src/main.c    ****   /*Configure GPIO pin : SDNWE_Pin */
 371:Src/main.c    ****   GPIO_InitStruct.Pin = SDNWE_Pin;
 580              		.loc 1 371 0
 581 0178 0123     		movs	r3, #1
 582 017a 7B62     		str	r3, [r7, #36]
 372:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 583              		.loc 1 372 0
 584 017c 0223     		movs	r3, #2
 585 017e BB62     		str	r3, [r7, #40]
 373:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 586              		.loc 1 373 0
 587 0180 0023     		movs	r3, #0
 588 0182 FB62     		str	r3, [r7, #44]
 374:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 589              		.loc 1 374 0
 590 0184 0323     		movs	r3, #3
 591 0186 3B63     		str	r3, [r7, #48]
 375:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 592              		.loc 1 375 0
 593 0188 0C23     		movs	r3, #12
 594 018a 7B63     		str	r3, [r7, #52]
 376:Src/main.c    ****   HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 595              		.loc 1 376 0
 596 018c 07F12403 		add	r3, r7, #36
 597 0190 1946     		mov	r1, r3
 598 0192 5048     		ldr	r0, .L16+4
ARM GAS  /tmp/ccn8Cl3y.s 			page 18


 599 0194 FFF7FEFF 		bl	HAL_GPIO_Init
 377:Src/main.c    **** 
 378:Src/main.c    ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
 379:Src/main.c    ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 600              		.loc 1 379 0
 601 0198 1623     		movs	r3, #22
 602 019a 7B62     		str	r3, [r7, #36]
 380:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 603              		.loc 1 380 0
 604 019c 0123     		movs	r3, #1
 605 019e BB62     		str	r3, [r7, #40]
 381:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 606              		.loc 1 381 0
 607 01a0 0023     		movs	r3, #0
 608 01a2 FB62     		str	r3, [r7, #44]
 382:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 609              		.loc 1 382 0
 610 01a4 0023     		movs	r3, #0
 611 01a6 3B63     		str	r3, [r7, #48]
 383:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 612              		.loc 1 383 0
 613 01a8 07F12403 		add	r3, r7, #36
 614 01ac 1946     		mov	r1, r3
 615 01ae 4948     		ldr	r0, .L16+4
 616 01b0 FFF7FEFF 		bl	HAL_GPIO_Init
 384:Src/main.c    **** 
 385:Src/main.c    ****   /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
 386:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 617              		.loc 1 386 0
 618 01b4 48F20703 		movw	r3, #32775
 619 01b8 7B62     		str	r3, [r7, #36]
 387:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 620              		.loc 1 387 0
 621 01ba 4B4B     		ldr	r3, .L16+24
 622 01bc BB62     		str	r3, [r7, #40]
 388:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 623              		.loc 1 388 0
 624 01be 0023     		movs	r3, #0
 625 01c0 FB62     		str	r3, [r7, #44]
 389:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 626              		.loc 1 389 0
 627 01c2 07F12403 		add	r3, r7, #36
 628 01c6 1946     		mov	r1, r3
 629 01c8 4348     		ldr	r0, .L16+8
 630 01ca FFF7FEFF 		bl	HAL_GPIO_Init
 390:Src/main.c    **** 
 391:Src/main.c    ****   /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin 
 392:Src/main.c    ****                            R5_Pin */
 393:Src/main.c    ****   GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 631              		.loc 1 393 0
 632 01ce 41F65803 		movw	r3, #6232
 633 01d2 7B62     		str	r3, [r7, #36]
 394:Src/main.c    ****                           |R5_Pin;
 395:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 634              		.loc 1 395 0
 635 01d4 0223     		movs	r3, #2
 636 01d6 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccn8Cl3y.s 			page 19


 396:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 637              		.loc 1 396 0
 638 01d8 0023     		movs	r3, #0
 639 01da FB62     		str	r3, [r7, #44]
 397:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 640              		.loc 1 397 0
 641 01dc 0023     		movs	r3, #0
 642 01de 3B63     		str	r3, [r7, #48]
 398:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 643              		.loc 1 398 0
 644 01e0 0E23     		movs	r3, #14
 645 01e2 7B63     		str	r3, [r7, #52]
 399:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 646              		.loc 1 399 0
 647 01e4 07F12403 		add	r3, r7, #36
 648 01e8 1946     		mov	r1, r3
 649 01ea 3B48     		ldr	r0, .L16+8
 650 01ec FFF7FEFF 		bl	HAL_GPIO_Init
 400:Src/main.c    **** 
 401:Src/main.c    ****   /*Configure GPIO pin : ACP_RST_Pin */
 402:Src/main.c    ****   GPIO_InitStruct.Pin = ACP_RST_Pin;
 651              		.loc 1 402 0
 652 01f0 8023     		movs	r3, #128
 653 01f2 7B62     		str	r3, [r7, #36]
 403:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 654              		.loc 1 403 0
 655 01f4 0123     		movs	r3, #1
 656 01f6 BB62     		str	r3, [r7, #40]
 404:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 657              		.loc 1 404 0
 658 01f8 0023     		movs	r3, #0
 659 01fa FB62     		str	r3, [r7, #44]
 405:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 660              		.loc 1 405 0
 661 01fc 0023     		movs	r3, #0
 662 01fe 3B63     		str	r3, [r7, #48]
 406:Src/main.c    ****   HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 663              		.loc 1 406 0
 664 0200 07F12403 		add	r3, r7, #36
 665 0204 1946     		mov	r1, r3
 666 0206 3448     		ldr	r0, .L16+8
 667 0208 FFF7FEFF 		bl	HAL_GPIO_Init
 407:Src/main.c    **** 
 408:Src/main.c    ****   /*Configure GPIO pin : OTG_FS_OC_Pin */
 409:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 668              		.loc 1 409 0
 669 020c 2023     		movs	r3, #32
 670 020e 7B62     		str	r3, [r7, #36]
 410:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 671              		.loc 1 410 0
 672 0210 354B     		ldr	r3, .L16+24
 673 0212 BB62     		str	r3, [r7, #40]
 411:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 674              		.loc 1 411 0
 675 0214 0023     		movs	r3, #0
 676 0216 FB62     		str	r3, [r7, #44]
 412:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
ARM GAS  /tmp/ccn8Cl3y.s 			page 20


 677              		.loc 1 412 0
 678 0218 07F12403 		add	r3, r7, #36
 679 021c 1946     		mov	r1, r3
 680 021e 2D48     		ldr	r0, .L16+4
 681 0220 FFF7FEFF 		bl	HAL_GPIO_Init
 413:Src/main.c    **** 
 414:Src/main.c    ****   /*Configure GPIO pins : R3_Pin R6_Pin */
 415:Src/main.c    ****   GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 682              		.loc 1 415 0
 683 0224 0323     		movs	r3, #3
 684 0226 7B62     		str	r3, [r7, #36]
 416:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 685              		.loc 1 416 0
 686 0228 0223     		movs	r3, #2
 687 022a BB62     		str	r3, [r7, #40]
 417:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 688              		.loc 1 417 0
 689 022c 0023     		movs	r3, #0
 690 022e FB62     		str	r3, [r7, #44]
 418:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 691              		.loc 1 418 0
 692 0230 0023     		movs	r3, #0
 693 0232 3B63     		str	r3, [r7, #48]
 419:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 694              		.loc 1 419 0
 695 0234 0923     		movs	r3, #9
 696 0236 7B63     		str	r3, [r7, #52]
 420:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 697              		.loc 1 420 0
 698 0238 07F12403 		add	r3, r7, #36
 699 023c 1946     		mov	r1, r3
 700 023e 2B48     		ldr	r0, .L16+28
 701 0240 FFF7FEFF 		bl	HAL_GPIO_Init
 421:Src/main.c    **** 
 422:Src/main.c    ****   /*Configure GPIO pin : BOOT1_Pin */
 423:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 702              		.loc 1 423 0
 703 0244 0423     		movs	r3, #4
 704 0246 7B62     		str	r3, [r7, #36]
 424:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 705              		.loc 1 424 0
 706 0248 0023     		movs	r3, #0
 707 024a BB62     		str	r3, [r7, #40]
 425:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 708              		.loc 1 425 0
 709 024c 0023     		movs	r3, #0
 710 024e FB62     		str	r3, [r7, #44]
 426:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 711              		.loc 1 426 0
 712 0250 07F12403 		add	r3, r7, #36
 713 0254 1946     		mov	r1, r3
 714 0256 2548     		ldr	r0, .L16+28
 715 0258 FFF7FEFF 		bl	HAL_GPIO_Init
 427:Src/main.c    **** 
 428:Src/main.c    ****   /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin 
 429:Src/main.c    ****                            SDCLK_Pin SDNCAS_Pin */
 430:Src/main.c    ****   GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
ARM GAS  /tmp/ccn8Cl3y.s 			page 21


 716              		.loc 1 430 0
 717 025c 48F23313 		movw	r3, #33075
 718 0260 7B62     		str	r3, [r7, #36]
 431:Src/main.c    ****                           |SDCLK_Pin|SDNCAS_Pin;
 432:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 719              		.loc 1 432 0
 720 0262 0223     		movs	r3, #2
 721 0264 BB62     		str	r3, [r7, #40]
 433:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 722              		.loc 1 433 0
 723 0266 0023     		movs	r3, #0
 724 0268 FB62     		str	r3, [r7, #44]
 434:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 725              		.loc 1 434 0
 726 026a 0323     		movs	r3, #3
 727 026c 3B63     		str	r3, [r7, #48]
 435:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 728              		.loc 1 435 0
 729 026e 0C23     		movs	r3, #12
 730 0270 7B63     		str	r3, [r7, #52]
 436:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 731              		.loc 1 436 0
 732 0272 07F12403 		add	r3, r7, #36
 733 0276 1946     		mov	r1, r3
 734 0278 1948     		ldr	r0, .L16+16
 735 027a FFF7FEFF 		bl	HAL_GPIO_Init
 437:Src/main.c    **** 
 438:Src/main.c    ****   /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin 
 439:Src/main.c    ****                            D8_Pin D9_Pin D10_Pin D11_Pin 
 440:Src/main.c    ****                            D12_Pin NBL0_Pin NBL1_Pin */
 441:Src/main.c    ****   GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 736              		.loc 1 441 0
 737 027e 4FF68373 		movw	r3, #65411
 738 0282 7B62     		str	r3, [r7, #36]
 442:Src/main.c    ****                           |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
 443:Src/main.c    ****                           |D12_Pin|NBL0_Pin|NBL1_Pin;
 444:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 739              		.loc 1 444 0
 740 0284 0223     		movs	r3, #2
 741 0286 BB62     		str	r3, [r7, #40]
 445:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 742              		.loc 1 445 0
 743 0288 0023     		movs	r3, #0
 744 028a FB62     		str	r3, [r7, #44]
 446:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 745              		.loc 1 446 0
 746 028c 0323     		movs	r3, #3
 747 028e 3B63     		str	r3, [r7, #48]
 447:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 748              		.loc 1 447 0
 749 0290 0C23     		movs	r3, #12
 750 0292 7B63     		str	r3, [r7, #52]
 448:Src/main.c    ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 751              		.loc 1 448 0
 752 0294 07F12403 		add	r3, r7, #36
 753 0298 1946     		mov	r1, r3
 754 029a 1548     		ldr	r0, .L16+32
ARM GAS  /tmp/ccn8Cl3y.s 			page 22


 755 029c FFF7FEFF 		bl	HAL_GPIO_Init
 449:Src/main.c    **** 
 450:Src/main.c    ****   /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
 451:Src/main.c    ****   GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 756              		.loc 1 451 0
 757 02a0 4FF47063 		mov	r3, #3840
 758 02a4 7B62     		str	r3, [r7, #36]
 452:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 759              		.loc 1 452 0
 760 02a6 0223     		movs	r3, #2
 761 02a8 BB62     		str	r3, [r7, #40]
 453:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 762              		.loc 1 453 0
 763 02aa 0023     		movs	r3, #0
 764 02ac FB62     		str	r3, [r7, #44]
 454:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 765              		.loc 1 454 0
 766 02ae 0023     		movs	r3, #0
 767 02b0 3B63     		str	r3, [r7, #48]
 455:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 768              		.loc 1 455 0
 769 02b2 0E23     		movs	r3, #14
 770 02b4 7B63     		str	r3, [r7, #52]
 456:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 771              		.loc 1 456 0
 772 02b6 07F12403 		add	r3, r7, #36
 773 02ba 1946     		mov	r1, r3
 774 02bc 0B48     		ldr	r0, .L16+28
 775 02be FFF7FEFF 		bl	HAL_GPIO_Init
 457:Src/main.c    **** 
 458:Src/main.c    ****   /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin 
 459:Src/main.c    ****                            D1_Pin D2_Pin D3_Pin */
 460:Src/main.c    ****   GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 776              		.loc 1 460 0
 777 02c2 4CF20373 		movw	r3, #50947
 778 02c6 7B62     		str	r3, [r7, #36]
 461:Src/main.c    ****                           |D1_Pin|D2_Pin|D3_Pin;
 462:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 779              		.loc 1 462 0
 780 02c8 0223     		movs	r3, #2
 781 02ca BB62     		str	r3, [r7, #40]
 782 02cc 12E0     		b	.L17
 783              	.L18:
 784 02ce 00BF     		.align	2
 785              	.L16:
 786 02d0 00380240 		.word	1073887232
 787 02d4 00080240 		.word	1073874944
 788 02d8 00000240 		.word	1073872896
 789 02dc 000C0240 		.word	1073875968
 790 02e0 00180240 		.word	1073879040
 791 02e4 00140240 		.word	1073878016
 792 02e8 00001210 		.word	269615104
 793 02ec 00040240 		.word	1073873920
 794 02f0 00100240 		.word	1073876992
 795              	.L17:
 463:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 796              		.loc 1 463 0
ARM GAS  /tmp/ccn8Cl3y.s 			page 23


 797 02f4 0023     		movs	r3, #0
 798 02f6 FB62     		str	r3, [r7, #44]
 464:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 799              		.loc 1 464 0
 800 02f8 0323     		movs	r3, #3
 801 02fa 3B63     		str	r3, [r7, #48]
 465:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 802              		.loc 1 465 0
 803 02fc 0C23     		movs	r3, #12
 804 02fe 7B63     		str	r3, [r7, #52]
 466:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 805              		.loc 1 466 0
 806 0300 07F12403 		add	r3, r7, #36
 807 0304 1946     		mov	r1, r3
 808 0306 5348     		ldr	r0, .L19
 809 0308 FFF7FEFF 		bl	HAL_GPIO_Init
 467:Src/main.c    **** 
 468:Src/main.c    ****   /*Configure GPIO pin : TE_Pin */
 469:Src/main.c    ****   GPIO_InitStruct.Pin = TE_Pin;
 810              		.loc 1 469 0
 811 030c 4FF40063 		mov	r3, #2048
 812 0310 7B62     		str	r3, [r7, #36]
 470:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 813              		.loc 1 470 0
 814 0312 0023     		movs	r3, #0
 815 0314 BB62     		str	r3, [r7, #40]
 471:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 816              		.loc 1 471 0
 817 0316 0023     		movs	r3, #0
 818 0318 FB62     		str	r3, [r7, #44]
 472:Src/main.c    ****   HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 819              		.loc 1 472 0
 820 031a 07F12403 		add	r3, r7, #36
 821 031e 1946     		mov	r1, r3
 822 0320 4C48     		ldr	r0, .L19
 823 0322 FFF7FEFF 		bl	HAL_GPIO_Init
 473:Src/main.c    **** 
 474:Src/main.c    ****   /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
 475:Src/main.c    ****   GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 824              		.loc 1 475 0
 825 0326 4FF44053 		mov	r3, #12288
 826 032a 7B62     		str	r3, [r7, #36]
 476:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 827              		.loc 1 476 0
 828 032c 0123     		movs	r3, #1
 829 032e BB62     		str	r3, [r7, #40]
 477:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 830              		.loc 1 477 0
 831 0330 0023     		movs	r3, #0
 832 0332 FB62     		str	r3, [r7, #44]
 478:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 833              		.loc 1 478 0
 834 0334 0023     		movs	r3, #0
 835 0336 3B63     		str	r3, [r7, #48]
 479:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 836              		.loc 1 479 0
 837 0338 07F12403 		add	r3, r7, #36
ARM GAS  /tmp/ccn8Cl3y.s 			page 24


 838 033c 1946     		mov	r1, r3
 839 033e 4548     		ldr	r0, .L19
 840 0340 FFF7FEFF 		bl	HAL_GPIO_Init
 480:Src/main.c    **** 
 481:Src/main.c    ****   /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
 482:Src/main.c    ****   GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 841              		.loc 1 482 0
 842 0344 4FF40C63 		mov	r3, #2240
 843 0348 7B62     		str	r3, [r7, #36]
 483:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 844              		.loc 1 483 0
 845 034a 0223     		movs	r3, #2
 846 034c BB62     		str	r3, [r7, #40]
 484:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 847              		.loc 1 484 0
 848 034e 0023     		movs	r3, #0
 849 0350 FB62     		str	r3, [r7, #44]
 485:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 850              		.loc 1 485 0
 851 0352 0023     		movs	r3, #0
 852 0354 3B63     		str	r3, [r7, #48]
 486:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 853              		.loc 1 486 0
 854 0356 0E23     		movs	r3, #14
 855 0358 7B63     		str	r3, [r7, #52]
 487:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 856              		.loc 1 487 0
 857 035a 07F12403 		add	r3, r7, #36
 858 035e 1946     		mov	r1, r3
 859 0360 3D48     		ldr	r0, .L19+4
 860 0362 FFF7FEFF 		bl	HAL_GPIO_Init
 488:Src/main.c    **** 
 489:Src/main.c    ****   /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
 490:Src/main.c    ****   GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 861              		.loc 1 490 0
 862 0366 4FF49863 		mov	r3, #1216
 863 036a 7B62     		str	r3, [r7, #36]
 491:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 864              		.loc 1 491 0
 865 036c 0223     		movs	r3, #2
 866 036e BB62     		str	r3, [r7, #40]
 492:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 867              		.loc 1 492 0
 868 0370 0023     		movs	r3, #0
 869 0372 FB62     		str	r3, [r7, #44]
 493:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 870              		.loc 1 493 0
 871 0374 0023     		movs	r3, #0
 872 0376 3B63     		str	r3, [r7, #48]
 494:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 873              		.loc 1 494 0
 874 0378 0E23     		movs	r3, #14
 875 037a 7B63     		str	r3, [r7, #52]
 495:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 876              		.loc 1 495 0
 877 037c 07F12403 		add	r3, r7, #36
 878 0380 1946     		mov	r1, r3
ARM GAS  /tmp/ccn8Cl3y.s 			page 25


 879 0382 3648     		ldr	r0, .L19+8
 880 0384 FFF7FEFF 		bl	HAL_GPIO_Init
 496:Src/main.c    **** 
 497:Src/main.c    ****   /*Configure GPIO pin : I2C3_SDA_Pin */
 498:Src/main.c    ****   GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 881              		.loc 1 498 0
 882 0388 4FF40073 		mov	r3, #512
 883 038c 7B62     		str	r3, [r7, #36]
 499:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 884              		.loc 1 499 0
 885 038e 1223     		movs	r3, #18
 886 0390 BB62     		str	r3, [r7, #40]
 500:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 887              		.loc 1 500 0
 888 0392 0123     		movs	r3, #1
 889 0394 FB62     		str	r3, [r7, #44]
 501:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 890              		.loc 1 501 0
 891 0396 0023     		movs	r3, #0
 892 0398 3B63     		str	r3, [r7, #48]
 502:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 893              		.loc 1 502 0
 894 039a 0423     		movs	r3, #4
 895 039c 7B63     		str	r3, [r7, #52]
 503:Src/main.c    ****   HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 896              		.loc 1 503 0
 897 039e 07F12403 		add	r3, r7, #36
 898 03a2 1946     		mov	r1, r3
 899 03a4 2D48     		ldr	r0, .L19+8
 900 03a6 FFF7FEFF 		bl	HAL_GPIO_Init
 504:Src/main.c    **** 
 505:Src/main.c    ****   /*Configure GPIO pin : I2C3_SCL_Pin */
 506:Src/main.c    ****   GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 901              		.loc 1 506 0
 902 03aa 4FF48073 		mov	r3, #256
 903 03ae 7B62     		str	r3, [r7, #36]
 507:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 904              		.loc 1 507 0
 905 03b0 1223     		movs	r3, #18
 906 03b2 BB62     		str	r3, [r7, #40]
 508:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 907              		.loc 1 508 0
 908 03b4 0123     		movs	r3, #1
 909 03b6 FB62     		str	r3, [r7, #44]
 509:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 910              		.loc 1 509 0
 911 03b8 0023     		movs	r3, #0
 912 03ba 3B63     		str	r3, [r7, #48]
 510:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 913              		.loc 1 510 0
 914 03bc 0423     		movs	r3, #4
 915 03be 7B63     		str	r3, [r7, #52]
 511:Src/main.c    ****   HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 916              		.loc 1 511 0
 917 03c0 07F12403 		add	r3, r7, #36
 918 03c4 1946     		mov	r1, r3
 919 03c6 2648     		ldr	r0, .L19+12
ARM GAS  /tmp/ccn8Cl3y.s 			page 26


 920 03c8 FFF7FEFF 		bl	HAL_GPIO_Init
 512:Src/main.c    **** 
 513:Src/main.c    ****   /*Configure GPIO pins : G7_Pin B2_Pin */
 514:Src/main.c    ****   GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 921              		.loc 1 514 0
 922 03cc 4823     		movs	r3, #72
 923 03ce 7B62     		str	r3, [r7, #36]
 515:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 924              		.loc 1 515 0
 925 03d0 0223     		movs	r3, #2
 926 03d2 BB62     		str	r3, [r7, #40]
 516:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 927              		.loc 1 516 0
 928 03d4 0023     		movs	r3, #0
 929 03d6 FB62     		str	r3, [r7, #44]
 517:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 930              		.loc 1 517 0
 931 03d8 0023     		movs	r3, #0
 932 03da 3B63     		str	r3, [r7, #48]
 518:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 933              		.loc 1 518 0
 934 03dc 0E23     		movs	r3, #14
 935 03de 7B63     		str	r3, [r7, #52]
 519:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 936              		.loc 1 519 0
 937 03e0 07F12403 		add	r3, r7, #36
 938 03e4 1946     		mov	r1, r3
 939 03e6 1B48     		ldr	r0, .L19
 940 03e8 FFF7FEFF 		bl	HAL_GPIO_Init
 520:Src/main.c    **** 
 521:Src/main.c    ****   /*Configure GPIO pins : G3_Pin B4_Pin */
 522:Src/main.c    ****   GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 941              		.loc 1 522 0
 942 03ec 4FF4A053 		mov	r3, #5120
 943 03f0 7B62     		str	r3, [r7, #36]
 523:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 944              		.loc 1 523 0
 945 03f2 0223     		movs	r3, #2
 946 03f4 BB62     		str	r3, [r7, #40]
 524:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 947              		.loc 1 524 0
 948 03f6 0023     		movs	r3, #0
 949 03f8 FB62     		str	r3, [r7, #44]
 525:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 950              		.loc 1 525 0
 951 03fa 0023     		movs	r3, #0
 952 03fc 3B63     		str	r3, [r7, #48]
 526:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 953              		.loc 1 526 0
 954 03fe 0923     		movs	r3, #9
 955 0400 7B63     		str	r3, [r7, #52]
 527:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 956              		.loc 1 527 0
 957 0402 07F12403 		add	r3, r7, #36
 958 0406 1946     		mov	r1, r3
 959 0408 1348     		ldr	r0, .L19+4
 960 040a FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccn8Cl3y.s 			page 27


 528:Src/main.c    **** 
 529:Src/main.c    ****   /*Configure GPIO pins : LD3_Pin LD4_Pin */
 530:Src/main.c    ****   GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 961              		.loc 1 530 0
 962 040e 4FF4C043 		mov	r3, #24576
 963 0412 7B62     		str	r3, [r7, #36]
 531:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 964              		.loc 1 531 0
 965 0414 0123     		movs	r3, #1
 966 0416 BB62     		str	r3, [r7, #40]
 532:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 967              		.loc 1 532 0
 968 0418 0023     		movs	r3, #0
 969 041a FB62     		str	r3, [r7, #44]
 533:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 970              		.loc 1 533 0
 971 041c 0023     		movs	r3, #0
 972 041e 3B63     		str	r3, [r7, #48]
 534:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 973              		.loc 1 534 0
 974 0420 07F12403 		add	r3, r7, #36
 975 0424 1946     		mov	r1, r3
 976 0426 0C48     		ldr	r0, .L19+4
 977 0428 FFF7FEFF 		bl	HAL_GPIO_Init
 535:Src/main.c    **** 
 536:Src/main.c    ****   /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
 537:Src/main.c    ****   GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 978              		.loc 1 537 0
 979 042c 6023     		movs	r3, #96
 980 042e 7B62     		str	r3, [r7, #36]
 538:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 981              		.loc 1 538 0
 982 0430 0223     		movs	r3, #2
 983 0432 BB62     		str	r3, [r7, #40]
 539:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 984              		.loc 1 539 0
 985 0434 0023     		movs	r3, #0
 986 0436 FB62     		str	r3, [r7, #44]
 540:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 987              		.loc 1 540 0
 988 0438 0323     		movs	r3, #3
 989 043a 3B63     		str	r3, [r7, #48]
 541:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 990              		.loc 1 541 0
 991 043c 0C23     		movs	r3, #12
 992 043e 7B63     		str	r3, [r7, #52]
 542:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 993              		.loc 1 542 0
 994 0440 07F12403 		add	r3, r7, #36
 995 0444 1946     		mov	r1, r3
 996 0446 0748     		ldr	r0, .L19+16
 997 0448 FFF7FEFF 		bl	HAL_GPIO_Init
 543:Src/main.c    **** 
 544:Src/main.c    **** }
 998              		.loc 1 544 0
 999 044c 00BF     		nop
 1000 044e 3837     		adds	r7, r7, #56
ARM GAS  /tmp/ccn8Cl3y.s 			page 28


 1001              	.LCFI13:
 1002              		.cfi_def_cfa_offset 8
 1003 0450 BD46     		mov	sp, r7
 1004              	.LCFI14:
 1005              		.cfi_def_cfa_register 13
 1006              		@ sp needed
 1007 0452 80BD     		pop	{r7, pc}
 1008              	.L20:
 1009              		.align	2
 1010              	.L19:
 1011 0454 000C0240 		.word	1073875968
 1012 0458 00180240 		.word	1073879040
 1013 045c 00080240 		.word	1073874944
 1014 0460 00000240 		.word	1073872896
 1015 0464 00040240 		.word	1073873920
 1016              		.cfi_endproc
 1017              	.LFE132:
 1019              		.section	.rodata
 1020 0033 00       		.align	2
 1021              	.LC5:
 1022 0034 72656369 		.ascii	"recived\012\000"
 1022      7665640A 
 1022      00
 1023              		.section	.text.CDC_Receive_HS,"ax",%progbits
 1024              		.align	1
 1025              		.global	CDC_Receive_HS
 1026              		.syntax unified
 1027              		.thumb
 1028              		.thumb_func
 1029              		.fpu fpv4-sp-d16
 1031              	CDC_Receive_HS:
 1032              	.LFB133:
 545:Src/main.c    **** 
 546:Src/main.c    **** 
 547:Src/main.c    **** int8_t CDC_Receive_HS (uint8_t* Buf, uint32_t *Len)
 548:Src/main.c    **** {
 1033              		.loc 1 548 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 8
 1036              		@ frame_needed = 1, uses_anonymous_args = 0
 1037 0000 80B5     		push	{r7, lr}
 1038              	.LCFI15:
 1039              		.cfi_def_cfa_offset 8
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 82B0     		sub	sp, sp, #8
 1043              	.LCFI16:
 1044              		.cfi_def_cfa_offset 16
 1045 0004 00AF     		add	r7, sp, #0
 1046              	.LCFI17:
 1047              		.cfi_def_cfa_register 7
 1048 0006 7860     		str	r0, [r7, #4]
 1049 0008 3960     		str	r1, [r7]
 549:Src/main.c    **** 
 550:Src/main.c    ****      
 551:Src/main.c    ****   /* USER CODE BEGIN 6 */ // CDC_Receive_FS  is a callback function. When data were received, the s
 552:Src/main.c    ****     //s_RxBuffers.IsCommandDataReceived=1; //indicates data were received
ARM GAS  /tmp/ccn8Cl3y.s 			page 29


 553:Src/main.c    ****     //s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len; //only set the length, data was direc
 554:Src/main.c    ****      
 555:Src/main.c    ****     //s_RxBuffers.pos_receive++;//move to next position to receive data  
 556:Src/main.c    ****     //if(s_RxBuffers.pos_receive>=MaxCommandsInBuffer) //reach the last buffer, need to rewind to 0
 557:Src/main.c    ****     //{
 558:Src/main.c    ****     //    s_RxBuffers.pos_receive=0;
 559:Src/main.c    ****     //}      
 560:Src/main.c    ****      
 561:Src/main.c    **** //prepare to receive the next data
 562:Src/main.c    ****     //USBD_CDC_SetRxBuffer(hUsbDevice_0, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);//Set
 563:Src/main.c    ****     //USBD_CDC_ReceivePacket(hUsbDevice_0);// Tell that you are ready to receive the next packet, o
 564:Src/main.c    **** 
 565:Src/main.c    **** 
 566:Src/main.c    ****     //printf("recived");
 567:Src/main.c    ****     MessageLength = sprintf(DataToSend, "recived\n", MessageCounter);
 1050              		.loc 1 567 0
 1051 000a 0B4B     		ldr	r3, .L23
 1052 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1053 000e 1A46     		mov	r2, r3
 1054 0010 0A49     		ldr	r1, .L23+4
 1055 0012 0B48     		ldr	r0, .L23+8
 1056 0014 FFF7FEFF 		bl	sprintf
 1057 0018 0346     		mov	r3, r0
 1058 001a 9AB2     		uxth	r2, r3
 1059 001c 094B     		ldr	r3, .L23+12
 1060 001e 1A80     		strh	r2, [r3]	@ movhi
 568:Src/main.c    ****     CDC_Transmit_HS(DataToSend, MessageLength);
 1061              		.loc 1 568 0
 1062 0020 084B     		ldr	r3, .L23+12
 1063 0022 1B88     		ldrh	r3, [r3]
 1064 0024 1946     		mov	r1, r3
 1065 0026 0648     		ldr	r0, .L23+8
 1066 0028 FFF7FEFF 		bl	CDC_Transmit_HS
 569:Src/main.c    ****     //osDelay(1);
 570:Src/main.c    ****  
 571:Src/main.c    ****      return USBD_OK;
 1067              		.loc 1 571 0
 1068 002c 0023     		movs	r3, #0
 572:Src/main.c    ****       
 573:Src/main.c    ****   /* USER CODE END 6 */
 574:Src/main.c    **** }
 1069              		.loc 1 574 0
 1070 002e 1846     		mov	r0, r3
 1071 0030 0837     		adds	r7, r7, #8
 1072              	.LCFI18:
 1073              		.cfi_def_cfa_offset 8
 1074 0032 BD46     		mov	sp, r7
 1075              	.LCFI19:
 1076              		.cfi_def_cfa_register 13
 1077              		@ sp needed
 1078 0034 80BD     		pop	{r7, pc}
 1079              	.L24:
 1080 0036 00BF     		.align	2
 1081              	.L23:
 1082 0038 00000000 		.word	MessageCounter
 1083 003c 34000000 		.word	.LC5
 1084 0040 00000000 		.word	DataToSend
ARM GAS  /tmp/ccn8Cl3y.s 			page 30


 1085 0044 00000000 		.word	MessageLength
 1086              		.cfi_endproc
 1087              	.LFE133:
 1089              		.section	.rodata
 1090 003d 000000   		.align	2
 1091              	.LC6:
 1092 0040 25632563 		.ascii	"%c%c\000"
 1092      00
 1093              		.section	.text.setupBassGuitar,"ax",%progbits
 1094              		.align	1
 1095              		.global	setupBassGuitar
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv4-sp-d16
 1101              	setupBassGuitar:
 1102              	.LFB134:
 575:Src/main.c    **** 
 576:Src/main.c    **** //////////////////////////////////////////////////
 577:Src/main.c    **** //////////////////////////////////////////////////
 578:Src/main.c    **** //////////////////////////////////////////////////
 579:Src/main.c    **** //////////////////////////////////////////////////
 580:Src/main.c    **** //////////////////////////////////////////////////
 581:Src/main.c    **** void setupBassGuitar(){
 1103              		.loc 1 581 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 8
 1106              		@ frame_needed = 1, uses_anonymous_args = 0
 1107 0000 80B5     		push	{r7, lr}
 1108              	.LCFI20:
 1109              		.cfi_def_cfa_offset 8
 1110              		.cfi_offset 7, -8
 1111              		.cfi_offset 14, -4
 1112 0002 82B0     		sub	sp, sp, #8
 1113              	.LCFI21:
 1114              		.cfi_def_cfa_offset 16
 1115 0004 00AF     		add	r7, sp, #0
 1116              	.LCFI22:
 1117              		.cfi_def_cfa_register 7
 582:Src/main.c    ****     //to robi gitare wuoncza
 583:Src/main.c    ****     char status_byte_instrument=0xC2;//MIDI channel 2
 1118              		.loc 1 583 0
 1119 0006 C223     		movs	r3, #194
 1120 0008 FB71     		strb	r3, [r7, #7]
 584:Src/main.c    ****     char data_byte_1_instrument=0x21;//bass guitar
 1121              		.loc 1 584 0
 1122 000a 2123     		movs	r3, #33
 1123 000c BB71     		strb	r3, [r7, #6]
 585:Src/main.c    **** 
 586:Src/main.c    ****     MessageLength = sprintf(DataToSend, "%c%c",status_byte_instrument,data_byte_1_instrument);
 1124              		.loc 1 586 0
 1125 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1126 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1127 0012 0949     		ldr	r1, .L26
 1128 0014 0948     		ldr	r0, .L26+4
 1129 0016 FFF7FEFF 		bl	sprintf
 1130 001a 0346     		mov	r3, r0
ARM GAS  /tmp/ccn8Cl3y.s 			page 31


 1131 001c 9AB2     		uxth	r2, r3
 1132 001e 084B     		ldr	r3, .L26+8
 1133 0020 1A80     		strh	r2, [r3]	@ movhi
 587:Src/main.c    ****     CDC_Transmit_HS(DataToSend, MessageLength);
 1134              		.loc 1 587 0
 1135 0022 074B     		ldr	r3, .L26+8
 1136 0024 1B88     		ldrh	r3, [r3]
 1137 0026 1946     		mov	r1, r3
 1138 0028 0448     		ldr	r0, .L26+4
 1139 002a FFF7FEFF 		bl	CDC_Transmit_HS
 588:Src/main.c    **** }
 1140              		.loc 1 588 0
 1141 002e 00BF     		nop
 1142 0030 0837     		adds	r7, r7, #8
 1143              	.LCFI23:
 1144              		.cfi_def_cfa_offset 8
 1145 0032 BD46     		mov	sp, r7
 1146              	.LCFI24:
 1147              		.cfi_def_cfa_register 13
 1148              		@ sp needed
 1149 0034 80BD     		pop	{r7, pc}
 1150              	.L27:
 1151 0036 00BF     		.align	2
 1152              	.L26:
 1153 0038 40000000 		.word	.LC6
 1154 003c 00000000 		.word	DataToSend
 1155 0040 00000000 		.word	MessageLength
 1156              		.cfi_endproc
 1157              	.LFE134:
 1159              		.section	.text.setupStatusByte,"ax",%progbits
 1160              		.align	1
 1161              		.global	setupStatusByte
 1162              		.syntax unified
 1163              		.thumb
 1164              		.thumb_func
 1165              		.fpu fpv4-sp-d16
 1167              	setupStatusByte:
 1168              	.LFB135:
 589:Src/main.c    **** 
 590:Src/main.c    **** char setupStatusByte(char keyStatus){
 1169              		.loc 1 590 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 8
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173              		@ link register save eliminated.
 1174 0000 80B4     		push	{r7}
 1175              	.LCFI25:
 1176              		.cfi_def_cfa_offset 4
 1177              		.cfi_offset 7, -4
 1178 0002 83B0     		sub	sp, sp, #12
 1179              	.LCFI26:
 1180              		.cfi_def_cfa_offset 16
 1181 0004 00AF     		add	r7, sp, #0
 1182              	.LCFI27:
 1183              		.cfi_def_cfa_register 7
 1184 0006 0346     		mov	r3, r0
 1185 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/ccn8Cl3y.s 			page 32


 591:Src/main.c    ****     if(keyStatus == 0){//note on
 1186              		.loc 1 591 0
 1187 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1188 000c 002B     		cmp	r3, #0
 1189 000e 01D1     		bne	.L29
 592:Src/main.c    ****         return 0x92;
 1190              		.loc 1 592 0
 1191 0010 9223     		movs	r3, #146
 1192 0012 04E0     		b	.L28
 1193              	.L29:
 593:Src/main.c    ****     }else if(keyStatus == 1){//note off
 1194              		.loc 1 593 0
 1195 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1196 0016 012B     		cmp	r3, #1
 1197 0018 01D1     		bne	.L31
 594:Src/main.c    ****         return 0x82;
 1198              		.loc 1 594 0
 1199 001a 8223     		movs	r3, #130
 1200 001c FFE7     		b	.L28
 1201              	.L31:
 1202              	.L28:
 595:Src/main.c    ****     }
 596:Src/main.c    **** }
 1203              		.loc 1 596 0
 1204 001e 1846     		mov	r0, r3
 1205 0020 0C37     		adds	r7, r7, #12
 1206              	.LCFI28:
 1207              		.cfi_def_cfa_offset 4
 1208 0022 BD46     		mov	sp, r7
 1209              	.LCFI29:
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 0024 5DF8047B 		ldr	r7, [sp], #4
 1213              	.LCFI30:
 1214              		.cfi_restore 7
 1215              		.cfi_def_cfa_offset 0
 1216 0028 7047     		bx	lr
 1217              		.cfi_endproc
 1218              	.LFE135:
 1220              		.section	.text.setupDataByte2,"ax",%progbits
 1221              		.align	1
 1222              		.global	setupDataByte2
 1223              		.syntax unified
 1224              		.thumb
 1225              		.thumb_func
 1226              		.fpu fpv4-sp-d16
 1228              	setupDataByte2:
 1229              	.LFB136:
 597:Src/main.c    **** 
 598:Src/main.c    **** char setupDataByte2(char row,char column){
 1230              		.loc 1 598 0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 8
 1233              		@ frame_needed = 1, uses_anonymous_args = 0
 1234              		@ link register save eliminated.
 1235 0000 80B4     		push	{r7}
 1236              	.LCFI31:
ARM GAS  /tmp/ccn8Cl3y.s 			page 33


 1237              		.cfi_def_cfa_offset 4
 1238              		.cfi_offset 7, -4
 1239 0002 83B0     		sub	sp, sp, #12
 1240              	.LCFI32:
 1241              		.cfi_def_cfa_offset 16
 1242 0004 00AF     		add	r7, sp, #0
 1243              	.LCFI33:
 1244              		.cfi_def_cfa_register 7
 1245 0006 0346     		mov	r3, r0
 1246 0008 0A46     		mov	r2, r1
 1247 000a FB71     		strb	r3, [r7, #7]
 1248 000c 1346     		mov	r3, r2
 1249 000e BB71     		strb	r3, [r7, #6]
 599:Src/main.c    ****     return 52 + column + 5*row;
 1250              		.loc 1 599 0
 1251 0010 FB79     		ldrb	r3, [r7, #7]
 1252 0012 1A46     		mov	r2, r3
 1253 0014 9200     		lsls	r2, r2, #2
 1254 0016 1344     		add	r3, r3, r2
 1255 0018 DAB2     		uxtb	r2, r3
 1256 001a BB79     		ldrb	r3, [r7, #6]
 1257 001c 1344     		add	r3, r3, r2
 1258 001e DBB2     		uxtb	r3, r3
 1259 0020 3433     		adds	r3, r3, #52
 1260 0022 DBB2     		uxtb	r3, r3
 600:Src/main.c    **** }
 1261              		.loc 1 600 0
 1262 0024 1846     		mov	r0, r3
 1263 0026 0C37     		adds	r7, r7, #12
 1264              	.LCFI34:
 1265              		.cfi_def_cfa_offset 4
 1266 0028 BD46     		mov	sp, r7
 1267              	.LCFI35:
 1268              		.cfi_def_cfa_register 13
 1269              		@ sp needed
 1270 002a 5DF8047B 		ldr	r7, [sp], #4
 1271              	.LCFI36:
 1272              		.cfi_restore 7
 1273              		.cfi_def_cfa_offset 0
 1274 002e 7047     		bx	lr
 1275              		.cfi_endproc
 1276              	.LFE136:
 1278              		.section	.rodata
 1279 0045 000000   		.align	2
 1280              	.LC7:
 1281 0048 25632563 		.ascii	"%c%c%c\000"
 1281      256300
 1282              		.section	.text.StartDefaultTask,"ax",%progbits
 1283              		.align	1
 1284              		.global	StartDefaultTask
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu fpv4-sp-d16
 1290              	StartDefaultTask:
 1291              	.LFB137:
 601:Src/main.c    **** 
ARM GAS  /tmp/ccn8Cl3y.s 			page 34


 602:Src/main.c    **** 
 603:Src/main.c    **** /* USER CODE BEGIN 4 */
 604:Src/main.c    **** 
 605:Src/main.c    **** /* USER CODE END 4 */
 606:Src/main.c    **** 
 607:Src/main.c    **** /* StartDefaultTask function */
 608:Src/main.c    **** void StartDefaultTask(void const * argument)
 609:Src/main.c    **** {
 1292              		.loc 1 609 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 24
 1295              		@ frame_needed = 1, uses_anonymous_args = 0
 1296 0000 80B5     		push	{r7, lr}
 1297              	.LCFI37:
 1298              		.cfi_def_cfa_offset 8
 1299              		.cfi_offset 7, -8
 1300              		.cfi_offset 14, -4
 1301 0002 88B0     		sub	sp, sp, #32
 1302              	.LCFI38:
 1303              		.cfi_def_cfa_offset 40
 1304 0004 02AF     		add	r7, sp, #8
 1305              	.LCFI39:
 1306              		.cfi_def_cfa 7, 32
 1307 0006 7860     		str	r0, [r7, #4]
 610:Src/main.c    ****   /* init code for USB_DEVICE */
 611:Src/main.c    ****   MX_USB_DEVICE_Init();
 1308              		.loc 1 611 0
 1309 0008 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 1310              	.L37:
 1311              	.LBB12:
 612:Src/main.c    **** 
 613:Src/main.c    **** 
 614:Src/main.c    **** 
 615:Src/main.c    ****   /* USER CODE BEGIN 5 */
 616:Src/main.c    ****   /* Infinite loop */
 617:Src/main.c    ****   for(;;)
 618:Src/main.c    ****   {
 619:Src/main.c    ****     setupBassGuitar();
 1312              		.loc 1 619 0
 1313 000c FFF7FEFF 		bl	setupBassGuitar
 620:Src/main.c    **** 
 621:Src/main.c    ****     char keyStatus, row, column;
 622:Src/main.c    ****     //tukej dostaje char z kosmosu
 623:Src/main.c    ****     char c=0;
 1314              		.loc 1 623 0
 1315 0010 0023     		movs	r3, #0
 1316 0012 FB75     		strb	r3, [r7, #23]
 624:Src/main.c    ****     while(c==0){
 1317              		.loc 1 624 0
 1318 0014 06E0     		b	.L35
 1319              	.L36:
 625:Src/main.c    ****         c=readkey();
 1320              		.loc 1 625 0
 1321 0016 FFF7FEFF 		bl	readkey
 1322 001a 0346     		mov	r3, r0
 1323 001c FB75     		strb	r3, [r7, #23]
 626:Src/main.c    ****         osDelay(5);
ARM GAS  /tmp/ccn8Cl3y.s 			page 35


 1324              		.loc 1 626 0
 1325 001e 0520     		movs	r0, #5
 1326 0020 FFF7FEFF 		bl	osDelay
 1327              	.L35:
 624:Src/main.c    ****     while(c==0){
 1328              		.loc 1 624 0
 1329 0024 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1330 0026 002B     		cmp	r3, #0
 1331 0028 F5D0     		beq	.L36
 627:Src/main.c    ****     }
 628:Src/main.c    ****     char keyStatusMask = 0x40;
 1332              		.loc 1 628 0
 1333 002a 4023     		movs	r3, #64
 1334 002c BB75     		strb	r3, [r7, #22]
 629:Src/main.c    ****     char rowMask = 0x30;
 1335              		.loc 1 629 0
 1336 002e 3023     		movs	r3, #48
 1337 0030 7B75     		strb	r3, [r7, #21]
 630:Src/main.c    ****     char columnMask = 0xF;
 1338              		.loc 1 630 0
 1339 0032 0F23     		movs	r3, #15
 1340 0034 3B75     		strb	r3, [r7, #20]
 631:Src/main.c    ****     
 632:Src/main.c    ****     keyStatus = c & keyStatusMask;
 1341              		.loc 1 632 0
 1342 0036 FA7D     		ldrb	r2, [r7, #23]
 1343 0038 BB7D     		ldrb	r3, [r7, #22]
 1344 003a 1340     		ands	r3, r3, r2
 1345 003c FB74     		strb	r3, [r7, #19]
 633:Src/main.c    ****     row = c & rowMask;
 1346              		.loc 1 633 0
 1347 003e FA7D     		ldrb	r2, [r7, #23]
 1348 0040 7B7D     		ldrb	r3, [r7, #21]
 1349 0042 1340     		ands	r3, r3, r2
 1350 0044 BB74     		strb	r3, [r7, #18]
 634:Src/main.c    ****     column = c & columnMask;
 1351              		.loc 1 634 0
 1352 0046 FA7D     		ldrb	r2, [r7, #23]
 1353 0048 3B7D     		ldrb	r3, [r7, #20]
 1354 004a 1340     		ands	r3, r3, r2
 1355 004c 7B74     		strb	r3, [r7, #17]
 635:Src/main.c    **** 
 636:Src/main.c    ****     char status_byte;
 637:Src/main.c    ****     char data_byte_1;
 638:Src/main.c    ****     char data_byte_2=0x40;//velocity=64
 1356              		.loc 1 638 0
 1357 004e 4023     		movs	r3, #64
 1358 0050 3B74     		strb	r3, [r7, #16]
 639:Src/main.c    **** 
 640:Src/main.c    ****     status_byte = setupStatusByte(keyStatus);
 1359              		.loc 1 640 0
 1360 0052 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1361 0054 1846     		mov	r0, r3
 1362 0056 FFF7FEFF 		bl	setupStatusByte
 1363 005a 0346     		mov	r3, r0
 1364 005c FB73     		strb	r3, [r7, #15]
 641:Src/main.c    ****     data_byte_1 = setupDataByte2(row, column);
ARM GAS  /tmp/ccn8Cl3y.s 			page 36


 1365              		.loc 1 641 0
 1366 005e 7A7C     		ldrb	r2, [r7, #17]	@ zero_extendqisi2
 1367 0060 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 1368 0062 1146     		mov	r1, r2
 1369 0064 1846     		mov	r0, r3
 1370 0066 FFF7FEFF 		bl	setupDataByte2
 1371 006a 0346     		mov	r3, r0
 1372 006c BB73     		strb	r3, [r7, #14]
 642:Src/main.c    **** 
 643:Src/main.c    ****     MessageLength = sprintf(DataToSend, "%c%c%c",status_byte,data_byte_1,data_byte_2);
 1373              		.loc 1 643 0
 1374 006e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1375 0070 B97B     		ldrb	r1, [r7, #14]	@ zero_extendqisi2
 1376 0072 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 1377 0074 0093     		str	r3, [sp]
 1378 0076 0B46     		mov	r3, r1
 1379 0078 0949     		ldr	r1, .L38
 1380 007a 0A48     		ldr	r0, .L38+4
 1381 007c FFF7FEFF 		bl	sprintf
 1382 0080 0346     		mov	r3, r0
 1383 0082 9AB2     		uxth	r2, r3
 1384 0084 084B     		ldr	r3, .L38+8
 1385 0086 1A80     		strh	r2, [r3]	@ movhi
 644:Src/main.c    ****     CDC_Transmit_HS(DataToSend, MessageLength);
 1386              		.loc 1 644 0
 1387 0088 074B     		ldr	r3, .L38+8
 1388 008a 1B88     		ldrh	r3, [r3]
 1389 008c 1946     		mov	r1, r3
 1390 008e 0548     		ldr	r0, .L38+4
 1391 0090 FFF7FEFF 		bl	CDC_Transmit_HS
 645:Src/main.c    ****     osDelay(500);
 1392              		.loc 1 645 0
 1393 0094 4FF4FA70 		mov	r0, #500
 1394 0098 FFF7FEFF 		bl	osDelay
 1395              	.LBE12:
 618:Src/main.c    ****     setupBassGuitar();
 1396              		.loc 1 618 0
 1397 009c B6E7     		b	.L37
 1398              	.L39:
 1399 009e 00BF     		.align	2
 1400              	.L38:
 1401 00a0 48000000 		.word	.LC7
 1402 00a4 00000000 		.word	DataToSend
 1403 00a8 00000000 		.word	MessageLength
 1404              		.cfi_endproc
 1405              	.LFE137:
 1407              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1408              		.align	1
 1409              		.global	HAL_TIM_PeriodElapsedCallback
 1410              		.syntax unified
 1411              		.thumb
 1412              		.thumb_func
 1413              		.fpu fpv4-sp-d16
 1415              	HAL_TIM_PeriodElapsedCallback:
 1416              	.LFB138:
 646:Src/main.c    **** 
 647:Src/main.c    ****   }
ARM GAS  /tmp/ccn8Cl3y.s 			page 37


 648:Src/main.c    ****   /* USER CODE END 5 */ 
 649:Src/main.c    **** }
 650:Src/main.c    **** 
 651:Src/main.c    **** /**
 652:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 653:Src/main.c    ****   * @note   This function is called  when TIM6 interrupt took place, inside
 654:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 655:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 656:Src/main.c    ****   * @param  htim : TIM handle
 657:Src/main.c    ****   * @retval None
 658:Src/main.c    ****   */
 659:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 660:Src/main.c    **** {
 1417              		.loc 1 660 0
 1418              		.cfi_startproc
 1419              		@ args = 0, pretend = 0, frame = 8
 1420              		@ frame_needed = 1, uses_anonymous_args = 0
 1421 0000 80B5     		push	{r7, lr}
 1422              	.LCFI40:
 1423              		.cfi_def_cfa_offset 8
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 82B0     		sub	sp, sp, #8
 1427              	.LCFI41:
 1428              		.cfi_def_cfa_offset 16
 1429 0004 00AF     		add	r7, sp, #0
 1430              	.LCFI42:
 1431              		.cfi_def_cfa_register 7
 1432 0006 7860     		str	r0, [r7, #4]
 661:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 662:Src/main.c    **** 
 663:Src/main.c    **** /* USER CODE END Callback 0 */
 664:Src/main.c    ****   if (htim->Instance == TIM6) {
 1433              		.loc 1 664 0
 1434 0008 7B68     		ldr	r3, [r7, #4]
 1435 000a 1B68     		ldr	r3, [r3]
 1436 000c 044A     		ldr	r2, .L43
 1437 000e 9342     		cmp	r3, r2
 1438 0010 01D1     		bne	.L42
 665:Src/main.c    ****     HAL_IncTick();
 1439              		.loc 1 665 0
 1440 0012 FFF7FEFF 		bl	HAL_IncTick
 1441              	.L42:
 666:Src/main.c    ****   }
 667:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 668:Src/main.c    **** 
 669:Src/main.c    **** /* USER CODE END Callback 1 */
 670:Src/main.c    **** }
 1442              		.loc 1 670 0
 1443 0016 00BF     		nop
 1444 0018 0837     		adds	r7, r7, #8
 1445              	.LCFI43:
 1446              		.cfi_def_cfa_offset 8
 1447 001a BD46     		mov	sp, r7
 1448              	.LCFI44:
 1449              		.cfi_def_cfa_register 13
 1450              		@ sp needed
ARM GAS  /tmp/ccn8Cl3y.s 			page 38


 1451 001c 80BD     		pop	{r7, pc}
 1452              	.L44:
 1453 001e 00BF     		.align	2
 1454              	.L43:
 1455 0020 00100040 		.word	1073745920
 1456              		.cfi_endproc
 1457              	.LFE138:
 1459              		.section	.text._Error_Handler,"ax",%progbits
 1460              		.align	1
 1461              		.global	_Error_Handler
 1462              		.syntax unified
 1463              		.thumb
 1464              		.thumb_func
 1465              		.fpu fpv4-sp-d16
 1467              	_Error_Handler:
 1468              	.LFB139:
 671:Src/main.c    **** 
 672:Src/main.c    **** /**
 673:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 674:Src/main.c    ****   * @param  None
 675:Src/main.c    ****   * @retval None
 676:Src/main.c    ****   */
 677:Src/main.c    **** void _Error_Handler(char * file, int line)
 678:Src/main.c    **** {
 1469              		.loc 1 678 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 8
 1472              		@ frame_needed = 1, uses_anonymous_args = 0
 1473              		@ link register save eliminated.
 1474 0000 80B4     		push	{r7}
 1475              	.LCFI45:
 1476              		.cfi_def_cfa_offset 4
 1477              		.cfi_offset 7, -4
 1478 0002 83B0     		sub	sp, sp, #12
 1479              	.LCFI46:
 1480              		.cfi_def_cfa_offset 16
 1481 0004 00AF     		add	r7, sp, #0
 1482              	.LCFI47:
 1483              		.cfi_def_cfa_register 7
 1484 0006 7860     		str	r0, [r7, #4]
 1485 0008 3960     		str	r1, [r7]
 1486              	.L46:
 679:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 680:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 681:Src/main.c    ****   while(1) 
 1487              		.loc 1 681 0 discriminator 1
 1488 000a FEE7     		b	.L46
 1489              		.cfi_endproc
 1490              	.LFE139:
 1492              		.section	.text.print_chr,"ax",%progbits
 1493              		.align	1
 1494              		.syntax unified
 1495              		.thumb
 1496              		.thumb_func
 1497              		.fpu fpv4-sp-d16
 1499              	print_chr:
 1500              	.LFB140:
ARM GAS  /tmp/ccn8Cl3y.s 			page 39


 682:Src/main.c    ****   {
 683:Src/main.c    ****   }
 684:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */ 
 685:Src/main.c    **** }
 686:Src/main.c    **** 
 687:Src/main.c    **** static void print_chr(char chr)
 688:Src/main.c    **** {
 1501              		.loc 1 688 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 8
 1504              		@ frame_needed = 1, uses_anonymous_args = 0
 1505 0000 80B5     		push	{r7, lr}
 1506              	.LCFI48:
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 7, -8
 1509              		.cfi_offset 14, -4
 1510 0002 82B0     		sub	sp, sp, #8
 1511              	.LCFI49:
 1512              		.cfi_def_cfa_offset 16
 1513 0004 00AF     		add	r7, sp, #0
 1514              	.LCFI50:
 1515              		.cfi_def_cfa_register 7
 1516 0006 0346     		mov	r3, r0
 1517 0008 FB71     		strb	r3, [r7, #7]
 689:Src/main.c    ****     HAL_UART_Transmit(&huart1,
 1518              		.loc 1 689 0
 1519 000a F91D     		adds	r1, r7, #7
 1520 000c 4FF47A73 		mov	r3, #1000
 1521 0010 0122     		movs	r2, #1
 1522 0012 0348     		ldr	r0, .L48
 1523 0014 FFF7FEFF 		bl	HAL_UART_Transmit
 690:Src/main.c    ****     (uint8_t*)&chr, 1, 1000);
 691:Src/main.c    **** }
 1524              		.loc 1 691 0
 1525 0018 00BF     		nop
 1526 001a 0837     		adds	r7, r7, #8
 1527              	.LCFI51:
 1528              		.cfi_def_cfa_offset 8
 1529 001c BD46     		mov	sp, r7
 1530              	.LCFI52:
 1531              		.cfi_def_cfa_register 13
 1532              		@ sp needed
 1533 001e 80BD     		pop	{r7, pc}
 1534              	.L49:
 1535              		.align	2
 1536              	.L48:
 1537 0020 00000000 		.word	huart1
 1538              		.cfi_endproc
 1539              	.LFE140:
 1541              		.section	.text._write_r,"ax",%progbits
 1542              		.align	1
 1543              		.global	_write_r
 1544              		.syntax unified
 1545              		.thumb
 1546              		.thumb_func
 1547              		.fpu fpv4-sp-d16
 1549              	_write_r:
ARM GAS  /tmp/ccn8Cl3y.s 			page 40


 1550              	.LFB141:
 692:Src/main.c    **** 
 693:Src/main.c    **** 
 694:Src/main.c    **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
 695:Src/main.c    **** {
 1551              		.loc 1 695 0
 1552              		.cfi_startproc
 1553              		@ args = 0, pretend = 0, frame = 24
 1554              		@ frame_needed = 1, uses_anonymous_args = 0
 1555 0000 80B5     		push	{r7, lr}
 1556              	.LCFI53:
 1557              		.cfi_def_cfa_offset 8
 1558              		.cfi_offset 7, -8
 1559              		.cfi_offset 14, -4
 1560 0002 86B0     		sub	sp, sp, #24
 1561              	.LCFI54:
 1562              		.cfi_def_cfa_offset 32
 1563 0004 00AF     		add	r7, sp, #0
 1564              	.LCFI55:
 1565              		.cfi_def_cfa_register 7
 1566 0006 F860     		str	r0, [r7, #12]
 1567 0008 B960     		str	r1, [r7, #8]
 1568 000a 7A60     		str	r2, [r7, #4]
 1569 000c 3B60     		str	r3, [r7]
 696:Src/main.c    ****     int cntr = len;
 1570              		.loc 1 696 0
 1571 000e 3B68     		ldr	r3, [r7]
 1572 0010 7B61     		str	r3, [r7, #20]
 697:Src/main.c    ****     char *pTemp = (char*)ptr;
 1573              		.loc 1 697 0
 1574 0012 7B68     		ldr	r3, [r7, #4]
 1575 0014 3B61     		str	r3, [r7, #16]
 698:Src/main.c    ****     while(cntr--)
 1576              		.loc 1 698 0
 1577 0016 06E0     		b	.L51
 1578              	.L52:
 699:Src/main.c    ****         print_chr(*pTemp++);
 1579              		.loc 1 699 0
 1580 0018 3B69     		ldr	r3, [r7, #16]
 1581 001a 5A1C     		adds	r2, r3, #1
 1582 001c 3A61     		str	r2, [r7, #16]
 1583 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1584 0020 1846     		mov	r0, r3
 1585 0022 FFF7FEFF 		bl	print_chr
 1586              	.L51:
 698:Src/main.c    ****     while(cntr--)
 1587              		.loc 1 698 0
 1588 0026 7B69     		ldr	r3, [r7, #20]
 1589 0028 5A1E     		subs	r2, r3, #1
 1590 002a 7A61     		str	r2, [r7, #20]
 1591 002c 002B     		cmp	r3, #0
 1592 002e F3D1     		bne	.L52
 700:Src/main.c    ****     return len;
 1593              		.loc 1 700 0
 1594 0030 3B68     		ldr	r3, [r7]
 701:Src/main.c    **** }
 1595              		.loc 1 701 0
ARM GAS  /tmp/ccn8Cl3y.s 			page 41


 1596 0032 1846     		mov	r0, r3
 1597 0034 1837     		adds	r7, r7, #24
 1598              	.LCFI56:
 1599              		.cfi_def_cfa_offset 8
 1600 0036 BD46     		mov	sp, r7
 1601              	.LCFI57:
 1602              		.cfi_def_cfa_register 13
 1603              		@ sp needed
 1604 0038 80BD     		pop	{r7, pc}
 1605              		.cfi_endproc
 1606              	.LFE141:
 1608              		.section	.text.readkey,"ax",%progbits
 1609              		.align	1
 1610              		.global	readkey
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu fpv4-sp-d16
 1616              	readkey:
 1617              	.LFB142:
 702:Src/main.c    **** 
 703:Src/main.c    **** char readkey(void)
 704:Src/main.c    **** {
 1618              		.loc 1 704 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 1, uses_anonymous_args = 0
 1622 0000 80B5     		push	{r7, lr}
 1623              	.LCFI58:
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 7, -8
 1626              		.cfi_offset 14, -4
 1627 0002 82B0     		sub	sp, sp, #8
 1628              	.LCFI59:
 1629              		.cfi_def_cfa_offset 16
 1630 0004 00AF     		add	r7, sp, #0
 1631              	.LCFI60:
 1632              		.cfi_def_cfa_register 7
 705:Src/main.c    ****     uint8_t rxed;
 706:Src/main.c    ****     HAL_StatusTypeDef res =
 1633              		.loc 1 706 0
 1634 0006 B91D     		adds	r1, r7, #6
 1635 0008 0123     		movs	r3, #1
 1636 000a 0122     		movs	r2, #1
 1637 000c 0748     		ldr	r0, .L58
 1638 000e FFF7FEFF 		bl	HAL_UART_Receive
 1639 0012 0346     		mov	r3, r0
 1640 0014 FB71     		strb	r3, [r7, #7]
 707:Src/main.c    ****         HAL_UART_Receive(&huart1,&rxed,1,1);
 708:Src/main.c    **** 
 709:Src/main.c    **** 
 710:Src/main.c    ****     if(res == HAL_OK)
 1641              		.loc 1 710 0
 1642 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1643 0018 002B     		cmp	r3, #0
 1644 001a 01D1     		bne	.L55
 711:Src/main.c    ****         return rxed;
ARM GAS  /tmp/ccn8Cl3y.s 			page 42


 1645              		.loc 1 711 0
 1646 001c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1647 001e 00E0     		b	.L57
 1648              	.L55:
 712:Src/main.c    ****     else
 713:Src/main.c    ****         return 0;
 1649              		.loc 1 713 0
 1650 0020 0023     		movs	r3, #0
 1651              	.L57:
 714:Src/main.c    **** }
 1652              		.loc 1 714 0 discriminator 1
 1653 0022 1846     		mov	r0, r3
 1654 0024 0837     		adds	r7, r7, #8
 1655              	.LCFI61:
 1656              		.cfi_def_cfa_offset 8
 1657 0026 BD46     		mov	sp, r7
 1658              	.LCFI62:
 1659              		.cfi_def_cfa_register 13
 1660              		@ sp needed
 1661 0028 80BD     		pop	{r7, pc}
 1662              	.L59:
 1663 002a 00BF     		.align	2
 1664              	.L58:
 1665 002c 00000000 		.word	huart1
 1666              		.cfi_endproc
 1667              	.LFE142:
 1669              		.text
 1670              	.Letext0:
 1671              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1672              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1673              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1674              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1675              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 1676              		.file 7 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1677              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1678              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1679              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 1680              		.file 11 "/usr/arm-none-eabi/include/sys/types.h"
 1681              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1682              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1683              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1684              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1685              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1686              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1687              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1688              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1689              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1690              		.file 21 "/usr/arm-none-eabi/include/stdlib.h"
 1691              		.file 22 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1692              		.file 23 "Inc/usb_device.h"
 1693              		.file 24 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1694              		.file 25 "Inc/usbd_cdc_if.h"
ARM GAS  /tmp/ccn8Cl3y.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000003 DataToSend
     /tmp/ccn8Cl3y.s:24     .bss.MessageCounter:0000000000000000 MessageCounter
     /tmp/ccn8Cl3y.s:25     .bss.MessageCounter:0000000000000000 $d
     /tmp/ccn8Cl3y.s:31     .bss.MessageLength:0000000000000000 MessageLength
     /tmp/ccn8Cl3y.s:28     .bss.MessageLength:0000000000000000 $d
     /tmp/ccn8Cl3y.s:34     .rodata:0000000000000000 $d
     /tmp/ccn8Cl3y.s:1290   .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccn8Cl3y.s:49     .text.main:0000000000000000 $t
     /tmp/ccn8Cl3y.s:56     .text.main:0000000000000000 main
     /tmp/ccn8Cl3y.s:132    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccn8Cl3y.s:363    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccn8Cl3y.s:287    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccn8Cl3y.s:114    .text.main:0000000000000048 $d
     /tmp/ccn8Cl3y.s:125    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1467   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccn8Cl3y.s:273    .text.SystemClock_Config:00000000000000dc $d
     /tmp/ccn8Cl3y.s:281    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccn8Cl3y.s:350    .text.MX_USART1_UART_Init:0000000000000050 $d
     /tmp/ccn8Cl3y.s:357    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccn8Cl3y.s:786    .text.MX_GPIO_Init:00000000000002d0 $d
     /tmp/ccn8Cl3y.s:797    .text.MX_GPIO_Init:00000000000002f4 $t
     /tmp/ccn8Cl3y.s:1011   .text.MX_GPIO_Init:0000000000000454 $d
     /tmp/ccn8Cl3y.s:1024   .text.CDC_Receive_HS:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1031   .text.CDC_Receive_HS:0000000000000000 CDC_Receive_HS
     /tmp/ccn8Cl3y.s:1082   .text.CDC_Receive_HS:0000000000000038 $d
     /tmp/ccn8Cl3y.s:1094   .text.setupBassGuitar:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1101   .text.setupBassGuitar:0000000000000000 setupBassGuitar
     /tmp/ccn8Cl3y.s:1153   .text.setupBassGuitar:0000000000000038 $d
     /tmp/ccn8Cl3y.s:1160   .text.setupStatusByte:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1167   .text.setupStatusByte:0000000000000000 setupStatusByte
     /tmp/ccn8Cl3y.s:1221   .text.setupDataByte2:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1228   .text.setupDataByte2:0000000000000000 setupDataByte2
     /tmp/ccn8Cl3y.s:1283   .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1616   .text.readkey:0000000000000000 readkey
     /tmp/ccn8Cl3y.s:1401   .text.StartDefaultTask:00000000000000a0 $d
     /tmp/ccn8Cl3y.s:1408   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1415   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccn8Cl3y.s:1455   .text.HAL_TIM_PeriodElapsedCallback:0000000000000020 $d
     /tmp/ccn8Cl3y.s:1460   .text._Error_Handler:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1493   .text.print_chr:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1499   .text.print_chr:0000000000000000 print_chr
     /tmp/ccn8Cl3y.s:1537   .text.print_chr:0000000000000020 $d
     /tmp/ccn8Cl3y.s:1542   .text._write_r:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1549   .text._write_r:0000000000000000 _write_r
     /tmp/ccn8Cl3y.s:1609   .text.readkey:0000000000000000 $t
     /tmp/ccn8Cl3y.s:1665   .text.readkey:000000000000002c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_Init
osThreadCreate
osKernelStart
puts
ARM GAS  /tmp/ccn8Cl3y.s 			page 44


osDelay
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_UART_Init
HAL_GPIO_WritePin
HAL_GPIO_Init
sprintf
CDC_Transmit_HS
MX_USB_DEVICE_Init
HAL_IncTick
HAL_UART_Transmit
HAL_UART_Receive
